{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py:517: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  self.obj[item] = s\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\ipykernel\\__main__.py:367: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\pymysql\\cursors.py:166: Warning: (1292, \"Incorrect datetime value: 'January'\")\n",
      "  result = self._query(query)\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\pymysql\\cursors.py:166: Warning: (1292, \"Incorrect datetime value: 'March'\")\n",
      "  result = self._query(query)\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\pymysql\\cursors.py:166: Warning: (1292, \"Incorrect datetime value: 'October'\")\n",
      "  result = self._query(query)\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\pymysql\\cursors.py:166: Warning: (1292, \"Incorrect datetime value: 'August'\")\n",
      "  result = self._query(query)\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\pymysql\\cursors.py:166: Warning: (1292, \"Incorrect datetime value: 'May'\")\n",
      "  result = self._query(query)\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\pymysql\\cursors.py:166: Warning: (1292, \"Incorrect datetime value: 'November'\")\n",
      "  result = self._query(query)\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\pymysql\\cursors.py:166: Warning: (1292, \"Incorrect datetime value: 'June'\")\n",
      "  result = self._query(query)\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\pymysql\\cursors.py:166: Warning: (1292, \"Incorrect datetime value: 'July'\")\n",
      "  result = self._query(query)\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\pymysql\\cursors.py:166: Warning: (1292, \"Incorrect datetime value: 'February'\")\n",
      "  result = self._query(query)\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\pymysql\\cursors.py:166: Warning: (1292, \"Incorrect datetime value: 'April'\")\n",
      "  result = self._query(query)\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\pymysql\\cursors.py:166: Warning: (1292, \"Incorrect datetime value: 'December'\")\n",
      "  result = self._query(query)\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\pymysql\\cursors.py:166: Warning: (1292, \"Incorrect datetime value: 'September'\")\n",
      "  result = self._query(query)\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\ipykernel\\__main__.py:443: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\ipykernel\\__main__.py:513: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\ipykernel\\__main__.py:640: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\ipykernel\\__main__.py:726: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\ipykernel\\__main__.py:740: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\pymysql\\cursors.py:166: Warning: (1292, \"Incorrect datetime value: '1312'\")\n",
      "  result = self._query(query)\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\pymysql\\cursors.py:166: Warning: (1292, \"Incorrect datetime value: '1316'\")\n",
      "  result = self._query(query)\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\pymysql\\cursors.py:166: Warning: (1292, \"Incorrect datetime value: '1315'\")\n",
      "  result = self._query(query)\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\pymysql\\cursors.py:166: Warning: (1292, \"Incorrect datetime value: '1405'\")\n",
      "  result = self._query(query)\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\pymysql\\cursors.py:166: Warning: (1292, \"Incorrect datetime value: '1400'\")\n",
      "  result = self._query(query)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import calendar\n",
    "import datetime\n",
    "import numpy as np\n",
    "import string\n",
    "import matplotlib as mt\n",
    "import matplotlib.pyplot as plt\n",
    "import pymysql\n",
    "from xlsxwriter.utility import xl_rowcol_to_cell\n",
    "myconnection = pymysql.connect( host='127.0.0.1', user='eallan', passwd='', db='main' )\n",
    "cursor = myconnection.cursor()\n",
    "practices = pd.read_sql_query(\"select * from practices where enabled = 1 and id not in (9, 49, 53, 57, 58)\", myconnection)\n",
    "#practices = pd.read_sql_query(\"select * from practices where enabled = 1 and id in (54)\", myconnection)\n",
    "for i in range(len(practices)):\n",
    "#    practice_test_id = practices['id'][i]\n",
    "#    practice_test_name = practices['name'][i]\n",
    "    practice_id = int(practices['id'][i])\n",
    "    practice_name = practices['name'][i]\n",
    "#    practice_id = 54\n",
    "#    practice_name = 'ENT Office Test'\n",
    "    month = 'February'\n",
    "    month_number = 12\n",
    "    PSD = '2017-03-01 00:00:00'\n",
    "    PED = '2018-02-28 23:59:59'\n",
    "    year = 2018\n",
    "    year_start = 2017\n",
    "#    for i, m in enumerate(calendar.month_name[1:]):\n",
    "#        last_date = calendar.monthrange(year,i + 1)[1]\n",
    "#        month_name = m.capitalize()\n",
    "#        if PED >= datetime.datetime(year, i + 1, last_date, 0, 0, 0).strftime('%Y-%m-%d %H:%M:%S'):\n",
    "#            if i + 1 < 10:\n",
    "#                total_techs_for_practice_size = pd.read_sql_query(\"SELECT count(DISTINCT tech.tester, tech.username) AS %(month_name)s, tech.practice_id as group_practices, name.name FROM (( SELECT a.patient_id AS Patients_Tested, monthname(a.date) AS test_date, a.date AS month_year, b.practice_id, a.shot_giver_id AS tester, 'shot' as type_of_test, 'ZXCV78' as barcode, 'sht' as intake_method, c.username, c.firstname, c.lastname FROM patient_visits_shots a LEFT JOIN patients b ON a.patient_id = b.id LEFT JOIN users c ON c.id = a.shot_giver_id WHERE a.active = 1 AND a.Date BETWEEN %(PSD)s AND %(PED)s AND b.id IS NOT NULL AND c.id IS NOT NULL ) UNION ( SELECT DISTINCT q.patient AS Patients_Tested, q.tester, monthname(q.test_date) AS test_date, q.test_date AS month_year, q.type AS type_of_test, 'QWER45' as barcode, 'tst' as intake_method, q.practice_ID, z.username, z.firstname, z.lastname FROM (( SELECT DISTINCT (a.patient_id) AS patient, a.user_id AS tester, a.test_date AS test_date, a.location_ID, d.Name, a.practice_id, i.name AS Practice_name, 'injection' AS type FROM intradermal_tests a INNER JOIN practice_locations d ON a.Location_ID = d.id INNER JOIN practices i ON a.practice_id = i.id WHERE a.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (a.Status IS NULL OR a.Status <> 'deleted')) UNION ( SELECT DISTINCT (b.patient_id) AS patient, b.tester_id AS tester, b.test_date AS test_date, b.location_id, e.Name, b.practice_id, i.name AS Practice_name, 'mqt' AS type FROM mq_tests b INNER JOIN practice_locations e ON b.Location_ID = e.id INNER JOIN practices i ON b.practice_id = i.id WHERE b.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (b.Status IS NULL OR b.Status <> 'deleted')) UNION ( SELECT DISTINCT (c.patient_id) AS patient, c.tester_id AS tester, c.test_date AS test_date, c.location_id, f.Name, c.practice_id, i.name AS Practice_name, 'stick' AS type FROM prick_tests c INNER JOIN practice_locations f ON c.location_id = f.id INNER JOIN practices i ON c.practice_id = i.id WHERE c.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (c.Status IS NULL OR c.Status <> 'deleted')) UNION ( SELECT DISTINCT (g.patient_id) AS patient, g.blood_drawn_by AS tester, g.Start_Date AS test_date, g.Start_Location_id AS Location_ID, h.name, g.start_practice_id, i.name AS Practice_name, 'ige' AS type FROM ige_tests g INNER JOIN practice_locations h ON g.start_practice_id = h.ID INNER JOIN practices i ON g.start_practice_id = i.id WHERE g.Start_Date BETWEEN %(PSD)s AND %(PED)s AND (g.Status = 'Complete')) ORDER BY Location_ID) q LEFT JOIN users z ON q.tester = z.id) UNION ( SELECT DISTINCT v.patient_id AS Patients_Tested, v.barcode, IF (v.created_by IS NULL, v.mixer_id, v.created_by) AS tester, monthname(v.Mix_Date) AS test_date, v.Mix_Date AS month_year, z.intake_method, 'vial' as type_of_test, v.mix_practice_id AS practice_id, u.username, u.firstname, u.lastname FROM vials v LEFT JOIN patients z ON v.patient_id = z.id LEFT JOIN users u ON IF (v.created_by IS NULL, v.mixer_id, v.created_by) = u.id LEFT JOIN practice_locations a ON v.mix_location_id = a.id LEFT JOIN practices b ON v.mix_practice_id = b.id WHERE (v.status_id <> 2 OR v.status_id IS NOT NULL ) AND v.is_child <> 1 AND v.Mix_Date BETWEEN %(PSD)s AND %(PED)s AND v.Patient_ID IS NOT NULL AND u.id IS NOT NULL ) UNION ( SELECT a.id AS Patients_Tested, a.user_id AS tester, a.practice_id, monthname(a.date) AS test_date, a.date AS month_year, 'ASDF12' as barcode, 'err' as intake_method, 'error' as type_of_test, u.username, u.firstname, u.lastname FROM user_errors a INNER JOIN practice_locations b ON a.Location_ID = b.id INNER JOIN practices c ON a.practice_id = c.id LEFT JOIN users u ON a.user_id = u.id WHERE a.Date BETWEEN %(PSD)s AND %(PED)s)) tech left join practices name on tech.practice_id = name.id WHERE tech.month_year BETWEEN '%(year)s-0%(month)s-01 00:00:00' AND '%(year)s-0%(month)s-%(last_date)s 23:59:59' GROUP BY tech.practice_ID\", myconnection, params={\"year\":year, \"month_name\":month_name, \"month\":i + 1,\"last_date\":last_date, \"PSD\":PSD, \"PED\":PED})\n",
    "#            else:\n",
    "#                total_techs_for_practice_size = pd.read_sql_query(\"SELECT count(DISTINCT tech.tester, tech.username) AS %(month_name)s, tech.practice_id as group_practices, name.name FROM (( SELECT a.patient_id AS Patients_Tested, monthname(a.date) AS test_date, a.date AS month_year, b.practice_id, a.shot_giver_id AS tester, 'shot' as type_of_test, 'ZXCV78' as barcode, 'sht' as intake_method, c.username, c.firstname, c.lastname FROM patient_visits_shots a LEFT JOIN patients b ON a.patient_id = b.id LEFT JOIN users c ON c.id = a.shot_giver_id WHERE a.active = 1 AND a.Date BETWEEN %(PSD)s AND %(PED)s AND b.id IS NOT NULL AND c.id IS NOT NULL ) UNION ( SELECT DISTINCT q.patient AS Patients_Tested, q.tester, monthname(q.test_date) AS test_date, q.test_date AS month_year, q.type AS type_of_test, 'QWER45' as barcode, 'tst' as intake_method, q.practice_ID, z.username, z.firstname, z.lastname FROM (( SELECT DISTINCT (a.patient_id) AS patient, a.user_id AS tester, a.test_date AS test_date, a.location_ID, d.Name, a.practice_id, i.name AS Practice_name, 'injection' AS type FROM intradermal_tests a INNER JOIN practice_locations d ON a.Location_ID = d.id INNER JOIN practices i ON a.practice_id = i.id WHERE a.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (a.Status IS NULL OR a.Status <> 'deleted')) UNION ( SELECT DISTINCT (b.patient_id) AS patient, b.tester_id AS tester, b.test_date AS test_date, b.location_id, e.Name, b.practice_id, i.name AS Practice_name, 'mqt' AS type FROM mq_tests b INNER JOIN practice_locations e ON b.Location_ID = e.id INNER JOIN practices i ON b.practice_id = i.id WHERE b.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (b.Status IS NULL OR b.Status <> 'deleted')) UNION ( SELECT DISTINCT (c.patient_id) AS patient, c.tester_id AS tester, c.test_date AS test_date, c.location_id, f.Name, c.practice_id, i.name AS Practice_name, 'stick' AS type FROM prick_tests c INNER JOIN practice_locations f ON c.location_id = f.id INNER JOIN practices i ON c.practice_id = i.id WHERE c.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (c.Status IS NULL OR c.Status <> 'deleted')) UNION ( SELECT DISTINCT (g.patient_id) AS patient, g.blood_drawn_by AS tester, g.Start_Date AS test_date, g.Start_Location_id AS Location_ID, h.name, g.start_practice_id, i.name AS Practice_name, 'ige' AS type FROM ige_tests g INNER JOIN practice_locations h ON g.start_practice_id = h.ID INNER JOIN practices i ON g.start_practice_id = i.id WHERE g.Start_Date BETWEEN %(PSD)s AND %(PED)s AND (g.Status = 'Complete')) ORDER BY Location_ID) q LEFT JOIN users z ON q.tester = z.id) UNION ( SELECT DISTINCT v.patient_id AS Patients_Tested, v.barcode, IF (v.created_by IS NULL, v.mixer_id, v.created_by) AS tester, monthname(v.Mix_Date) AS test_date, v.Mix_Date AS month_year, z.intake_method, 'vial' as type_of_test, v.mix_practice_id AS practice_id, u.username, u.firstname, u.lastname FROM vials v LEFT JOIN patients z ON v.patient_id = z.id LEFT JOIN users u ON IF (v.created_by IS NULL, v.mixer_id, v.created_by) = u.id LEFT JOIN practice_locations a ON v.mix_location_id = a.id LEFT JOIN practices b ON v.mix_practice_id = b.id WHERE (v.status_id <> 2 OR v.status_id IS NOT NULL ) AND v.is_child <> 1 AND v.Mix_Date BETWEEN %(PSD)s AND %(PED)s AND v.Patient_ID IS NOT NULL AND u.id IS NOT NULL ) UNION ( SELECT a.id AS Patients_Tested, a.user_id AS tester, a.practice_id, monthname(a.date) AS test_date, a.date AS month_year, 'ASDF12' as barcode, 'err' as intake_method, 'error' as type_of_test, u.username, u.firstname, u.lastname FROM user_errors a INNER JOIN practice_locations b ON a.Location_ID = b.id INNER JOIN practices c ON a.practice_id = c.id LEFT JOIN users u ON a.user_id = u.id WHERE a.Date BETWEEN %(PSD)s AND %(PED)s)) tech left join practices name on tech.practice_id = name.id WHERE tech.month_year BETWEEN '%(year)s-%(month)s-01 00:00:00' AND '%(year)s-%(month)s-%(last_date)s 23:59:59' GROUP BY tech.practice_ID\", myconnection, params={\"year\":year, \"month_name\":month_name, \"month\":i + 1,\"last_date\":last_date, \"PSD\":PSD, \"PED\":PED})\n",
    "#    total_techs_for_practice_size.sort_values('%s' % (month))\n",
    "#    Small, Medium, Large = total_techs_for_practice_size[total_techs_for_practice_size['%s' % (month)] <= 4], total_techs_for_practice_size[(total_techs_for_practice_size['%s' % (month)] <= 10) & (total_techs_for_practice_size['%s' % (month)] >= 5)], total_techs_for_practice_size[total_techs_for_practice_size['%s' % (month)] >= 11]\n",
    "    total_doctors = pd.read_sql_query(\"SELECT pd.practice_id, count(DISTINCT(pd.id)) as total_doctors, count(p.id) AS total_patients FROM practice_doctors pd LEFT JOIN patients p ON pd.id = p.mix_practice_doctor_id WHERE pd.active = 1 GROUP BY pd.practice_id\", myconnection)\n",
    "    total_doctors.sort_values('total_doctors')\n",
    "    Small, Medium, Large = total_doctors[total_doctors['total_doctors'] <= 4], total_doctors[(total_doctors['total_doctors'] <= 10) & (total_doctors['total_doctors'] >= 5)], total_doctors[total_doctors['total_doctors'] >= 11]\n",
    "    Small = Small[['practice_id']].astype(str)\n",
    "    Medium = Medium[['practice_id']].astype(str)\n",
    "    Large = Large[['practice_id']].astype(str)\n",
    "    small_tuple = tuple(Small.practice_id)\n",
    "    medium_tuple = tuple(Medium.practice_id)\n",
    "    large_tuple = tuple(Large.practice_id)\n",
    "    if '%s' % (practice_id) in tuple(Small.practice_id):\n",
    "        segment = 'Small'\n",
    "    elif '%s' % (practice_id) in tuple(Medium.practice_id):\n",
    "        segment = 'Medium'\n",
    "    elif '%s' % (practice_id) in tuple(Large.practice_id):\n",
    "        segment = 'Large'\n",
    "    else:\n",
    "        segment = 'Error'\n",
    "    total_tests = pd.read_sql_query(\"SELECT distinct q.patient as Patients_Tested, q.tester, monthname(q.test_date) as test_date, q.test_date as month_year, q.type as type_of_test, q.Location_ID, q.Name as location_name, q.practice_ID, q.Practice_name, z.username, z.firstname, z.lastname FROM ( (select distinct(a.patient_id) as patient, a.user_id as tester, a.test_date as test_date, a.location_ID, d.Name, a.practice_id, i.name as Practice_name, 'injection' as type from intradermal_tests a INNER JOIN practice_locations d ON a.Location_ID = d.id INNER JOIN practices i on a.practice_id = i.id where a.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (a.Status IS NULL OR a.Status <> 'deleted')) UNION (select distinct(b.patient_id) as patient, b.tester_id as tester, b.test_date as test_date, b.location_id, e.Name, b.practice_id, i.name as Practice_name, 'mqt' as type from mq_tests b INNER JOIN practice_locations e ON b.Location_ID = e.id INNER JOIN practices i on b.practice_id = i.id where b.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (b.Status IS NULL OR b.Status <> 'deleted')) UNION (select distinct(c.patient_id) as patient, c.tester_id as tester, c.test_date as test_date, c.location_id, f.Name, c.practice_id, i.name as Practice_name, 'stick' as type from prick_tests c INNER JOIN practice_locations f ON c.location_id = f.id INNER JOIN practices i on c.practice_id = i.id where c.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (c.Status IS NULL OR c.Status <> 'deleted')) UNION (select distinct(g.patient_id) as patient, g.blood_drawn_by as tester, g.Start_Date as test_date, g.Start_Location_id AS Location_ID, h.name, g.start_practice_id, i.name as Practice_name, 'ige' as type from ige_tests g INNER JOIN practice_locations h ON g.start_practice_id = h.ID INNER JOIN practices i on g.start_practice_id = i.id where g.Start_Date BETWEEN %(PSD)s AND %(PED)s AND (g.Status = 'Complete')) order by Location_ID) q left join users z on q.tester = z.id WHERE q.practice_id =  %(practice_ID)s\" , myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "    if len(total_tests.index) > 0:\n",
    "        total_tests['month_year'] = total_tests['month_year'].dt.strftime('%Y-%m')\n",
    "    else:\n",
    "        total_tests\n",
    "    total_tests_no_dups = total_tests.drop_duplicates(['Patients_Tested', 'test_date', 'type_of_test'])\n",
    "    prick_index = total_tests_no_dups.type_of_test == 'stick'\n",
    "    injection_index = total_tests_no_dups.type_of_test == 'injection'\n",
    "    mqt_index = total_tests_no_dups.type_of_test == 'mqt'\n",
    "    ige_index = total_tests_no_dups.type_of_test == 'ige'\n",
    "    total_tests_no_dups.loc[prick_index, 'type_of_test'] = 'Patient Tests - Pricks'\n",
    "    total_tests_no_dups.loc[injection_index, 'type_of_test'] = 'Patient Tests - Sticks'\n",
    "    total_tests_no_dups.loc[mqt_index, 'type_of_test'] = 'Patient Tests - MQT'\n",
    "    total_tests_no_dups.loc[ige_index, 'type_of_test'] = 'Patient Tests - IGE'\n",
    "    tp2 = pd.pivot_table(total_tests_no_dups, index=['type_of_test'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count', fill_value= 0, margins=True, margins_name='Subtotal Patient Tests')\n",
    "    #tp2.columns = tp2.columns.droplevel(1)\n",
    "    tp2.rename(columns={'Subtotal Patient Tests': 'Total'}, inplace=True)\n",
    "    tp2.index.names = [None]\n",
    "    prick_index = total_tests.type_of_test == 'stick'\n",
    "    injection_index = total_tests.type_of_test == 'injection'\n",
    "    mqt_index = total_tests.type_of_test == 'mqt'\n",
    "    ige_index = total_tests.type_of_test == 'ige'\n",
    "    total_tests.loc[prick_index, 'type_of_test'] = 'Allergy Tests - Pricks'\n",
    "    total_tests.loc[injection_index, 'type_of_test'] = 'Allergy Tests - Sticks'\n",
    "    total_tests.loc[mqt_index, 'type_of_test'] = 'Allergy Tests - MQT'\n",
    "    total_tests.loc[ige_index, 'type_of_test'] = 'Allergy Tests - IGE'\n",
    "    tp3 = pd.pivot_table(total_tests, index=['type_of_test'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count', fill_value= 0, margins=True, margins_name='Subtotal Allergy Tests')\n",
    "    #tp3.columns = tp3.columns.droplevel(1)\n",
    "    tp3.rename(columns={'Subtotal Allergy Tests': 'Total'}, inplace=True)\n",
    "    tp3.index.names = [None]\n",
    "    tp4 = tp2.append(tp3) \n",
    "    total_pricks_pricks = pd.read_sql_query(\"SELECT a.patient_id as Patients_Tested, a.practice_id, a.location_id, monthname(a.test_date) as test_date, a.test_date as month_year, 'prick' as type, c.name FROM prick_tests a LEFT JOIN prick_test_results b on a.id = b.test_id LEFT JOIN antigens c on b.antigen_id = c.id WHERE a.practice_id = %(practice_ID)s and a.test_date BETWEEN %(PSD)s AND %(PED)s\" , myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "    total_pricks_mqt = pd.read_sql_query(\"SELECT a.patient_id as Patients_Tested, a.practice_id, a.location_id, monthname(a.test_date) as test_date, a.test_date as month_year, 'mqt' as type, c.name FROM mq_tests a LEFT JOIN mq_tests_antigens b on a.id = b.test_id LEFT JOIN antigens c on b.antigen_id = c.id WHERE a.practice_id = %(practice_ID)s and a.test_date BETWEEN %(PSD)s AND %(PED)s and b.multi is not null\" , myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "    total_pricks = total_pricks_pricks.append(total_pricks_mqt, ignore_index=True)\n",
    "    if len(total_pricks.index) > 0:\n",
    "        total_pricks['month_year'] = total_pricks['month_year'].dt.strftime('%Y-%m')\n",
    "    else:\n",
    "        total_pricks\n",
    "    food_allergins = pd.read_excel('Food Allergens Original KPIs.xlsx')\n",
    "    food_pricks = pd.merge(total_pricks, food_allergins, on=['name'], how='left')\n",
    "    food_pricks['food'].fillna(\"N\", inplace=True)\n",
    "    not_food_index = food_pricks.food == 'N'\n",
    "    food_index = food_pricks.food == 'Y'\n",
    "    food_pricks.loc[not_food_index, 'food'] = '# of Pricks not related to Food'\n",
    "    food_pricks.loc[food_index, 'food'] = '# of Pricks related to Food'\n",
    "    if len(total_pricks.index) > 0:\n",
    "        fp_2 = pd.pivot_table(food_pricks, index=['food'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count',fill_value=0, margins=True, margins_name='Subtotal Pricks')\n",
    "        #fp_2.columns = fp_2.columns.droplevel(1)\n",
    "        fp_2.rename(columns={'Subtotal Pricks': 'Total'}, inplace=True)\n",
    "        patients_and_pricks = tp4.append(fp_2)\n",
    "    else:\n",
    "        patients_and_pricks = tp4\n",
    "    total_inj_intra = pd.read_sql_query(\"SELECT a.patient_id as Patients_Tested, a.practice_id, a.location_id, monthname(a.test_date) as test_date, a.test_date as month_year, 'intra' as type, c.name FROM intradermal_tests a LEFT JOIN intradermal_test_results b on a.id = b.test_id LEFT JOIN intradermal_test_antigens_names c on b.antigen_id = c.id WHERE a.practice_id = %(practice_ID)s and a.test_date BETWEEN %(PSD)s AND %(PED)s\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "    total_inj_mqt = pd.read_sql_query(\"SELECT a.patient_id as Patients_Tested, a.practice_id, a.location_id, monthname(a.test_date) as test_date, a.test_date as month_year, 'mqt' as type, c.name FROM mq_tests a LEFT JOIN mq_tests_antigens b on a.id = b.test_id LEFT JOIN antigens c on b.antigen_id = c.id WHERE a.practice_id = %(practice_ID)s and a.test_date BETWEEN %(PSD)s AND %(PED)s and ((b.dilution_1 is not null and b.dilution_1 <> '') or (b.dilution_2 is not null and b.dilution_2 <> ''))\" , myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "    total_inj = total_inj_intra.append(total_inj_mqt, ignore_index=True)\n",
    "    if len(total_inj.index) > 0:\n",
    "        total_inj['month_year'] = total_inj['month_year'].dt.strftime('%Y-%m')\n",
    "    else:\n",
    "        total_inj\n",
    "    food_allergins = pd.read_excel('Food Allergens Original KPIs.xlsx')\n",
    "    food_inj = pd.merge(total_inj, food_allergins, on=['name'], how='left')\n",
    "    food_inj['food'].fillna(\"N\", inplace=True)\n",
    "    not_food_index = food_inj.food == 'N'\n",
    "    food_index = food_inj.food == 'Y'\n",
    "    food_inj.loc[not_food_index, 'food'] = '# of Intradermal Tests not related to Food'\n",
    "    food_inj.loc[food_index, 'food'] = '# of Intradermal Tests related to Food'\n",
    "    if len(total_inj.index) > 0:\n",
    "        fi_2 = pd.pivot_table(food_inj, index=['food'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count',fill_value=0, margins=True, margins_name='Subtotal Sticks')\n",
    "        #fi_2.columns = fi_2.columns.droplevel(1)\n",
    "        fi_2.rename(columns={'Subtotal Sticks': 'Total'}, inplace=True)\n",
    "        patients_and_pricks_and_injections = patients_and_pricks.append(fi_2)\n",
    "    else:\n",
    "        patients_and_pricks_and_injections = patients_and_pricks\n",
    "    '''\n",
    "    Distinct patients who got a vial made (doesn't inlcude if multiple vials were made for the same patient\n",
    "    '''\n",
    "    vials = pd.read_sql_query(\"SELECT DISTINCT q.patient as Patients_Tested, monthname(q.test_date) as test_date, q.test_date as month_year, z.intake_method, q.Location_ID, q.Name as location_name, q.practice_ID, q.Practice_name FROM ((select distinct(a.patient_id) as patient, a.Test_Date as test_date, a.location_ID, d.Name, a.practice_id, i.name as Practice_name from intradermal_tests a INNER JOIN practice_locations d ON a.Location_ID = d.id INNER JOIN practices i on a.practice_id = i.id where a.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (a.Status IS NULL OR a.Status <> 'deleted')) UNION (select distinct(b.patient_id) as patient, b.Test_Date as test_date, b.location_id, e.Name, b.practice_id, i.name as Practice_name from mq_tests b INNER JOIN practice_locations e ON b.Location_ID = e.id INNER JOIN practices i on b.practice_id = i.id where b.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (b.Status IS NULL OR b.Status <> 'deleted')) UNION (select distinct(c.patient_id) as patient, c.Test_Date as test_date, c.location_id, f.Name, c.practice_id, i.name as Practice_name from prick_tests c INNER JOIN practice_locations f ON c.location_id = f.id INNER JOIN practices i on c.practice_id = i.id where c.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (c.Status IS NULL OR c.Status <> 'deleted')) UNION (select distinct(g.patient_id) as patient, g.Start_Date as test_date, g.Start_Location_id AS Location_ID, h.name, g.start_practice_id, i.name as Practice_name from ige_tests g INNER JOIN practice_locations h ON g.start_practice_id = h.ID INNER JOIN practices i on g.start_practice_id = i.id where g.Start_Date BETWEEN %(PSD)s AND %(PED)s AND (g.Status = 'Complete')) order by Location_ID) q LEFT JOIN (SELECT DISTINCT barcode, Patient_ID FROM vials WHERE (status_id <> 2 or status_id is not null) and is_child <> 1 AND Mix_Date BETWEEN %(PSD)s AND %(PED)s) v ON q.patient = v.Patient_ID LEFT JOIN (SELECT id, intake_method FROM patients) z on q.patient = z.id where v.Patient_ID is not null and practice_id = %(practice_ID)s\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "    '''\n",
    "    Total Number of vials mixed for each patient, a patient could have multiple vials mixed here\n",
    "    '''\n",
    "#    vials_total = pd.read_sql_query(\"SELECT DISTINCT v.patient_id as Patients_Tested, v.barcode, monthname(v.Mix_Date) as test_date, v.Mix_Date as month_year, z.intake_method, v.mix_location_id, a.Name as location_name, v.mix_practice_id, b.name as practice_name, u.username, u.firstname, u.lastname FROM vials v LEFT JOIN patients z on v.patient_id = z.id left join users u on if(v.created_by is null, v.mixer_id, v.created_by) = u.id left join practice_locations a on v.mix_location_id = a.id left join practices b on v.mix_practice_id = b.id where (v.status_id <> 2 or v.status_id is not null) and v.is_child <> 1 AND v.Mix_Date BETWEEN %(PSD)s AND %(PED)s and v.Patient_ID is not null and v.mix_practice_id = %(practice_ID)s and u.id is not null\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "    vials_total = pd.read_sql_query(\"SELECT DISTINCT(v.barcode) AS barcode, v.patient_id as Patients_Tested, vn.name, vs.status, z.firstname, z.middlename, z.lastname, monthname(v.Mix_date) as test_date, v.Mix_Date as month_year, z.intake_method, v.mix_location_id, a.Name as location_name, v.mix_practice_id, b.name as practice_name, u.username FROM vials v INNER JOIN vial_names vn ON v.id=vn.vial_id INNER JOIN vial_statuses vs on v.status_id = vs.id INNER JOIN patients z on v.patient_id = z.id left join users u on if(v.created_by is null, v.mixer_id, v.created_by) = u.id INNER join practice_locations a on v.mix_location_id = a.id INNER join practices b on v.mix_practice_id = b.id where (v.is_child = 0 OR v.is_child IS null) AND (from_titrated = 0 OR titrated = 0) AND v.Mix_Date BETWEEN %(PSD)s AND %(PED)s and (z.mix_practice_id = %(practice_ID)s OR z.shot_practice_id = %(practice_ID)s) ORDER BY barcode\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "    #OR /*(v.is_child = 1 and v.from_titrated = 1)*/\n",
    "    if len(vials.index) > 0:\n",
    "        vials['month_year'] = vials['month_year'].dt.strftime('%Y-%m')\n",
    "    else:\n",
    "        vials\n",
    "    if len(vials_total.index) > 0:\n",
    "        vials_total['month_year'] = vials_total['month_year'].dt.strftime('%Y-%m')\n",
    "    else:\n",
    "        vials_total\n",
    "    inj_vial_index = vials.intake_method == 'inj'\n",
    "    sub_vial_index = vials.intake_method == 'sub'\n",
    "    unk_vial_index = vials.intake_method == 'unk'\n",
    "    vials.loc[inj_vial_index, 'intake_method'] = '# SCIT Vials Mixed for New Patients'\n",
    "    vials.loc[sub_vial_index, 'intake_method'] = '# SLIT Vials Mixed for New Patients'\n",
    "    vials.loc[unk_vial_index, 'intake_method'] = '# Unknown Vials Mixed for New Patients'\n",
    "    inj_vial_index = vials_total.intake_method == 'inj'\n",
    "    sub_vial_index = vials_total.intake_method == 'sub'\n",
    "    unk_vial_index = vials_total.intake_method == 'unk'\n",
    "    vials_total.loc[inj_vial_index, 'intake_method'] = '# of Total SCIT Vials Mixed'\n",
    "    vials_total.loc[sub_vial_index, 'intake_method'] = '# of Total SLIT Vials Mixed'\n",
    "    vials_total.loc[unk_vial_index, 'intake_method'] = '# of Total Unknown Vials Mixed'\n",
    "    if len(vials.index) > 0:\n",
    "        Vials2 = pd.pivot_table(vials, index=['intake_method'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count',fill_value=0, margins=True, margins_name='Total New Patients w Vials Mixed')\n",
    "        #Vials2.columns = Vials2.columns.droplevel(1)\n",
    "        Vials2.rename(columns={'Total New Patients w Vials Mixed': 'Total'}, inplace=True)\n",
    "        patients_and_pricks_and_injections_Vials = patients_and_pricks_and_injections.append(Vials2)\n",
    "    else:\n",
    "        patients_and_pricks_and_injections_Vials = patients_and_pricks_and_injections\n",
    "    if len(vials_total.index) > 0:\n",
    "        Vials2_total = pd.pivot_table(vials_total, index=['intake_method'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count',fill_value=0, margins=True, margins_name='Total Vials Mixed')\n",
    "        #Vials2_total.columns = Vials2_total.columns.droplevel(1)\n",
    "        Vials2_total.rename(columns={'Total Vials Mixed': 'Total'}, inplace=True)\n",
    "        patients_and_pricks_and_injections_Vials_total_Vials = patients_and_pricks_and_injections_Vials.append(Vials2_total)\n",
    "    else:\n",
    "        patients_and_pricks_and_injections_Vials_total_Vials = patients_and_pricks_and_injections_Vials\n",
    "    total_injections = pd.read_sql_query(\"select a.patient_id as Patients_Tested, monthname(a.date) as test_date, a.date as month_year, b.practice_id, a.shot_giver_id, c.username, c.firstname, c.lastname from patient_visits_shots a left join patients b on a.patient_id = b.id left join users c on c.id = a.shot_giver_id WHERE b.practice_id = %(practice_ID)s and a.active = 1 AND a.Date BETWEEN %(PSD)s AND %(PED)s and b.id is not null and c.id is not null\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "    total_injections['month_year'] = total_injections['month_year'].dt.strftime('%Y-%m')\n",
    "    practice_id_index = total_injections.practice_id == practice_id\n",
    "    total_injections.loc[practice_id_index, 'practice_id'] = '# of Injections'\n",
    "    injections = pd.pivot_table(total_injections, index=['practice_id'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count',fill_value=0, margins=True, margins_name='Subtotal New Injections')\n",
    "    #injections.columns = injections.columns.droplevel(1)\n",
    "    injections.rename(columns={'Subtotal New Injections': 'Total'}, inplace=True)\n",
    "    treatments = pd.read_sql_query(\"SELECT a.ID AS Patients_Tested, monthname(a.therapy_start_date) as test_date, a.therapy_start_date as month_year, a.intake_method, a.Mix_Location_ID as Location_ID, b.name as Location_Name, a.mix_practice_id as Practice_ID, c.name as Practice_Name FROM patients a INNER JOIN practice_locations b on a.mix_location_ID = b.id INNER JOIN practices c on a.mix_practice_ID = c.id WHERE a.therapy_start_date BETWEEN %(PSD)s AND %(PED)s and mix_practice_id = %(practice_ID)s\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "    if len(treatments) > 0:\n",
    "        treatments['month_year'] = treatments['month_year'].dt.strftime('%Y-%m')\n",
    "        inj_index = treatments.intake_method == 'inj'\n",
    "        sub_index = treatments.intake_method == 'sub'\n",
    "        unk_index = treatments.intake_method == 'unk'\n",
    "        treatments.loc[inj_index, 'intake_method'] = '# of New Patients on SCIT'\n",
    "        treatments.loc[sub_index, 'intake_method'] = '# of New Patients on SLIT'\n",
    "        treatments.loc[unk_index, 'intake_method'] = '# of New Patients on Unknown'\n",
    "        treatments2 = pd.pivot_table(treatments, index=['intake_method'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count',fill_value=0, margins=True, margins_name='Total New Patients')\n",
    "        #treatments2.columns = treatments2.columns.droplevel(1)\n",
    "        treatments2.rename(columns={'Total New Patients': 'Total'}, inplace=True)\n",
    "        patients_pricks_injections_Vials_treatment = patients_and_pricks_and_injections_Vials_total_Vials.append(injections).append(treatments2)\n",
    "    else:\n",
    "        patients_pricks_injections_Vials_treatment = patients_and_pricks_and_injections_Vials_total_Vials.append(injections)\n",
    "    total_patients = pd.DataFrame(columns=['Patients_Tested', 'intake_method', 'Location_ID', 'month_year', 'test_date', 'Location_Name', 'Practice_ID', 'Practice_Name'])\n",
    "    for j in range(year_start, year + 1):\n",
    "        for i in range(1,13):\n",
    "            last_date = calendar.monthrange(year,i)[1]\n",
    "            #if PED >= datetime.datetime(j, i, last_date, 0, 0, 0).strftime('%Y-%m-%d %H:%M:%S'):\n",
    "            if i < 10:\n",
    "                total_patients_new = pd.read_sql_query(\"SELECT a.ID AS Patients_Tested, a.intake_method, a.Mix_Location_ID as Location_ID, '%(year)s-0%(month)s' as month_year, monthname('%(year)s-%(month)s-%(date)s') as test_date, b.name as Location_Name, a.mix_practice_id as Practice_ID, c.name as Practice_Name FROM patients a INNER JOIN practice_locations b on a.mix_location_ID = b.id INNER JOIN practices c on a.mix_practice_ID = c.id WHERE a.active = 1 and mix_practice_id = %(practice_ID)s and (a.therapy_start_date <= '%(year)s-%(month)s-%(date)s' or a.therapy_start_date is null)\", myconnection, params={\"year\":j, \"practice_ID\":practice_id, \"month\":i, \"date\":last_date})\n",
    "            else:\n",
    "                total_patients_new = pd.read_sql_query(\"SELECT a.ID AS Patients_Tested, a.intake_method, a.Mix_Location_ID as Location_ID, '%(year)s-%(month)s' as month_year, monthname('%(year)s-%(month)s-%(date)s') as test_date, b.name as Location_Name, a.mix_practice_id as Practice_ID, c.name as Practice_Name FROM patients a INNER JOIN practice_locations b on a.mix_location_ID = b.id INNER JOIN practices c on a.mix_practice_ID = c.id WHERE a.active = 1 and mix_practice_id = %(practice_ID)s and (a.therapy_start_date <= '%(year)s-%(month)s-%(date)s' or a.therapy_start_date is null)\", myconnection, params={\"year\":j, \"practice_ID\":practice_id, \"month\":i, \"date\":last_date})\n",
    "            total_patients = total_patients.append(total_patients_new)\n",
    "    total_patients_ytd = pd.DataFrame(total_patients)\n",
    "    inj_index = total_patients_ytd.intake_method == 'inj'\n",
    "    sub_index = total_patients_ytd.intake_method == 'sub'\n",
    "    unk_index = total_patients_ytd.intake_method == 'unk'\n",
    "    total_patients_ytd.loc[inj_index, 'intake_method'] = 'Total Active Patients on SCIT'\n",
    "    total_patients_ytd.loc[sub_index, 'intake_method'] = 'Total Active Patients on SLIT'\n",
    "    total_patients_ytd.loc[unk_index, 'intake_method'] = 'Total Active Patients on Unknown'\n",
    "    tp_ytd = pd.pivot_table(total_patients_ytd, index=['intake_method'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count',fill_value=0, margins=True, margins_name='Subtotal Patients')\n",
    "    #tp_ytd.columns = tp_ytd.columns.droplevel(1)\n",
    "    tp_ytd.rename(columns={'Subtotal Patients': 'Total'}, inplace=True)\n",
    "    common_cols_total = patients_pricks_injections_Vials_treatment.columns.intersection(tp_ytd.columns)\n",
    "    patients_pricks_injections_Vials_treatment_total = patients_pricks_injections_Vials_treatment.append(tp_ytd[common_cols_total])\n",
    "    patients_pricks_injections_Vials_treatment_total.columns = patients_pricks_injections_Vials_treatment_total.columns.droplevel()\n",
    "    patients_pricks_injections_Vials_treatment_total.columns = patients_pricks_injections_Vials_treatment_total.columns.droplevel()\n",
    "    patients_pricks_injections_Vials_treatment_total.drop(['Subtotal New Injections'], inplace=True)\n",
    "    patients_pricks_injections_Vials_treatment_total.rename(columns={'': 'Total'}, inplace=True)\n",
    "    patients_pricks_injections_Vials_treatment_total.reset_index(inplace=True)\n",
    "    missing_months_data = []\n",
    "    for i, m in enumerate(calendar.month_name[1:(int('%s' % (month_number)) + 1)]):\n",
    "        missing_months_data.append({'Months' : m.capitalize()})  \n",
    "    missing_months_data_main = pd.DataFrame(missing_months_data)\n",
    "    missing_months_final_data = missing_months_data_main[~missing_months_data_main['Months'].isin(patients_pricks_injections_Vials_treatment_total.columns.tolist()[1:])]\n",
    "    if len(missing_months_final_data) > 0:\n",
    "        missing_error_months_data = []\n",
    "        update_missing_months_data = pd.DataFrame({'a': ['1']})\n",
    "        for i, j in enumerate(calendar.month_name[(eval('missing_months_final_data.index.tolist()[0]') + 1):(len(missing_months_final_data.index) + 1 + (eval('missing_months_final_data.index.tolist()[0]')))]):\n",
    "            missing_error_months_data = pd.DataFrame({'%s' % j.capitalize() : [0] })\n",
    "            update_missing_months_data = pd.concat([update_missing_months_data, missing_error_months_data], axis=1)\n",
    "        update_missing_months_data.drop('a', 1, inplace=True)\n",
    "        patients_pricks_injections_Vials_treatment_total_months = pd.concat([patients_pricks_injections_Vials_treatment_total.iloc[:,0:1], update_missing_months_data, patients_pricks_injections_Vials_treatment_total.iloc[:,1:]], axis=1)\n",
    "    else:\n",
    "        patients_pricks_injections_Vials_treatment_total_months = patients_pricks_injections_Vials_treatment_total\n",
    "    total_errors = pd.read_sql_query(\"SELECT a.id as Patients_Tested, a.practice_id, monthname(a.date) as test_date, a.date as month_year, c.name as practice_name, u.username, u.firstname, u.lastname from user_errors a INNER JOIN practice_locations b ON a.Location_ID = b.id INNER JOIN practices c on a.practice_id = c.id left join users u on a.user_id = u.id WHERE a.Date BETWEEN %(PSD)s AND %(PED)s AND a.practice_id = %(practice_ID)s\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "    missing = []\n",
    "    for i, m in enumerate(calendar.month_name[1:(len(patients_pricks_injections_Vials_treatment_total_months.columns) - 1)]):\n",
    "        missing.append({'Months' : m.capitalize()})  \n",
    "    missing_months = pd.DataFrame(missing)\n",
    "    missing_months_final = missing_months[~missing_months['Months'].isin(total_errors['test_date'])]\n",
    "    missing_error_months = []\n",
    "    for i, j in enumerate(calendar.month_name[1:(len(missing_months_final.index) + 1 )]):\n",
    "        missing_error_months.append({'Patients_Tested' : i,\n",
    "                                     'practice_id' : '# of Errors',\n",
    "                                     'test_date' : j.capitalize(),\n",
    "                                     'month_year' : '0%s - %s' % (i + 1, year),\n",
    "                                     'practice_name' : '%s' % (practice_name),\n",
    "                                     'username' : '',\n",
    "                                     'firstname' : '',\n",
    "                                     'lastname' : ''})\n",
    "    update_missing_months = pd.DataFrame(missing_error_months)\n",
    "    if len(update_missing_months) > 0:\n",
    "        update_missing_months = update_missing_months[~update_missing_months['test_date'].isin(total_errors['test_date'])]\n",
    "    else:\n",
    "        update_missing_months\n",
    "    if len(total_errors) > 0:\n",
    "        total_errors['month_year'] = total_errors['month_year'].dt.strftime('%Y-%m')\n",
    "        practice_id_index = total_errors.practice_id == practice_id\n",
    "        total_errors.loc[practice_id_index, 'practice_id'] = '# of Errors'\n",
    "    else:\n",
    "        total_errors\n",
    "    if len(update_missing_months) > 0:\n",
    "        update_missing_months = update_missing_months[['Patients_Tested', 'practice_id', 'test_date', 'month_year', 'practice_name', 'username', 'firstname', 'lastname']]\n",
    "        total_errors_no_missing_months = total_errors.append(update_missing_months) \n",
    "    else:\n",
    "        total_errors_no_missing_months = total_errors\n",
    "    total_errors_pivot = pd.pivot_table(total_errors_no_missing_months, index=['practice_id'], values=['Patients_Tested'], columns=[ 'month_year', 'test_date'], aggfunc='count',fill_value=0, margins=True)\n",
    "    total_errors_pivot.columns = total_errors_pivot.columns.droplevel()\n",
    "    total_errors_pivot.columns = total_errors_pivot.columns.droplevel()\n",
    "    total_errors_pivot.drop(['All'], inplace=True)\n",
    "    total_errors_pivot.reset_index(inplace=True)\n",
    "    total_errors_pivot.rename(columns={'': 'Total', 'practice_id' : 'index'}, inplace=True)\n",
    "    charge_columns_index = pd.DataFrame( {'index' : ['Testing Charges', \n",
    "                                             'Spirometry Charges', \n",
    "                                             'SCIT Mixing Charges', \n",
    "                                             'SCIT Injection Charges', \n",
    "                                             'SLIT Vial Charges', \n",
    "                                             'Total Allergy Charges', \n",
    "                                             'Total Allergy Collected', \n",
    "                                             'Allergy Cost of Goods', \n",
    "                                             'Allergy Gross Profit', \n",
    "                                             'Total Clinic Revenue (INCLUDES ALL ENT REV.)', \n",
    "                                             '# of Spirometry Tests']})\n",
    "    charge_columns_values = pd.DataFrame(np.zeros([11,(len(patients_pricks_injections_Vials_treatment_total_months.columns) - 2)]), columns=[patients_pricks_injections_Vials_treatment_total_months.columns[1:-1]])\n",
    "    charge_columns_totals = pd.DataFrame({'Total' : ['=sum(%s:%s)' % (xl_rowcol_to_cell(1, 2), xl_rowcol_to_cell(1, len(patients_pricks_injections_Vials_treatment_total_months.columns) - 1)),\n",
    "                                                     '=sum(%s:%s)' % (xl_rowcol_to_cell(2, 2), xl_rowcol_to_cell(2, len(patients_pricks_injections_Vials_treatment_total_months.columns) - 1)),\n",
    "                                                     '=sum(%s:%s)' % (xl_rowcol_to_cell(3, 2), xl_rowcol_to_cell(3, len(patients_pricks_injections_Vials_treatment_total_months.columns) - 1)),\n",
    "                                                     '=sum(%s:%s)' % (xl_rowcol_to_cell(4, 2), xl_rowcol_to_cell(4, len(patients_pricks_injections_Vials_treatment_total_months.columns) - 1)),\n",
    "                                                     '=sum(%s:%s)' % (xl_rowcol_to_cell(5, 2), xl_rowcol_to_cell(5, len(patients_pricks_injections_Vials_treatment_total_months.columns) - 1)),\n",
    "                                                     '=sum(%s:%s)' % (xl_rowcol_to_cell(6, 2), xl_rowcol_to_cell(6, len(patients_pricks_injections_Vials_treatment_total_months.columns) - 1)),\n",
    "                                                     '=sum(%s:%s)' % (xl_rowcol_to_cell(7, 2), xl_rowcol_to_cell(7, len(patients_pricks_injections_Vials_treatment_total_months.columns) - 1)),\n",
    "                                                     '=sum(%s:%s)' % (xl_rowcol_to_cell(8, 2), xl_rowcol_to_cell(8, len(patients_pricks_injections_Vials_treatment_total_months.columns) - 1)),\n",
    "                                                     '=sum(%s:%s)' % (xl_rowcol_to_cell(9, 2), xl_rowcol_to_cell(9, len(patients_pricks_injections_Vials_treatment_total_months.columns) - 1)),\n",
    "                                                     '=sum(%s:%s)' % (xl_rowcol_to_cell(10, 2), xl_rowcol_to_cell(10, len(patients_pricks_injections_Vials_treatment_total_months.columns) - 1)),\n",
    "                                                     '=sum(%s:%s)' % (xl_rowcol_to_cell(11, 2), xl_rowcol_to_cell(11, len(patients_pricks_injections_Vials_treatment_total_months.columns) - 1))]})\n",
    "    charge_columns = pd.concat([charge_columns_index, charge_columns_values, charge_columns_totals], axis=1)\n",
    "    def color_negative_red(val):\n",
    "        \"\"\"\n",
    "        Takes a scalar and returns a string with\n",
    "        the css property `'color: red'` for negative\n",
    "        strings, black otherwise.\n",
    "        \"\"\"\n",
    "        color = 'red' if val <= 0 else 'black'\n",
    "        return 'color: %s' % color\n",
    "    def highlight_max(s):\n",
    "        \"\"\"\n",
    "        highlight the maximum in a Series yellow.\n",
    "        \"\"\"\n",
    "        color = 'white' if s > 0.01 else 'red'\n",
    "        return 'background-color: %s' % color\n",
    "    output_df = charge_columns.append(patients_pricks_injections_Vials_treatment_total_months).append(total_errors_pivot)\n",
    "#    output_df = pd.concat([charge_columns, patients_pricks_injections_Vials_treatment_total_months, total_errors_pivot])\n",
    "    output_df = output_df[charge_columns.columns]\n",
    "    output_df.reset_index(inplace=True)\n",
    "    output_df.drop(['level_0'], axis=1, inplace=True)\n",
    "    output_df.reset_index(inplace=True)\n",
    "    output_df.fillna(0, inplace=True)\n",
    "#    output_df = charge_columns.append(patients_pricks_injections_Vials_treatment_total).append(total_errors_pivot)\n",
    "#    output_df = output_df[total_errors_pivot.columns]\n",
    "#    output_df.reset_index(inplace=True)\n",
    "#    output_df.drop(['level_0'], axis=1, inplace=True)\n",
    "#    output_df.reset_index(inplace=True)\n",
    "#    output_df.fillna(0, inplace=True)\n",
    "    writer = pd.ExcelWriter(\"{} {} {} KPIs Formatted.xlsx\".format(practice_name, month, year), engine='xlsxwriter')\n",
    "    output_df.to_excel(writer, index=False, sheet_name='report')\n",
    "    workbook = writer.book\n",
    "    worksheet = writer.sheets['report']\n",
    "    money_fmt = workbook.add_format({'num_format': '$#,##0', 'bold': False})\n",
    "    decimal_fmt = workbook.add_format({'num_format': '#,##0.00', 'bold': False})\n",
    "    format_red = workbook.add_format({'bg_color': '#FF0000'})\n",
    "    format_beige = workbook.add_format({'bg_color': '#F5F5DC', 'bold': True})\n",
    "    format_borders = workbook.add_format({'border':1})\n",
    "    percent_fmt = workbook.add_format({'num_format': '0.00%', 'bold': False})\n",
    "    worksheet.conditional_format(1, 2, 11, len(output_df.columns)-1, {'type': 'cell',\n",
    "                                                                   'criteria': '<=',\n",
    "                                                                   'value': 0,\n",
    "                                                                   'format': format_red})\n",
    "    worksheet.conditional_format(1,2,10,(len(output_df.columns)-1), {'type': 'cell',\n",
    "                                                                     'criteria': '=',\n",
    "                                                                     'value': 0,\n",
    "                                                                     'format': money_fmt})\n",
    "    worksheet.conditional_format(0,0,0,(len(output_df.columns)-1), {'type': 'text', \n",
    "                                                                   'criteria': 'not containing', \n",
    "                                                                   'value': 'rugby', \n",
    "                                                                   'format': format_beige})\n",
    "    worksheet.conditional_format(0,0,(len(output_df.index)),0, {'type': 'text', \n",
    "                                                                   'criteria': 'not containing', \n",
    "                                                                   'value': 'rugby', \n",
    "                                                                   'format': format_beige}) \n",
    "\n",
    "    worksheet.conditional_format( 0,0,(len(output_df.index)),(len(output_df.columns)-1), { 'type' : 'no_blanks' \n",
    "                                                                                          ,'format' : format_borders} )\n",
    "    worksheet.merge_range('A1:B1', 'KPI Tracking')\n",
    "    a = []\n",
    "    for i in range(len(output_df.index)):\n",
    "        a.append({'Average': '=average(%s:%s)' % (xl_rowcol_to_cell(i + 1, 2), xl_rowcol_to_cell(i + 1, len(patients_pricks_injections_Vials_treatment_total_months.columns) - 1))})  \n",
    "    kpi_average = pd.DataFrame(a)\n",
    "    kpi_average.to_excel(writer, index=False, sheet_name='report', startcol=(len(output_df.columns) + 1))\n",
    "    benchmarks = pd.read_excel('Benchmark All %s %s KPIs Formatted Total DR Benchmark.xlsx' % (month, year))\n",
    "    benchmarks_segements = pd.read_excel('Benchmark %s %s %s KPIs Formatted Total DR Benchmark.xlsx' % (segment, month, year))\n",
    "    benchmarkrs_segments_columns = benchmarks_segements[['index', 'Benchmark %s' % (segment)]]\n",
    "    benchmarks_columns = benchmarks[['index', 'Benchmark All']]\n",
    "    benchmarks_segements_needed = benchmarkrs_segments_columns[benchmarkrs_segments_columns['index'].isin(benchmarks_columns['index'])]\n",
    "    benchmarks_columns_needed = benchmarks_columns[benchmarks_columns['index'].isin(benchmarks_segements_needed['index'])]\n",
    "    benchmarks_needed = benchmarks_segements_needed.merge(benchmarks_columns_needed, on='index')\n",
    "    output_benchmark = benchmarks_needed[benchmarks_needed['index'].isin(output_df['index'])]\n",
    "    output_benchmark.drop(['index'], inplace=True, axis=1)\n",
    "    output_benchmark.to_excel(writer, index=False, sheet_name='report', startcol=(len(output_df.columns) + 2))\n",
    "    worksheet.conditional_format(0,(len(output_df.columns) + 1),0,(len(output_df.columns) + 3), {'type': 'text', \n",
    "                                                                   'criteria': 'not containing', \n",
    "                                                                   'value': 'rugby', \n",
    "                                                                   'format': format_beige})\n",
    "    worksheet.conditional_format( 0,(len(output_df.columns) + 1),(len(output_df.index)),(len(output_df.columns) + 3),\n",
    "                                                                                         { 'type' : 'no_blanks' \n",
    "                                                                                          ,'format' : format_borders} )\n",
    "\n",
    "    practice_locations_months = pd.DataFrame({'merge' : [1,2,3,4]})\n",
    "    #for j in range(year_start, year +1):\n",
    "#    for i, m in enumerate(calendar.month_name[1:]):\n",
    "    for i in range(1,len(charge_columns.columns) - 1):\n",
    "        month_name = ''.join(charge_columns.columns.values[i:i+1])\n",
    "        last_date = calendar.monthrange(year,i)[1]\n",
    "#        month_name = m.capitalize()\n",
    "        #if (PED >= datetime.datetime(year, i + 1, last_date, 0, 0, 0).strftime('%Y-%m-%d %H:%M:%S')) & (datetime.datetime(year, i + 1, last_date, 0, 0, 0).strftime('%Y-%m-%d %H:%M:%S') >= PSD):\n",
    "#        if i + 1 < 10:\n",
    "        total_doctors = pd.read_sql_query(\"SELECT COUNT(id) as %(month_name)s FROM practice_doctors a WHERE active = 1 and practice_id = %(practice_ID)s GROUP BY practice_id\", myconnection, params={\"practice_ID\":practice_id, \"month_name\":month_name})\n",
    "        mix_locations = pd.read_sql_query(\"SELECT COUNT(DISTINCT(a.mix_location_id)) as %(month_name)s FROM `vials` a left JOIN patients b on a.patient_id = b.id WHERE b.practice_id = %(practice_ID)s GROUP BY b.practice_id WITH ROLLUP\", myconnection, params={\"practice_ID\":practice_id, \"month_name\":month_name})\n",
    "        total_techs = pd.read_sql_query(\"SELECT count(DISTINCT tech.tester, tech.username) AS %(month_name)s, tech.practice_id FROM (( SELECT a.patient_id AS Patients_Tested, monthname(a.date) AS test_date, a.date AS month_year, b.practice_id, a.shot_giver_id AS tester, 'shot' as type_of_test, 'ZXCV78' as barcode, 'sht' as intake_method, c.username, c.firstname, c.lastname FROM patient_visits_shots a LEFT JOIN patients b ON a.patient_id = b.id LEFT JOIN users c ON c.id = a.shot_giver_id WHERE b.practice_id = %(practice_ID)s AND a.active = 1 AND a.Date BETWEEN %(PSD)s AND %(PED)s AND b.id IS NOT NULL AND c.id IS NOT NULL ) UNION ( SELECT DISTINCT q.patient AS Patients_Tested, q.tester, monthname(q.test_date) AS test_date, q.test_date AS month_year, q.type AS type_of_test, 'QWER45' as barcode, 'tst' as intake_method, q.practice_ID, z.username, z.firstname, z.lastname FROM (( SELECT DISTINCT (a.patient_id) AS patient, a.user_id AS tester, a.test_date AS test_date, a.location_ID, d.Name, a.practice_id, i.name AS Practice_name, 'injection' AS type FROM intradermal_tests a INNER JOIN practice_locations d ON a.Location_ID = d.id INNER JOIN practices i ON a.practice_id = i.id WHERE a.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (a.Status IS NULL OR a.Status <> 'deleted')) UNION ( SELECT DISTINCT (b.patient_id) AS patient, b.tester_id AS tester, b.test_date AS test_date, b.location_id, e.Name, b.practice_id, i.name AS Practice_name, 'mqt' AS type FROM mq_tests b INNER JOIN practice_locations e ON b.Location_ID = e.id INNER JOIN practices i ON b.practice_id = i.id WHERE b.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (b.Status IS NULL OR b.Status <> 'deleted')) UNION ( SELECT DISTINCT (c.patient_id) AS patient, c.tester_id AS tester, c.test_date AS test_date, c.location_id, f.Name, c.practice_id, i.name AS Practice_name, 'stick' AS type FROM prick_tests c INNER JOIN practice_locations f ON c.location_id = f.id INNER JOIN practices i ON c.practice_id = i.id WHERE c.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (c.Status IS NULL OR c.Status <> 'deleted')) UNION ( SELECT DISTINCT (g.patient_id) AS patient, g.blood_drawn_by AS tester, g.Start_Date AS test_date, g.Start_Location_id AS Location_ID, h.name, g.start_practice_id, i.name AS Practice_name, 'ige' AS type FROM ige_tests g INNER JOIN practice_locations h ON g.start_practice_id = h.ID INNER JOIN practices i ON g.start_practice_id = i.id WHERE g.Start_Date BETWEEN %(PSD)s AND %(PED)s AND (g.Status = 'Complete')) ORDER BY Location_ID) q LEFT JOIN users z ON q.tester = z.id WHERE q.practice_id = %(practice_ID)s) UNION ( SELECT DISTINCT v.patient_id AS Patients_Tested, v.barcode, IF (v.created_by IS NULL, v.mixer_id, v.created_by) AS tester, monthname(v.Mix_Date) AS test_date, v.Mix_Date AS month_year, z.intake_method, 'vial' as type_of_test, v.mix_practice_id AS practice_id, u.username, u.firstname, u.lastname FROM vials v LEFT JOIN patients z ON v.patient_id = z.id LEFT JOIN users u ON IF (v.created_by IS NULL, v.mixer_id, v.created_by) = u.id LEFT JOIN practice_locations a ON v.mix_location_id = a.id LEFT JOIN practices b ON v.mix_practice_id = b.id WHERE (v.status_id <> 2 OR v.status_id IS NOT NULL ) AND v.is_child <> 1 AND v.Mix_Date BETWEEN %(PSD)s AND %(PED)s AND v.Patient_ID IS NOT NULL AND v.mix_practice_id = %(practice_ID)s AND u.id IS NOT NULL ) UNION ( SELECT a.id AS Patients_Tested, a.user_id AS tester, a.practice_id, monthname(a.date) AS test_date, a.date AS month_year, 'ASDF12' as barcode, 'err' as intake_method, 'error' as type_of_test, u.username, u.firstname, u.lastname FROM user_errors a INNER JOIN practice_locations b ON a.Location_ID = b.id INNER JOIN practices c ON a.practice_id = c.id LEFT JOIN users u ON a.user_id = u.id WHERE a.Date BETWEEN %(PSD)s AND %(PED)s AND a.practice_id = %(practice_ID)s)) tech WHERE /*tech.month_year BETWEEN '%(year)s-0%(month)s-01 00:00:00' AND '%(year)s-0%(month)s-%(last_date)s 23:59:59'*/ monthname(tech.month_year) = %(month_name)s AND tech.practice_id = %(practice_ID)s GROUP BY tech.practice_ID\", myconnection, params={\"year\":year, \"practice_ID\":practice_id, \"month_name\":month_name, \"month\":i + 1,\"last_date\":last_date, \"PSD\":PSD, \"PED\":PED})\n",
    "        total_techs.drop(['practice_id'], inplace=True, axis=1, errors='ignore')\n",
    "        practice_locations = mix_locations.append(total_techs).append(total_doctors).reset_index(drop=True)\n",
    "        merge_df = pd.DataFrame(data=[1,2,3,4], columns=['merge'])\n",
    "        practice_locations_new = pd.concat([practice_locations, merge_df], axis=1)\n",
    "#        else:\n",
    "#            total_doctors = pd.read_sql_query(\"SELECT COUNT(id) as %(month_name)s FROM practice_doctors a WHERE active = 1 and practice_id = %(practice_ID)s GROUP BY practice_id\", myconnection, params={\"practice_ID\":practice_id, \"month_name\":month_name})\n",
    "#            mix_locations = pd.read_sql_query(\"SELECT COUNT(DISTINCT(a.mix_location_id)) as %(month_name)s FROM `vials` a left JOIN patients b on a.patient_id = b.id WHERE b.practice_id = %(practice_ID)s GROUP BY b.practice_id WITH ROLLUP\", myconnection, params={\"practice_ID\":practice_id, \"month_name\":month_name})\n",
    "#            total_techs = pd.read_sql_query(\"SELECT count(DISTINCT tech.tester, tech.username) AS %(month_name)s, tech.practice_id FROM (( SELECT a.patient_id AS Patients_Tested, monthname(a.date) AS test_date, a.date AS month_year, b.practice_id, a.shot_giver_id AS tester, 'shot' as type_of_test, 'ZXCV78' as barcode, 'sht' as intake_method, c.username, c.firstname, c.lastname FROM patient_visits_shots a LEFT JOIN patients b ON a.patient_id = b.id LEFT JOIN users c ON c.id = a.shot_giver_id WHERE b.practice_id = %(practice_ID)s AND a.active = 1 AND a.Date BETWEEN %(PSD)s AND %(PED)s AND b.id IS NOT NULL AND c.id IS NOT NULL ) UNION ( SELECT DISTINCT q.patient AS Patients_Tested, q.tester, monthname(q.test_date) AS test_date, q.test_date AS month_year, q.type AS type_of_test, 'QWER45' as barcode, 'tst' as intake_method, q.practice_ID, z.username, z.firstname, z.lastname FROM (( SELECT DISTINCT (a.patient_id) AS patient, a.user_id AS tester, a.test_date AS test_date, a.location_ID, d.Name, a.practice_id, i.name AS Practice_name, 'injection' AS type FROM intradermal_tests a INNER JOIN practice_locations d ON a.Location_ID = d.id INNER JOIN practices i ON a.practice_id = i.id WHERE a.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (a.Status IS NULL OR a.Status <> 'deleted')) UNION ( SELECT DISTINCT (b.patient_id) AS patient, b.tester_id AS tester, b.test_date AS test_date, b.location_id, e.Name, b.practice_id, i.name AS Practice_name, 'mqt' AS type FROM mq_tests b INNER JOIN practice_locations e ON b.Location_ID = e.id INNER JOIN practices i ON b.practice_id = i.id WHERE b.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (b.Status IS NULL OR b.Status <> 'deleted')) UNION ( SELECT DISTINCT (c.patient_id) AS patient, c.tester_id AS tester, c.test_date AS test_date, c.location_id, f.Name, c.practice_id, i.name AS Practice_name, 'stick' AS type FROM prick_tests c INNER JOIN practice_locations f ON c.location_id = f.id INNER JOIN practices i ON c.practice_id = i.id WHERE c.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (c.Status IS NULL OR c.Status <> 'deleted')) UNION ( SELECT DISTINCT (g.patient_id) AS patient, g.blood_drawn_by AS tester, g.Start_Date AS test_date, g.Start_Location_id AS Location_ID, h.name, g.start_practice_id, i.name AS Practice_name, 'ige' AS type FROM ige_tests g INNER JOIN practice_locations h ON g.start_practice_id = h.ID INNER JOIN practices i ON g.start_practice_id = i.id WHERE g.Start_Date BETWEEN %(PSD)s AND %(PED)s AND (g.Status = 'Complete')) ORDER BY Location_ID) q LEFT JOIN users z ON q.tester = z.id WHERE q.practice_id = %(practice_ID)s) UNION ( SELECT DISTINCT v.patient_id AS Patients_Tested, v.barcode, IF (v.created_by IS NULL, v.mixer_id, v.created_by) AS tester, monthname(v.Mix_Date) AS test_date, v.Mix_Date AS month_year, z.intake_method, 'vial' as type_of_test, v.mix_practice_id AS practice_id, u.username, u.firstname, u.lastname FROM vials v LEFT JOIN patients z ON v.patient_id = z.id LEFT JOIN users u ON IF (v.created_by IS NULL, v.mixer_id, v.created_by) = u.id LEFT JOIN practice_locations a ON v.mix_location_id = a.id LEFT JOIN practices b ON v.mix_practice_id = b.id WHERE (v.status_id <> 2 OR v.status_id IS NOT NULL ) AND v.is_child <> 1 AND v.Mix_Date BETWEEN %(PSD)s AND %(PED)s AND v.Patient_ID IS NOT NULL AND v.mix_practice_id = %(practice_ID)s AND u.id IS NOT NULL ) UNION ( SELECT a.id AS Patients_Tested, a.user_id AS tester, a.practice_id, monthname(a.date) AS test_date, a.date AS month_year, 'ASDF12' as barcode, 'err' as intake_method, 'error' as type_of_test, u.username, u.firstname, u.lastname FROM user_errors a INNER JOIN practice_locations b ON a.Location_ID = b.id INNER JOIN practices c ON a.practice_id = c.id LEFT JOIN users u ON a.user_id = u.id WHERE a.Date BETWEEN %(PSD)s AND %(PED)s AND a.practice_id = %(practice_ID)s)) tech WHERE /*tech.month_year BETWEEN '%(year)s-%(month)s-01 00:00:00' AND '%(year)s-%(month)s-%(last_date)s 23:59:59'*/ month(tech.month_year) = %(month)s AND tech.practice_id = %(practice_ID)s GROUP BY tech.practice_ID\", myconnection, params={\"year\":year, \"practice_ID\":practice_id, \"month_name\":month_name, \"month\":i + 1,\"last_date\":last_date, \"PSD\":PSD, \"PED\":PED})\n",
    "#            total_techs.drop(['practice_id'], inplace=True, axis=1, errors='ignore')\n",
    "#            practice_locations = mix_locations.append(total_techs).append(total_doctors).reset_index(drop=True)\n",
    "#            merge_df = pd.DataFrame(data=[1,2,3,4], columns=['merge'])\n",
    "#            practice_locations_new = pd.concat([practice_locations, merge_df], axis=1)\n",
    "        practice_locations_months = practice_locations_months.merge(practice_locations_new, on='merge', how='left')\n",
    "    practice_locations_total = pd.DataFrame({'Total' : ['=%s' % (xl_rowcol_to_cell((len(output_df.index) - 1 + len(practice_locations_months.index)), (len(output_df.columns) - 2))),\n",
    "                                                       '=%s' % (xl_rowcol_to_cell((len(output_df.index) + len(practice_locations_months.index)), (len(output_df.columns) - 2))),\n",
    "                                                       '=%s' % (xl_rowcol_to_cell((len(output_df.index) + 1 + len(practice_locations_months.index)), (len(output_df.columns) - 2))),\n",
    "                                                       '=%s' % (xl_rowcol_to_cell((len(output_df.index) + 2 + len(practice_locations_months.index)), (len(output_df.columns) - 2)))],\n",
    "                                              'merge': [1,2,3,4]})\n",
    "    practice_locations_dates = practice_locations_months.merge(practice_locations_total, on='merge', how='left')\n",
    "    practice_locations_dates.drop(['merge'], inplace=True, axis=1, errors='ignore')\n",
    "    practice_locations_index = pd.DataFrame( {'index' : ['# of Testing/Exam/Treatment Rooms', \n",
    "                                             '# of Mixing Locations', \n",
    "                                             '# of Techs', \n",
    "                                             '# of Physicians and Midlevel']})\n",
    "    practice_locations = pd.concat([practice_locations_index, practice_locations_dates], axis=1)\n",
    "    practice_locations = practice_locations[charge_columns.columns]\n",
    "    practice_locations.to_excel(writer, sheet_name='report', startrow=(len(output_df.index) + 2))\n",
    "    worksheet.conditional_format((len(output_df.index) + 3), 2, (len(output_df.index) + 3), len(output_df.columns)-1, \n",
    "                                                                  {'type': 'no_blanks',\n",
    "                                                                   'format': format_red})\n",
    "    worksheet.conditional_format((len(output_df.index) + 2),0,(len(output_df.index) + 2),(len(output_df.columns)-1),\n",
    "                                                                 {'type': 'text', \n",
    "                                                                   'criteria': 'not containing', \n",
    "                                                                   'value': 'rugby', \n",
    "                                                                   'format': format_beige})\n",
    "    worksheet.conditional_format((len(output_df.index) + 2),0,(len(output_df.index) + 2 + len(practice_locations.index)),0,\n",
    "                                                                 {'type': 'text', \n",
    "                                                                   'criteria': 'not containing', \n",
    "                                                                   'value': 'rugby', \n",
    "                                                                   'format': format_beige}) \n",
    "\n",
    "    worksheet.conditional_format((len(output_df.index) + 2),0,(len(output_df.index) + 2 + len(practice_locations.index)),\n",
    "                                                                                         (len(output_df.columns)-1), \n",
    "                                                                                         { 'type' : 'text',\n",
    "                                                                                          'criteria': 'not containing', \n",
    "                                                                                           'value': 'rugby',\n",
    "                                                                                          'format' : format_borders} )\n",
    "    worksheet.merge_range((len(output_df.index) + 2),0,(len(output_df.index) + 2),1, 'Practice Locations & Provider Information')\n",
    "    b = []\n",
    "    for i in range((len(output_df.index) + 2), (len(output_df.index) + 2 + len(practice_locations.index))):\n",
    "        b.append({'Average': '=average(%s:%s)' % (xl_rowcol_to_cell(i + 1, 2), xl_rowcol_to_cell(i + 1, len(patients_pricks_injections_Vials_treatment_total_months.columns) - 1))})  \n",
    "    location_average = pd.DataFrame(b)\n",
    "    location_average.to_excel(writer, index=False, sheet_name='report', startcol=(len(output_df.columns) + 1), startrow=(len(output_df.index) + 2))\n",
    "    location_benchmark = benchmarks_needed[benchmarks_needed['index'].isin(practice_locations['index'])]\n",
    "    location_benchmark.drop(['index'], inplace=True, axis=1)\n",
    "    location_benchmark.to_excel(writer, index=False, sheet_name='report', startcol=(len(output_df.columns) + 2), startrow=(len(output_df.index) + 2))\n",
    "    worksheet.conditional_format((len(output_df.index) + 2),(len(output_df.columns) + 1),(len(output_df.index) + 2),(len(output_df.columns) + 3), {'type': 'text', \n",
    "                                                                   'criteria': 'not containing', \n",
    "                                                                   'value': 'rugby', \n",
    "                                                                   'format': format_beige})\n",
    "    worksheet.conditional_format((len(output_df.index) + 2),(len(output_df.columns) + 1),(len(output_df.index) + 2 + len(practice_locations.index)),(len(output_df.columns) + 3),\n",
    "                                                                                         { 'type' : 'no_blanks' \n",
    "                                                                                          ,'format' : format_borders} )\n",
    "    revenue_stats_months = pd.DataFrame({'merge' : [1,2,3,4,5,6]})\n",
    "#    for i, m in enumerate(calendar.month_name[1:]):\n",
    "    for i in range(1,len(charge_columns.columns) - 1):\n",
    "        month_name = ''.join(charge_columns.columns.values[i:i+1])\n",
    "        last_date = calendar.monthrange(year,i)[1]\n",
    "#        month_name = m.capitalize()\n",
    "        l = string.ascii_uppercase[i + 1:i + 2]\n",
    "#        if PED >= datetime.datetime(year, i + 1, last_date, 0, 0, 0).strftime('%Y-%m-%d %H:%M:%S'):\n",
    "        revenue_stats_new = pd.DataFrame({'%s' % (month_name) :['=%s7/%s' % (l,xl_rowcol_to_cell((len(output_df.index) + 2 + len(practice_locations.index)), i + 1)),\n",
    "                                       '=%s7/%s' % (l,xl_rowcol_to_cell((len(output_df.index) + 1 + len(practice_locations.index)), i + 1)),\n",
    "                                       '=%s7/%s' % (l,xl_rowcol_to_cell((len(output_df.index) - 1 + len(practice_locations.index)), i + 1)),\n",
    "                                       '=%s7/%s11' % (l, l),\n",
    "                                       '=%s8/%s7' % (l, l),\n",
    "                                       '=%s10/%s8' % (l, l)],\n",
    "                                       'merge': [1,2,3,4,5,6]})\n",
    "        revenue_stats_new = revenue_stats_new[['%s'  % (month_name), 'merge']]\n",
    "        revenue_stats_months = revenue_stats_months.merge(revenue_stats_new, on='merge', how='left')\n",
    "    revenue_stats_index = pd.DataFrame({'index': ['Allergy Charges Per Physician',\n",
    "                                    'Allergy Charges Per Tech',\n",
    "                                    'Allergy Charges Per Room',\n",
    "                                    'Allergy Revenue % of Total Clinc Revenue',\n",
    "                                    'Allergy Revenue % of Charges',\n",
    "                                    'Allergy Gross Profit %'], \n",
    "                                    'merge': [1,2,3,4,5,6]})\n",
    "    revenue_stats_total = pd.DataFrame({'Total' : ['=%s/%s' % (xl_rowcol_to_cell(6, (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(output_df.index) + 2 + len(practice_locations.index)), (len(output_df.columns) - 1))),\n",
    "                                                       '=%s/%s' % (xl_rowcol_to_cell(6, (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(output_df.index) + 1 + len(practice_locations.index)), (len(output_df.columns) - 1))),\n",
    "                                                       '=%s/%s' % (xl_rowcol_to_cell(6, (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(output_df.index) - 1 + len(practice_locations.index)), (len(output_df.columns) - 1))),\n",
    "                                                       '=%s/%s' % (xl_rowcol_to_cell(6, (len(output_df.columns) - 1)), xl_rowcol_to_cell(10, (len(output_df.columns) - 1))),\n",
    "                                                       '=%s/%s' % (xl_rowcol_to_cell(7, (len(output_df.columns) - 1)), xl_rowcol_to_cell(6, (len(output_df.columns) - 1))),\n",
    "                                                       '=%s/%s' % (xl_rowcol_to_cell(9, (len(output_df.columns) - 1)), xl_rowcol_to_cell(7, (len(output_df.columns) - 1)))\n",
    "                                                  ],\n",
    "                                              'merge': [1,2,3,4,5,6]})\n",
    "    revenue_stats = revenue_stats_index.merge(revenue_stats_months, on='merge', how='left').merge(revenue_stats_total, on='merge', how='left')\n",
    "    revenue_stats.drop('merge', inplace=True, axis=1)\n",
    "    revenue_stats = revenue_stats[charge_columns.columns]\n",
    "    revenue_stats.to_excel(writer, sheet_name='report', startrow=(len(output_df.index) + 4 + len(practice_locations.index)))\n",
    "    worksheet.conditional_format((len(output_df.index) + 4 + len(practice_locations.index)),0,(len(output_df.index) + 4 + len(practice_locations.index)),(len(output_df.columns)-1),\n",
    "                                                                 {'type': 'text', \n",
    "                                                                   'criteria': 'not containing', \n",
    "                                                                   'value': 'rugby', \n",
    "                                                                   'format': format_beige})\n",
    "    worksheet.conditional_format((len(output_df.index) + 4 + len(practice_locations.index)),0,(len(output_df.index) + 4 + len(practice_locations.index) + len(revenue_stats.index)),0,\n",
    "                                                                 {'type': 'text', \n",
    "                                                                   'criteria': 'not containing', \n",
    "                                                                   'value': 'rugby', \n",
    "                                                                   'format': format_beige}) \n",
    "\n",
    "    worksheet.conditional_format((len(output_df.index) + 4 + len(practice_locations.index)),0,(len(output_df.index) + 4 + len(practice_locations.index) + len(revenue_stats.index)),\n",
    "                                                                                         (len(output_df.columns)-1), \n",
    "                                                                                         { 'type' : 'text',\n",
    "                                                                                          'criteria': 'not containing', \n",
    "                                                                                           'value': 'rugby',\n",
    "                                                                                          'format' : format_borders} )\n",
    "    worksheet.merge_range((len(output_df.index) + 4 + len(practice_locations.index)),0,(len(output_df.index) + 4 + len(practice_locations.index)),1,\n",
    "                          'Revenue & Profit Contribution Statistics')\n",
    "    c = []\n",
    "    for i in range((len(output_df.index) + 4 + len(practice_locations.index)), (len(output_df.index) + 4 + len(practice_locations.index) + len(revenue_stats.index))):\n",
    "        c.append({'Average': '=average(%s:%s)' % (xl_rowcol_to_cell(i + 1, 2), xl_rowcol_to_cell(i + 1, len(patients_pricks_injections_Vials_treatment_total_months.columns) - 1))})  \n",
    "    revenue_average = pd.DataFrame(c)\n",
    "    revenue_average.to_excel(writer, index=False, sheet_name='report', startcol=(len(output_df.columns) + 1), startrow=(len(output_df.index) + 4 + len(practice_locations.index)))\n",
    "    revenue_benchmark = benchmarks_needed[benchmarks_needed['index'].isin(revenue_stats['index'])]\n",
    "    revenue_benchmark.drop(['index'], inplace=True, axis=1)\n",
    "    revenue_benchmark.to_excel(writer, index=False, sheet_name='report', startcol=(len(output_df.columns) + 2), startrow=(len(output_df.index) + 4 + len(practice_locations.index)))\n",
    "    worksheet.conditional_format((len(output_df.index) + 4 + len(practice_locations.index)),(len(output_df.columns) + 1),(len(output_df.index) + 4 + len(practice_locations.index)),(len(output_df.columns) + 3), {'type': 'text', \n",
    "                                                                   'criteria': 'not containing', \n",
    "                                                                   'value': 'rugby', \n",
    "                                                                   'format': format_beige})\n",
    "    worksheet.conditional_format((len(output_df.index) + 4 + len(practice_locations.index)),(len(output_df.columns) + 1),(len(output_df.index) + 4 + len(practice_locations.index) + len(revenue_stats.index)),(len(output_df.columns) + 3),\n",
    "                                                                                         { 'type' : 'no_blanks' \n",
    "                                                                                          ,'format' : format_borders} )\n",
    "    test_stats_months = pd.DataFrame({'merge' : [1,2,3,4,5,6,7,8,9]})\n",
    "#    for i, m in enumerate(calendar.month_name[1:]):\n",
    "    for i in range(1,len(charge_columns.columns) - 1):\n",
    "        month_name = ''.join(charge_columns.columns.values[i:i+1])\n",
    "        last_date = calendar.monthrange(year,i )[1]\n",
    "#        month_name = m.capitalize()\n",
    "        l = string.ascii_uppercase[i + 1:i + 2]\n",
    "#        if PED >= datetime.datetime(year, i + 1, last_date, 0, 0, 0).strftime('%Y-%m-%d %H:%M:%S'):\n",
    "        if len(total_pricks.index) > 0 and len(total_inj.index) > 0:\n",
    "            test_stats_new = pd.DataFrame({'%s' % (month_name) :['=%s/%s' % (xl_rowcol_to_cell((len(tp4.index) + 11), i + 1),xl_rowcol_to_cell((len(output_df.index) + 2 + len(practice_locations.index)), i + 1)),\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell((len(tp4.index) + 11), i + 1),xl_rowcol_to_cell((len(output_df.index) + 1 + len(practice_locations.index)), i + 1)),\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell((len(tp4.index) + 11), i + 1),xl_rowcol_to_cell((len(output_df.index) - 1 + len(practice_locations.index)), i + 1)),\n",
    "                                                  '=%s/(%s + %s12)' % (xl_rowcol_to_cell((len(tp4.index) + 11), i + 1), xl_rowcol_to_cell((len(tp4.index) + 11), i + 1), l),\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks.index) + 11), i + 1), xl_rowcol_to_cell((len(tp4.index) + 11), i + 1)),\n",
    "                                                  '=%s2/%s' % (l, xl_rowcol_to_cell((len(patients_and_pricks.index) + 11), i + 1)),\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections.index) + 11), i + 1), xl_rowcol_to_cell((len(tp4.index) + 11), i + 1)),\n",
    "                                                  '=%s2/%s' % (l, xl_rowcol_to_cell((len(patients_and_pricks_and_injections.index) + 11), i + 1)),\n",
    "                                                  '=%s2/%s' % (l, xl_rowcol_to_cell((len(tp4.index) + 11), i + 1))],\n",
    "                                      'merge': [1,2,3,4,5,6,7,8,9]})\n",
    "        elif len(total_pricks.index) == 0 and len(total_inj.index) > 0:\n",
    "            test_stats_new = pd.DataFrame({'%s' % (month_name) :['=%s/%s' % (xl_rowcol_to_cell((len(tp4.index) + 11), i + 1),xl_rowcol_to_cell((len(output_df.index) + 2 + len(practice_locations.index)), i + 1)),\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell((len(tp4.index) + 11), i + 1),xl_rowcol_to_cell((len(output_df.index) + 1 + len(practice_locations.index)), i + 1)),\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell((len(tp4.index) + 11), i + 1),xl_rowcol_to_cell((len(output_df.index) - 1 + len(practice_locations.index)), i + 1)),\n",
    "                                                  '=%s/(%s + %s12)' % (xl_rowcol_to_cell((len(tp4.index) + 11), i + 1), xl_rowcol_to_cell((len(tp4.index) + 11), i + 1), l),\n",
    "                                                  0,\n",
    "                                                  0,\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections.index) + 11), i + 1), xl_rowcol_to_cell((len(tp4.index) + 11), i + 1)),\n",
    "                                                  '=%s2/%s' % (l, xl_rowcol_to_cell((len(patients_and_pricks_and_injections.index) + 11), i + 1)),\n",
    "                                                  '=%s2/%s' % (l, xl_rowcol_to_cell((len(tp4.index) + 11), i + 1))],\n",
    "                                      'merge': [1,2,3,4,5,6,7,8,9]})\n",
    "        else:\n",
    "            test_stats_new = pd.DataFrame({'%s' % (month_name) :['=%s/%s' % (xl_rowcol_to_cell((len(tp4.index) + 11), i + 1),xl_rowcol_to_cell((len(output_df.index) + 2 + len(practice_locations.index)), i + 1)),\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell((len(tp4.index) + 11), i + 1),xl_rowcol_to_cell((len(output_df.index) + 1 + len(practice_locations.index)), i + 1)),\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell((len(tp4.index) + 11), i + 1),xl_rowcol_to_cell((len(output_df.index) - 1 + len(practice_locations.index)), i + 1)),\n",
    "                                                  '=%s/(%s + %s12)' % (xl_rowcol_to_cell((len(tp4.index) + 11), i + 1), xl_rowcol_to_cell((len(tp4.index) + 11), i + 1), l),\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks.index) + 11), i + 1), xl_rowcol_to_cell((len(tp4.index) + 11), i + 1)),\n",
    "                                                  '=%s2/%s' % (l, xl_rowcol_to_cell((len(patients_and_pricks.index) + 11), i + 1)),\n",
    "                                                  0,\n",
    "                                                  0,\n",
    "                                                  '=%s2/%s' % (l, xl_rowcol_to_cell((len(tp4.index) + 11),  i + 2))],\n",
    "                                      'merge': [1,2,3,4,5,6,7,8,9]})\n",
    "        test_stats_new = test_stats_new[['%s'  % (month_name), 'merge']]\n",
    "        test_stats_months = test_stats_months.merge(test_stats_new, on='merge', how='left')\n",
    "    test_stats_index = pd.DataFrame({'index': ['# of Tests Per Physician',\n",
    "                                                            '# of Test Per Tech',\n",
    "                                                            '# of Tests Per Room',\n",
    "                                                            'Allergy Tests vs Spirometry',\n",
    "                                                            '# of Pricks per Test',\n",
    "                                                            'Average Charge Per Prick',\n",
    "                                                            '# of Sticks per Test',\n",
    "                                                            'Average Charge Per Stick',\n",
    "                                                            'Average Charge Per Test'], \n",
    "                                    'merge': [1,2,3,4,5,6,7,8,9]})\n",
    "    if len(total_pricks.index) > 0 and len(total_inj.index) > 0:\n",
    "        test_stats_total = pd.DataFrame({'Total' : ['=%s/%s' % (xl_rowcol_to_cell((len(tp4.index) + 11), (len(output_df.columns) - 1)),xl_rowcol_to_cell((len(output_df.index) + 2 + len(practice_locations.index)), (len(output_df.columns) - 1))),\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell((len(tp4.index) + 11), (len(output_df.columns) - 1)),xl_rowcol_to_cell((len(output_df.index) + 1 + len(practice_locations.index)), (len(output_df.columns) - 1))),\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell((len(tp4.index) + 11), (len(output_df.columns) - 1)),xl_rowcol_to_cell((len(output_df.index) - 1 + len(practice_locations.index)), (len(output_df.columns) - 1))),\n",
    "                                                  '=%s/(%s + %s)' % (xl_rowcol_to_cell((len(tp4.index) + 11), (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(tp4.index) + 11), (len(output_df.columns) - 1)), xl_rowcol_to_cell(11, (len(output_df.columns) - 1))),\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks.index) + 11), (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(tp4.index) + 11), (len(output_df.columns) - 1))),\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell(1, (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(patients_and_pricks.index) + 11), (len(output_df.columns) - 1))),\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections.index) + 11), (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(tp4.index) + 11), (len(output_df.columns) - 1))),\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell(1, (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(patients_and_pricks_and_injections.index) + 11), (len(output_df.columns) - 1))),\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell(1, (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(tp4.index) + 11), (len(output_df.columns) - 1)))\n",
    "                                                ],\n",
    "                                              'merge': [1,2,3,4,5,6,7,8,9]})\n",
    "    elif len(total_pricks.index) == 0 and len(total_inj.index) > 0:\n",
    "        test_stats_total = pd.DataFrame({'Total' : ['=%s/%s' % (xl_rowcol_to_cell((len(tp4.index) + 11), (len(output_df.columns) - 1)),xl_rowcol_to_cell((len(output_df.index) + 2 + len(practice_locations.index)), (len(output_df.columns) - 1))),\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell((len(tp4.index) + 11), (len(output_df.columns) - 1)),xl_rowcol_to_cell((len(output_df.index) + 1 + len(practice_locations.index)), (len(output_df.columns) - 1))),\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell((len(tp4.index) + 11), (len(output_df.columns) - 1)),xl_rowcol_to_cell((len(output_df.index) - 1 + len(practice_locations.index)), (len(output_df.columns) - 1))),\n",
    "                                                  '=%s/(%s + %s)' % (xl_rowcol_to_cell((len(tp4.index) + 11), (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(tp4.index) + 11), (len(output_df.columns) - 1)), xl_rowcol_to_cell(11, (len(output_df.columns) - 1))),\n",
    "                                                  0,\n",
    "                                                  0,\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections.index) + 11), (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(tp4.index) + 11), (len(output_df.columns) - 1))),\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell(1, (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(patients_and_pricks_and_injections.index) + 11), (len(output_df.columns) - 1))),\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell(1, (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(tp4.index) + 11), (len(output_df.columns) - 1)))\n",
    "                                                ],\n",
    "                                              'merge': [1,2,3,4,5,6,7,8,9]})\n",
    "    else:\n",
    "        test_stats_total = pd.DataFrame({'Total' : ['=%s/%s' % (xl_rowcol_to_cell((len(tp4.index) + 11), (len(output_df.columns) - 1)),xl_rowcol_to_cell((len(output_df.index) + 2 + len(practice_locations.index)), (len(output_df.columns) - 1))),\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell((len(tp4.index) + 11), (len(output_df.columns) - 1)),xl_rowcol_to_cell((len(output_df.index) + 1 + len(practice_locations.index)), (len(output_df.columns) - 1))),\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell((len(tp4.index) + 11), (len(output_df.columns) - 1)),xl_rowcol_to_cell((len(output_df.index) - 1 + len(practice_locations.index)), (len(output_df.columns) - 1))),\n",
    "                                                  '=%s/(%s + %s)' % (xl_rowcol_to_cell((len(tp4.index) + 11), (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(tp4.index) + 11), (len(output_df.columns) - 1)), xl_rowcol_to_cell(11, (len(output_df.columns) - 1))),\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks.index) + 11), (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(tp4.index) + 11), (len(output_df.columns) - 1))),\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell(1, (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(patients_and_pricks.index) + 11), (len(output_df.columns) - 1))),\n",
    "                                                  0,\n",
    "                                                  0,\n",
    "                                                  '=%s/%s' % (xl_rowcol_to_cell(1, (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(tp4.index) + 11), (len(output_df.columns) - 1)))\n",
    "                                                ],\n",
    "                                              'merge': [1,2,3,4,5,6,7,8,9]})\n",
    "    test_stats = test_stats_index.merge(test_stats_months, on='merge', how='left').merge(test_stats_total, on='merge', how='left')\n",
    "    test_stats.drop('merge', inplace=True, axis=1)\n",
    "    test_stats = test_stats[charge_columns.columns]\n",
    "    test_stats.to_excel(writer, sheet_name='report', startrow=(len(output_df.index) + 6 + len(practice_locations.index) + len(revenue_stats.index)))\n",
    "    worksheet.conditional_format((len(output_df.index) + 6 + len(practice_locations.index) + len(revenue_stats.index)),0,(len(output_df.index) + 6 + len(practice_locations.index) + len(revenue_stats.index)),(len(output_df.columns)-1),\n",
    "                                                                 {'type': 'text', \n",
    "                                                                   'criteria': 'not containing', \n",
    "                                                                   'value': 'rugby', \n",
    "                                                                   'format': format_beige})\n",
    "    worksheet.conditional_format((len(output_df.index) + 6 + len(practice_locations.index) + len(revenue_stats.index)),0,(len(output_df.index) + 6 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index)),0,\n",
    "                                                                 {'type': 'text', \n",
    "                                                                   'criteria': 'not containing', \n",
    "                                                                   'value': 'rugby', \n",
    "                                                                   'format': format_beige}) \n",
    "\n",
    "    worksheet.conditional_format((len(output_df.index) + 6 + len(practice_locations.index) + len(revenue_stats.index)),0,(len(output_df.index) + 6 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index)),\n",
    "                                                                                         (len(output_df.columns)-1), \n",
    "                                                                                         { 'type' : 'text',\n",
    "                                                                                          'criteria': 'not containing', \n",
    "                                                                                           'value': 'rugby',\n",
    "                                                                                          'format' : format_borders} )\n",
    "    worksheet.merge_range((len(output_df.index) + 6 + len(practice_locations.index) + len(revenue_stats.index)),0,(len(output_df.index) + 6 + len(practice_locations.index) + len(revenue_stats.index)),1,\n",
    "                          'Testing Statistics')\n",
    "    d = []\n",
    "    for i in range((len(output_df.index) + 6 + len(practice_locations.index) + len(revenue_stats.index)), (len(output_df.index) + 6 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index))):\n",
    "        d.append({'Average': '=average(%s:%s)' % (xl_rowcol_to_cell(i + 1, 2), xl_rowcol_to_cell(i + 1, len(patients_pricks_injections_Vials_treatment_total_months.columns) - 1))})  \n",
    "    test_average = pd.DataFrame(d)\n",
    "    test_average.to_excel(writer, index=False, sheet_name='report', startcol=(len(output_df.columns) + 1), startrow=(len(output_df.index) + 6 + len(practice_locations.index) + len(revenue_stats.index)))\n",
    "    test_benchmark = benchmarks_needed[benchmarks_needed['index'].isin(test_stats['index'])]\n",
    "    test_benchmark.drop(['index'], inplace=True, axis=1)\n",
    "    test_benchmark.to_excel(writer, index=False, sheet_name='report', startcol=(len(output_df.columns) + 2), startrow=(len(output_df.index) + 6 + len(practice_locations.index) + len(revenue_stats.index)))\n",
    "    worksheet.conditional_format((len(output_df.index) + 6 + len(practice_locations.index) + len(revenue_stats.index)),(len(output_df.columns) + 1),(len(output_df.index) + 6 + len(practice_locations.index) + len(revenue_stats.index)),(len(output_df.columns) + 3), {'type': 'text', \n",
    "                                                                   'criteria': 'not containing', \n",
    "                                                                   'value': 'rugby', \n",
    "                                                                   'format': format_beige})\n",
    "    worksheet.conditional_format((len(output_df.index) + 6 + len(practice_locations.index) + len(revenue_stats.index)),(len(output_df.columns) + 1),(len(output_df.index) + 6 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index)),(len(output_df.columns) + 3),\n",
    "                                                                                         { 'type' : 'no_blanks' \n",
    "                                                                                          ,'format' : format_borders} )\n",
    "    treat_stats_months = pd.DataFrame({'merge' : [1,2,3,4,5,6,7,8,9]})\n",
    "#    for i, m in enumerate(calendar.month_name[1:]):\n",
    "    for i in range(1,len(charge_columns.columns) - 1):\n",
    "        month_name = ''.join(charge_columns.columns.values[i:i+1])\n",
    "        last_date = calendar.monthrange(year,i)[1]\n",
    "#        month_name = m.capitalize()\n",
    "        l = string.ascii_uppercase[i + 1:i + 2]\n",
    "#        if PED >= datetime.datetime(year, i + 1, last_date, 0, 0, 0).strftime('%Y-%m-%d %H:%M:%S'):\n",
    "        treat_stats_new = pd.DataFrame({'%s' % (month_name) :['=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials.index) + 11), i + 1), xl_rowcol_to_cell((len(tp4.index) + 11), i + 1)), \n",
    "                                               '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 11 + len(injections.index)), i + 1), xl_rowcol_to_cell((len(patients_pricks_injections_Vials_treatment.index) + 10), i + 1)),\n",
    "                                               '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 12 + len(injections.index)), i + 1), xl_rowcol_to_cell((len(patients_pricks_injections_Vials_treatment.index) + 10), i + 1)),\n",
    "                                               '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 12), i + 1), xl_rowcol_to_cell((len(patients_pricks_injections_Vials_treatment_total_months.index) + 13 + len(practice_locations_dates.index)), i + 1)),\n",
    "                                               '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 12), i + 1), xl_rowcol_to_cell((len(patients_pricks_injections_Vials_treatment_total_months.index) + 11 + len(practice_locations_dates.index)), i + 1)),\n",
    "                                               '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 11), i + 1), xl_rowcol_to_cell((len(patients_pricks_injections_Vials_treatment_total_months.index) + 13 + len(practice_locations_dates.index)), i + 1)),\n",
    "                                               '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 11), i + 1), xl_rowcol_to_cell((len(patients_pricks_injections_Vials_treatment_total_months.index) + 12 + len(practice_locations_dates.index)), i + 1)),\n",
    "                                               '=%s5/%s' % (l, xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 12), i + 1)),\n",
    "                                               '=%s4/%s' % (l, xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials.index) + 12), i + 1))],\n",
    "                                  'merge': [1,2,3,4,5,6,7,8,9]})\n",
    "        treat_stats_new = treat_stats_new[['%s'  % (month_name), 'merge']]\n",
    "        treat_stats_months = treat_stats_months.merge(treat_stats_new, on='merge', how='left')\n",
    "    treat_stats_index = pd.DataFrame({'index': ['Testing to Treatment Conversion Rate',\n",
    "                                                                '% of New Patients on SCIT',\n",
    "                                                                '% of New Patients on SLIT',\n",
    "                                                                '# of Injections per Tech',\n",
    "                                                                '# of Injections per Room',\n",
    "                                                                '# of Vials Mixed per Tech',\n",
    "                                                                '# of Vials Mixed per Mixing Location',\n",
    "                                                                'SCIT Charge Per Injection',\n",
    "                                                                'SCIT Charge Per Vial'], \n",
    "                                    'merge': [1,2,3,4,5,6,7,8,9]})\n",
    "    treat_stats_total = pd.DataFrame({'Total' :['=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials.index) + 11), (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(tp4.index) + 11), (len(output_df.columns) - 1))), \n",
    "                                                   '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 11 + len(injections.index)), (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(patients_pricks_injections_Vials_treatment.index) + 10), (len(output_df.columns) - 1))),\n",
    "                                                   '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 12 + len(injections.index)), (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(patients_pricks_injections_Vials_treatment.index) + 10), (len(output_df.columns) - 1))),\n",
    "                                                   '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 12), (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(patients_pricks_injections_Vials_treatment_total_months.index) + 13 + len(practice_locations_dates.index)), (len(output_df.columns) - 1))),\n",
    "                                                   '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 12), (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(patients_pricks_injections_Vials_treatment_total_months.index) + 11 + len(practice_locations_dates.index)), (len(output_df.columns) - 1))),\n",
    "                                                   '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 11), (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(patients_pricks_injections_Vials_treatment_total_months.index) + 13 + len(practice_locations_dates.index)), (len(output_df.columns) - 1))),\n",
    "                                                   '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 11), (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(patients_pricks_injections_Vials_treatment_total_months.index) + 12 + len(practice_locations_dates.index)), (len(output_df.columns) - 1))),\n",
    "                                                   '=%s/%s' % (xl_rowcol_to_cell(4, (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 12), (len(output_df.columns) - 1))),\n",
    "                                                   '=%s/%s' % (xl_rowcol_to_cell(3, (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials.index) + 12), (len(output_df.columns) - 1)))],\n",
    "                                      'merge': [1,2,3,4,5,6,7,8,9]})\n",
    "    treat_stats = treat_stats_index.merge(treat_stats_months, on='merge', how='left').merge(treat_stats_total, on='merge', how='left')\n",
    "    treat_stats.drop('merge', inplace=True, axis=1)\n",
    "    treat_stats = treat_stats[charge_columns.columns]\n",
    "    treat_stats.to_excel(writer, sheet_name='report', startrow=(len(output_df.index) + 8 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index)))\n",
    "    worksheet.conditional_format((len(output_df.index) + 8 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index)),0,(len(output_df.index) + 8 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index)),(len(output_df.columns)-1),\n",
    "                                                                 {'type': 'text', \n",
    "                                                                   'criteria': 'not containing', \n",
    "                                                                   'value': 'rugby', \n",
    "                                                                   'format': format_beige})\n",
    "    worksheet.conditional_format((len(output_df.index) + 8 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index)),0,(len(output_df.index) + 8 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index) + len(treat_stats.index)),0,\n",
    "                                                                 {'type': 'text', \n",
    "                                                                   'criteria': 'not containing', \n",
    "                                                                   'value': 'rugby', \n",
    "                                                                   'format': format_beige}) \n",
    "    worksheet.conditional_format(1,(len(output_df.columns) + 1),(len(output_df.index) + 6 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index)),(len(output_df.columns) + 3), \n",
    "                                 {'type' : 'no_blanks',\n",
    "                                  'format': decimal_fmt})\n",
    "    worksheet.conditional_format((len(output_df.index) + 9 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index)),2,(len(output_df.index) + 11 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index)),(len(output_df.columns) + 3), \n",
    "                                 {'type' : 'no_blanks',\n",
    "                                  'format': percent_fmt})\n",
    "    worksheet.conditional_format((len(output_df.index) + 12 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index)),(len(output_df.columns) + 1),(len(output_df.index) + 8 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index) + len(treat_stats.index)),(len(output_df.columns) + 3), \n",
    "                                 {'type' : 'no_blanks',\n",
    "                                  'format': decimal_fmt})\n",
    "    worksheet.conditional_format((len(output_df.index) + 8 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index)),0,(len(output_df.index) + 8 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index) + len(treat_stats.index)),\n",
    "                                                                                         (len(output_df.columns)-1), \n",
    "                                                                                         { 'type' : 'text',\n",
    "                                                                                          'criteria': 'not containing', \n",
    "                                                                                           'value': 'rugby',\n",
    "                                                                                          'format' : format_borders} )\n",
    "    worksheet.merge_range((len(output_df.index) + 8 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index)),0,(len(output_df.index) + 8 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index)),1,\n",
    "                          'Treatment Statistics')\n",
    "    e = []\n",
    "    for i in range((len(output_df.index) + 8 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index)), (len(output_df.index) + 8 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index) + len(treat_stats.index))):\n",
    "        e.append({'Average': '=average(%s:%s)' % (xl_rowcol_to_cell(i + 1, 2), xl_rowcol_to_cell(i + 1, len(patients_pricks_injections_Vials_treatment_total_months.columns) - 1))})  \n",
    "    treat_average = pd.DataFrame(e)\n",
    "    treat_average.to_excel(writer, index=False, sheet_name='report', startcol=(len(output_df.columns) + 1), startrow=(len(output_df.index) + 8 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index)))\n",
    "    treatment_benchmark = benchmarks_needed[benchmarks_needed['index'].isin(treat_stats['index'])]\n",
    "    treatment_benchmark.drop(['index'], inplace=True, axis=1)\n",
    "    treatment_benchmark.to_excel(writer, index=False, sheet_name='report', startcol=(len(output_df.columns) + 2), startrow=(len(output_df.index) + 8 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index)))\n",
    "    worksheet.conditional_format((len(output_df.index) + 8 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index)),(len(output_df.columns) + 1),(len(output_df.index) + 8 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index)),(len(output_df.columns) + 3)\n",
    "                                                                   , {'type': 'text', \n",
    "                                                                   'criteria': 'not containing', \n",
    "                                                                   'value': 'rugby', \n",
    "                                                                   'format': format_beige}) \n",
    "    worksheet.conditional_format((len(output_df.index) + 8 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index)),(len(output_df.columns) + 1),(len(output_df.index) + 8 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index) + len(treat_stats.index)),(len(output_df.columns) + 3),\n",
    "                                                                                         { 'type' : 'no_blanks' ,\n",
    "                                                                                          'format' : format_borders} )\n",
    "    shots_per_user = pd.read_sql_query(\"select a.patient_id as Patients_Tested, monthname(a.date) as test_date, a.date as month_year, b.practice_id, a.shot_giver_id, c.username, c.firstname, c.lastname from patient_visits_shots a left join patients b on a.patient_id = b.id left join users c on c.id = a.shot_giver_id WHERE b.practice_id = %(practice_ID)s and a.active = 1 AND a.Date BETWEEN %(PSD)s and %(PED)s and b.id is not null and c.id is not null\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "    fuel_users = pd.read_sql_query(\"SELECT DISTINCT username FROM `users` where practice_id = 9\", myconnection)\n",
    "    missing_shot_giver = shots_per_user.loc[pd.isnull(shots_per_user).any(1), : ]\n",
    "    shots_per_user_non_fuel = shots_per_user[~shots_per_user['username'].isin(fuel_users['username'])]\n",
    "    shots_per_user_non_fuel['date'] = shots_per_user_non_fuel['month_year'].dt.strftime('%Y-%m')\n",
    "    shots_per_user_non_fuel_pivot = pd.pivot_table(shots_per_user_non_fuel, index=['username'], columns=['date', 'test_date'], values=['Patients_Tested'], aggfunc='count', fill_value=0, margins=True)\n",
    "    shots_per_user_non_fuel_pivot.columns = shots_per_user_non_fuel_pivot.columns.droplevel(1)\n",
    "    shots_per_user_non_fuel_pivot.columns = shots_per_user_non_fuel_pivot.columns.droplevel()\n",
    "    shots_per_user_non_fuel_pivot.rename(columns={'': 'Total'}, inplace=True)\n",
    "    total_tests_users = pd.read_sql_query(\"SELECT distinct q.patient as Patients_Tested, q.tester, monthname(q.test_date) as test_date, q.test_date as month_year, q.type as type_of_test, q.Location_ID, q.Name as location_name, q.practice_ID, q.Practice_name, z.username, z.firstname, z.lastname FROM ( (select distinct(a.patient_id) as patient, a.user_id as tester, a.test_date as test_date, a.location_ID, d.Name, a.practice_id, i.name as Practice_name, 'injection' as type from intradermal_tests a INNER JOIN practice_locations d ON a.Location_ID = d.id INNER JOIN practices i on a.practice_id = i.id where a.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (a.Status IS NULL OR a.Status <> 'deleted')) UNION (select distinct(b.patient_id) as patient, b.tester_id as tester, b.test_date as test_date, b.location_id, e.Name, b.practice_id, i.name as Practice_name, 'mqt' as type from mq_tests b INNER JOIN practice_locations e ON b.Location_ID = e.id INNER JOIN practices i on b.practice_id = i.id where b.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (b.Status IS NULL OR b.Status <> 'deleted')) UNION (select distinct(c.patient_id) as patient, c.tester_id as tester, c.test_date as test_date, c.location_id, f.Name, c.practice_id, i.name as Practice_name, 'stick' as type from prick_tests c INNER JOIN practice_locations f ON c.location_id = f.id INNER JOIN practices i on c.practice_id = i.id where c.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (c.Status IS NULL OR c.Status <> 'deleted')) UNION (select distinct(g.patient_id) as patient, g.blood_drawn_by as tester, g.Start_Date as test_date, g.Start_Location_id AS Location_ID, h.name, g.start_practice_id, i.name as Practice_name, 'ige' as type from ige_tests g INNER JOIN practice_locations h ON g.start_practice_id = h.ID INNER JOIN practices i on g.start_practice_id = i.id where g.Start_Date BETWEEN %(PSD)s AND %(PED)s AND (g.Status = 'Complete')) order by Location_ID) q left join users z on q.tester = z.id WHERE q.practice_id =  %(practice_ID)s\" , myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "    total_tests_users['month_year'] = total_tests_users['month_year'].dt.strftime('%Y-%m')\n",
    "    prick_index = total_tests_users.type_of_test == 'stick'\n",
    "    injection_index = total_tests_users.type_of_test == 'injection'\n",
    "    mqt_index = total_tests_users.type_of_test == 'mqt'\n",
    "    total_tests_users.loc[prick_index, 'type_of_test'] = 'Allergy Tests - Pricks'\n",
    "    total_tests_users.loc[injection_index, 'type_of_test'] = 'Allergy Tests - Sticks'\n",
    "    total_tests_users.loc[mqt_index, 'type_of_test'] = 'Allergy Tests - MQT'\n",
    "    total_tests_users_non_fuel = total_tests_users[~total_tests_users['username'].isin(fuel_users['username'])]\n",
    "    total_tests_users_pivot = pd.pivot_table(total_tests_users_non_fuel, index=['username'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count', fill_value= 0, margins=True)\n",
    "    total_tests_users_pivot.columns = total_tests_users_pivot.columns.droplevel()\n",
    "    total_tests_users_pivot.columns = total_tests_users_pivot.columns.droplevel()\n",
    "    #total_tests_users_pivot.index = total_tests_users_pivot.index.droplevel(1)\n",
    "    total_tests_users_pivot.rename(columns={'': 'Total'}, inplace=True)\n",
    "    '''\n",
    "    Distinct patients who got a vial made (doesn't inlcude if multiple vials were made for the same patient\n",
    "    '''\n",
    "    #vials = pd.read_sql_query(\"SELECT DISTINCT q.patient as Patients_Tested, monthname(q.test_date) as test_date, q.test_date as month_year, z.intake_method, q.Location_ID, q.Name as location_name, q.practice_ID, q.Practice_name FROM ((select distinct(a.patient_id) as patient, a.Test_Date as test_date, a.location_ID, d.Name, a.practice_id, i.name as Practice_name from intradermal_tests a INNER JOIN practice_locations d ON a.Location_ID = d.id INNER JOIN practices i on a.practice_id = i.id where a.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (a.Status IS NULL OR a.Status <> 'deleted')) UNION (select distinct(b.patient_id) as patient, b.Test_Date as test_date, b.location_id, e.Name, b.practice_id, i.name as Practice_name from mq_tests b INNER JOIN practice_locations e ON b.Location_ID = e.id INNER JOIN practices i on b.practice_id = i.id where b.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (b.Status IS NULL OR b.Status <> 'deleted')) UNION (select distinct(c.patient_id) as patient, c.Test_Date as test_date, c.location_id, f.Name, c.practice_id, i.name as Practice_name from prick_tests c INNER JOIN practice_locations f ON c.location_id = f.id INNER JOIN practices i on c.practice_id = i.id where c.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (c.Status IS NULL OR c.Status <> 'deleted')) UNION (select distinct(g.patient_id) as patient, g.Start_Date as test_date, g.Start_Location_id AS Location_ID, h.name, g.start_practice_id, i.name as Practice_name from ige_tests g INNER JOIN practice_locations h ON g.start_practice_id = h.ID INNER JOIN practices i on g.start_practice_id = i.id where g.Start_Date BETWEEN %(PSD)s AND %(PED)s AND (g.Status = 'Complete')) order by Location_ID) q LEFT JOIN (SELECT DISTINCT barcode, Patient_ID FROM vials WHERE (status_id <> 2 or status_id is not null) and is_child <> 1 AND Mix_Date BETWEEN %(PSD)s AND %(PED)s) v ON q.patient = v.Patient_ID LEFT JOIN (SELECT id, intake_method FROM patients) z on q.patient = z.id where v.Patient_ID is not null and practice_id = %(practice_ID)s\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "    '''\n",
    "    Total Number of vials mixed for each patient, a patient could have multiple vials mixed here\n",
    "    '''\n",
    "#    vials = pd.read_sql_query(\"SELECT DISTINCT v.patient_id as Patients_Tested, v.barcode, monthname(v.Mix_Date) as test_date, v.Mix_Date as month_year, z.intake_method, v.mix_location_id, a.Name as location_name, v.mix_practice_id, b.name as practice_name, u.username, u.firstname, u.lastname FROM vials v LEFT JOIN patients z on v.patient_id = z.id left join users u on if(v.created_by is null, v.mixer_id, v.created_by) = u.id left join practice_locations a on v.mix_location_id = a.id left join practices b on v.mix_practice_id = b.id where (v.status_id <> 2 or v.status_id is not null) and v.is_child <> 1 AND v.Mix_Date BETWEEN %(PSD)s AND %(PED)s and v.Patient_ID is not null and v.mix_practice_id = %(practice_ID)s and u.id is not null\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "    vials = pd.read_sql_query(\"SELECT DISTINCT(v.barcode) AS barcode, v.patient_id as Patients_Tested, vn.name, vs.status, z.firstname, z.middlename, z.lastname, monthname(v.Mix_date) as test_date, v.Mix_Date as month_year, z.intake_method, v.mix_location_id, a.Name as location_name, v.mix_practice_id, b.name as practice_name, u.username FROM vials v INNER JOIN vial_names vn ON v.id=vn.vial_id INNER JOIN vial_statuses vs on v.status_id = vs.id INNER JOIN patients z on v.patient_id = z.id left join users u on if(v.created_by is null, v.mixer_id, v.created_by) = u.id INNER join practice_locations a on v.mix_location_id = a.id INNER join practices b on v.mix_practice_id = b.id where (v.is_child = 0 OR v.is_child IS null OR (v.is_child = 1 and v.from_titrated = 1)) AND v.Mix_Date BETWEEN %(PSD)s AND %(PED)s and (z.mix_practice_id = %(practice_ID)s OR z.shot_practice_id = %(practice_ID)s) ORDER BY barcode\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "    vials['month_year'] = vials['month_year'].dt.strftime('%Y-%m')\n",
    "    inj_vial_index = vials.intake_method == 'inj'\n",
    "    sub_vial_index = vials.intake_method == 'sub'\n",
    "    unk_vial_index = vials.intake_method == 'unk'\n",
    "    vials.loc[inj_vial_index, 'intake_method'] = '# of SCIT Vials Mixed'\n",
    "    vials.loc[sub_vial_index, 'intake_method'] = '# of SLIT Vials Mixed'\n",
    "    vials.loc[unk_vial_index, 'intake_method'] = '# of Unknown Vials Mixed'\n",
    "    vials_non_fuel = vials[~vials['username'].isin(fuel_users['username'])]\n",
    "    Vials2 = pd.pivot_table(vials_non_fuel, index=['username'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count',fill_value=0, margins=True)\n",
    "    Vials2.columns = Vials2.columns.droplevel()\n",
    "    Vials2.columns = Vials2.columns.droplevel()\n",
    "    #Vials2.index = Vials2.index.droplevel(1)\n",
    "    Vials2.rename(columns={'': 'Total'}, inplace=True)\n",
    "    total_errors_person = pd.read_sql_query(\"SELECT a.id as Patients_Tested, a.practice_id, monthname(a.date) as test_date, a.date as month_year, c.name as practice_name, u.username, u.firstname, u.lastname from user_errors a INNER JOIN practice_locations b ON a.Location_ID = b.id INNER JOIN practices c on a.practice_id = c.id left join users u on a.user_id = u.id WHERE a.Date BETWEEN %(PSD)s AND %(PED)s AND a.practice_id = %(practice_ID)s\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "    if len(total_errors_person) > 0:\n",
    "        total_errors_person['month_year'] = total_errors_person['month_year'].dt.strftime('%Y-%m')\n",
    "        practice_id_index = total_errors_person.practice_id == practice_id\n",
    "        total_errors_person.loc[practice_id_index, 'practice_id'] = '# of Errors'\n",
    "        total_errors_person_non_fuel = total_errors_person[~total_errors_person['username'].isin(fuel_users['username'])]\n",
    "        total_errors_person_pivot = pd.pivot_table(total_errors_person_non_fuel, index=['username'], values=['Patients_Tested'], columns=[ 'month_year', 'test_date'], aggfunc='count',fill_value=0, margins=True)\n",
    "        total_errors_person_pivot.columns = total_errors_person_pivot.columns.droplevel()\n",
    "        total_errors_person_pivot.columns = total_errors_person_pivot.columns.droplevel()\n",
    "        total_errors_person_pivot.rename(columns={'': 'Total'}, inplace=True)\n",
    "        per_person_kpi = total_errors_person_pivot.merge(total_tests_users_pivot, how='left', on=None, left_on=None, right_on=None, left_index=True, right_index=True, sort=False, suffixes=('_Errors', '_Tests_Given')).merge(Vials2, how='left', on=None, left_on=None, right_on=None, left_index=True, right_index=True, sort=False, suffixes=('_Tests_Given', '_Vials_Mixed')).merge(shots_per_user_non_fuel_pivot, how='left', on=None, left_on=None, right_on=None, left_index=True, right_index=True, sort=False, suffixes=('_Vials_Mixed', '_Shots_Given'))\n",
    "    else:\n",
    "        per_person_kpi = total_tests_users_pivot.merge(Vials2, how='left', on=None, left_on=None, right_on=None, left_index=True, right_index=True, sort=True, suffixes=('_Tests_Given', '_Vials_Mixed')).merge(shots_per_user_non_fuel_pivot, how='left', on=None, left_on=None, right_on=None, left_index=True, right_index=True, sort=True, suffixes=('_Vials_Mixed', '_Shots_Given'))\n",
    "    per_person_kpi_output = per_person_kpi.fillna(0)\n",
    "    per_person_kpi_output.to_excel(writer, sheet_name='Per Person KPIs')\n",
    "    worksheet2 = writer.sheets['Per Person KPIs']\n",
    "    worksheet2.conditional_format(0,0,0,(len(per_person_kpi_output.columns)), {'type': 'text', \n",
    "                                                                   'criteria': 'not containing', \n",
    "                                                                   'value': 'rugby', \n",
    "                                                                   'format': format_beige})\n",
    "    worksheet2.conditional_format(0,0,(len(per_person_kpi_output.index)),0, {'type': 'text', \n",
    "                                                                   'criteria': 'not containing', \n",
    "                                                                   'value': 'rugby', \n",
    "                                                                   'format': format_beige}) \n",
    "    worksheet2.conditional_format(0,0,(len(per_person_kpi_output.index)),(len(per_person_kpi.columns)), \n",
    "                                                                                         { 'type' : 'text',\n",
    "                                                                                          'criteria': 'not containing', \n",
    "                                                                                           'value': 'rugby',\n",
    "                                                                                          'format' : format_borders} )\n",
    "    if len(missing_months_final) > 0:\n",
    "        for i in range(len(per_person_kpi_output.columns) + 1):\n",
    "            if i < (len(total_errors_pivot.columns) - len(missing_months_final)):\n",
    "                worksheet2.conditional_format(1,i, (len(per_person_kpi_output.index) - 1), i, {'type': 'data_bar', 'bar_color': '#FF0000'})\n",
    "            else:\n",
    "                worksheet2.conditional_format(1,i, (len(per_person_kpi_output.index) - 1), i, {'type': 'data_bar', 'bar_color': '#008000'})\n",
    "    elif len(total_errors_person) > 0:\n",
    "        for i in range(len(per_person_kpi_output.columns) + 1):\n",
    "            if i < len(total_errors_pivot.columns):\n",
    "                worksheet2.conditional_format(1,i, (len(per_person_kpi_output.index) - 1), i, {'type': 'data_bar', 'bar_color': '#FF0000'})\n",
    "            else:\n",
    "                worksheet2.conditional_format(1,i, (len(per_person_kpi_output.index) - 1), i, {'type': 'data_bar', 'bar_color': '#008000'})\n",
    "    else:\n",
    "        for i in range(len(per_person_kpi_output.columns) + 1):\n",
    "            worksheet2.conditional_format(1,i, (len(per_person_kpi_output.index) - 1), i, {'type': 'data_bar', 'bar_color': '#008000'})\n",
    "    worksheet.hide_gridlines(2)\n",
    "    worksheet2.hide_gridlines(2)\n",
    "    worksheet.set_column(1,1,42)\n",
    "    worksheet.set_column((len(output_df.columns) + 2),(len(output_df.columns) + 2),18)\n",
    "    worksheet.set_column((len(output_df.columns) + 3),(len(output_df.columns) + 3),13)\n",
    "    worksheet.set_column((len(output_df.columns) + 4),(len(output_df.columns) + 4),10)\n",
    "    for i in range(len(per_person_kpi.columns) + 1):\n",
    "        worksheet2.set_column(i,i,len(per_person_kpi_output.columns.values[i-1]))\n",
    "    for i in range(len(output_df.index) + 8 + len(practice_locations.index) + len(revenue_stats.index) + len(test_stats.index) + len(treat_stats.index)):\n",
    "        worksheet.add_sparkline('%s' % (xl_rowcol_to_cell(i, (len(output_df.columns) + 4))), {'range': 'report!%s:%s' % (xl_rowcol_to_cell(i, (len(output_df.columns) + 1)), xl_rowcol_to_cell(i, (len(output_df.columns) + 3))), 'type': 'column'})\n",
    "    writer.save()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>March</th>\n",
       "      <th>April</th>\n",
       "      <th>May</th>\n",
       "      <th>June</th>\n",
       "      <th>July</th>\n",
       "      <th>August</th>\n",
       "      <th>September</th>\n",
       "      <th>October</th>\n",
       "      <th>November</th>\n",
       "      <th>December</th>\n",
       "      <th>January</th>\n",
       "      <th>February</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Testing Charges</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>=sum(C2:N2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Spirometry Charges</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>=sum(C3:N3)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>SCIT Mixing Charges</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>=sum(C4:N4)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>SCIT Injection Charges</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>=sum(C5:N5)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>SLIT Vial Charges</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>=sum(C6:N6)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Total Allergy Charges</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>=sum(C7:N7)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Total Allergy Collected</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>=sum(C8:N8)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Allergy Cost of Goods</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>=sum(C9:N9)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Allergy Gross Profit</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>=sum(C10:N10)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Total Clinic Revenue (INCLUDES ALL ENT REV.)</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>=sum(C11:N11)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td># of Spirometry Tests</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>=sum(C12:N12)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Patient Tests - MQT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Subtotal Patient Tests</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Allergy Tests - MQT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Subtotal Allergy Tests</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td># of Pricks not related to Food</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>170.0</td>\n",
       "      <td>268.0</td>\n",
       "      <td>684.0</td>\n",
       "      <td>570.0</td>\n",
       "      <td>1260.0</td>\n",
       "      <td>684.0</td>\n",
       "      <td>985.0</td>\n",
       "      <td>920.0</td>\n",
       "      <td>679.0</td>\n",
       "      <td>480.0</td>\n",
       "      <td>6700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Subtotal Pricks</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>170.0</td>\n",
       "      <td>268.0</td>\n",
       "      <td>684.0</td>\n",
       "      <td>570.0</td>\n",
       "      <td>1260.0</td>\n",
       "      <td>684.0</td>\n",
       "      <td>985.0</td>\n",
       "      <td>920.0</td>\n",
       "      <td>679.0</td>\n",
       "      <td>480.0</td>\n",
       "      <td>6700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td># of Intradermal Tests not related to Food</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>170.0</td>\n",
       "      <td>268.0</td>\n",
       "      <td>684.0</td>\n",
       "      <td>570.0</td>\n",
       "      <td>1254.0</td>\n",
       "      <td>684.0</td>\n",
       "      <td>876.0</td>\n",
       "      <td>874.0</td>\n",
       "      <td>646.0</td>\n",
       "      <td>456.0</td>\n",
       "      <td>6482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Subtotal Sticks</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>170.0</td>\n",
       "      <td>268.0</td>\n",
       "      <td>684.0</td>\n",
       "      <td>570.0</td>\n",
       "      <td>1254.0</td>\n",
       "      <td>684.0</td>\n",
       "      <td>876.0</td>\n",
       "      <td>874.0</td>\n",
       "      <td>646.0</td>\n",
       "      <td>456.0</td>\n",
       "      <td>6482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td># SCIT Vials Mixed for New Patients</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td># SLIT Vials Mixed for New Patients</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Total New Patients w Vials Mixed</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td># of Total SCIT Vials Mixed</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td># of Total SLIT Vials Mixed</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>251</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Total Vials Mixed</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td># of Injections</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>117.0</td>\n",
       "      <td>138.0</td>\n",
       "      <td>125.0</td>\n",
       "      <td>143.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>792</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td># of New Patients on SCIT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td># of New Patients on SLIT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td># of New Patients on Unknown</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Total New Patients</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Total Active Patients on SCIT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Total Active Patients on SLIT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Total Active Patients on Unknown</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>101.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>2445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Subtotal Patients</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>110.0</td>\n",
       "      <td>112.0</td>\n",
       "      <td>119.0</td>\n",
       "      <td>127.0</td>\n",
       "      <td>139.0</td>\n",
       "      <td>146.0</td>\n",
       "      <td>156.0</td>\n",
       "      <td>163.0</td>\n",
       "      <td>171.0</td>\n",
       "      <td>174.0</td>\n",
       "      <td>3607</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td># of Errors</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>134</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                           index  March  April    May   June  \\\n",
       "0                                Testing Charges    0.0    0.0    0.0    0.0   \n",
       "1                             Spirometry Charges    0.0    0.0    0.0    0.0   \n",
       "2                            SCIT Mixing Charges    0.0    0.0    0.0    0.0   \n",
       "3                         SCIT Injection Charges    0.0    0.0    0.0    0.0   \n",
       "4                              SLIT Vial Charges    0.0    0.0    0.0    0.0   \n",
       "5                          Total Allergy Charges    0.0    0.0    0.0    0.0   \n",
       "6                        Total Allergy Collected    0.0    0.0    0.0    0.0   \n",
       "7                          Allergy Cost of Goods    0.0    0.0    0.0    0.0   \n",
       "8                           Allergy Gross Profit    0.0    0.0    0.0    0.0   \n",
       "9   Total Clinic Revenue (INCLUDES ALL ENT REV.)    0.0    0.0    0.0    0.0   \n",
       "10                         # of Spirometry Tests    0.0    0.0    0.0    0.0   \n",
       "11                           Patient Tests - MQT    0.0    0.0    4.0    8.0   \n",
       "12                        Subtotal Patient Tests    NaN    NaN    4.0    8.0   \n",
       "13                           Allergy Tests - MQT    NaN    NaN    4.0    8.0   \n",
       "14                        Subtotal Allergy Tests    NaN    NaN    4.0    8.0   \n",
       "15               # of Pricks not related to Food    NaN    NaN  170.0  268.0   \n",
       "16                               Subtotal Pricks    NaN    NaN  170.0  268.0   \n",
       "17    # of Intradermal Tests not related to Food    NaN    NaN  170.0  268.0   \n",
       "18                               Subtotal Sticks    NaN    NaN  170.0  268.0   \n",
       "19           # SCIT Vials Mixed for New Patients    NaN    NaN    1.0    1.0   \n",
       "20           # SLIT Vials Mixed for New Patients    NaN    NaN    1.0    3.0   \n",
       "21              Total New Patients w Vials Mixed    NaN    NaN    2.0    4.0   \n",
       "22                   # of Total SCIT Vials Mixed    NaN    NaN    0.0    5.0   \n",
       "23                   # of Total SLIT Vials Mixed    NaN    NaN    2.0   24.0   \n",
       "24                             Total Vials Mixed    NaN    NaN    2.0   29.0   \n",
       "25                               # of Injections    NaN    NaN    2.0    8.0   \n",
       "26                     # of New Patients on SCIT    NaN    NaN    0.0    2.0   \n",
       "27                     # of New Patients on SLIT    NaN    NaN    2.0    1.0   \n",
       "28                  # of New Patients on Unknown    NaN    NaN    0.0    0.0   \n",
       "29                            Total New Patients    NaN    NaN    2.0    3.0   \n",
       "30                 Total Active Patients on SCIT    NaN    NaN    3.0    4.0   \n",
       "31                 Total Active Patients on SLIT    NaN    NaN    6.0    7.0   \n",
       "32              Total Active Patients on Unknown    NaN    NaN  101.0  101.0   \n",
       "33                             Subtotal Patients    NaN    NaN  110.0  112.0   \n",
       "34                                   # of Errors    NaN    NaN    1.0    7.0   \n",
       "\n",
       "     July  August  September  October  November  December  January  February  \\\n",
       "0     0.0     0.0        0.0      0.0       0.0       0.0      0.0       0.0   \n",
       "1     0.0     0.0        0.0      0.0       0.0       0.0      0.0       0.0   \n",
       "2     0.0     0.0        0.0      0.0       0.0       0.0      0.0       0.0   \n",
       "3     0.0     0.0        0.0      0.0       0.0       0.0      0.0       0.0   \n",
       "4     0.0     0.0        0.0      0.0       0.0       0.0      0.0       0.0   \n",
       "5     0.0     0.0        0.0      0.0       0.0       0.0      0.0       0.0   \n",
       "6     0.0     0.0        0.0      0.0       0.0       0.0      0.0       0.0   \n",
       "7     0.0     0.0        0.0      0.0       0.0       0.0      0.0       0.0   \n",
       "8     0.0     0.0        0.0      0.0       0.0       0.0      0.0       0.0   \n",
       "9     0.0     0.0        0.0      0.0       0.0       0.0      0.0       0.0   \n",
       "10    0.0     0.0        0.0      0.0       0.0       0.0      0.0       0.0   \n",
       "11   18.0    15.0       32.0     18.0      25.0      23.0     17.0      12.0   \n",
       "12   18.0    15.0       32.0     18.0      25.0      23.0     17.0      12.0   \n",
       "13   18.0    15.0       32.0     18.0      25.0      23.0     17.0      12.0   \n",
       "14   18.0    15.0       32.0     18.0      25.0      23.0     17.0      12.0   \n",
       "15  684.0   570.0     1260.0    684.0     985.0     920.0    679.0     480.0   \n",
       "16  684.0   570.0     1260.0    684.0     985.0     920.0    679.0     480.0   \n",
       "17  684.0   570.0     1254.0    684.0     876.0     874.0    646.0     456.0   \n",
       "18  684.0   570.0     1254.0    684.0     876.0     874.0    646.0     456.0   \n",
       "19    8.0     5.0        9.0      1.0       2.0       1.0      3.0       1.0   \n",
       "20    6.0     3.0        2.0      3.0      10.0       4.0      3.0       0.0   \n",
       "21   14.0     8.0       11.0      4.0      12.0       5.0      6.0       1.0   \n",
       "22   11.0    11.0       17.0     11.0      17.0      10.0     17.0      14.0   \n",
       "23   28.0    28.0       24.0     10.0      63.0      27.0     24.0      21.0   \n",
       "24   39.0    39.0       41.0     21.0      80.0      37.0     41.0      35.0   \n",
       "25   13.0    42.0       80.0    117.0     138.0     125.0    143.0     124.0   \n",
       "26    3.0     7.0        7.0      5.0       2.0       0.0      4.0       1.0   \n",
       "27    4.0     3.0        6.0      2.0       8.0       7.0      4.0       1.0   \n",
       "28    0.0     0.0        0.0      0.0       0.0       0.0      0.0       1.0   \n",
       "29    7.0    10.0       13.0      7.0      10.0       7.0      8.0       3.0   \n",
       "30    7.0    12.0       18.0     23.0      25.0      25.0     29.0      30.0   \n",
       "31   11.0    14.0       20.0     22.0      30.0      37.0     41.0      42.0   \n",
       "32  101.0   101.0      101.0    101.0     101.0     101.0    101.0     102.0   \n",
       "33  119.0   127.0      139.0    146.0     156.0     163.0    171.0     174.0   \n",
       "34   10.0     8.0       23.0     17.0      21.0      20.0     11.0      16.0   \n",
       "\n",
       "            Total  \n",
       "0     =sum(C2:N2)  \n",
       "1     =sum(C3:N3)  \n",
       "2     =sum(C4:N4)  \n",
       "3     =sum(C5:N5)  \n",
       "4     =sum(C6:N6)  \n",
       "5     =sum(C7:N7)  \n",
       "6     =sum(C8:N8)  \n",
       "7     =sum(C9:N9)  \n",
       "8   =sum(C10:N10)  \n",
       "9   =sum(C11:N11)  \n",
       "10  =sum(C12:N12)  \n",
       "11            172  \n",
       "12            172  \n",
       "13            172  \n",
       "14            172  \n",
       "15           6700  \n",
       "16           6700  \n",
       "17           6482  \n",
       "18           6482  \n",
       "19             32  \n",
       "20             35  \n",
       "21             67  \n",
       "22            113  \n",
       "23            251  \n",
       "24            364  \n",
       "25            792  \n",
       "26             31  \n",
       "27             38  \n",
       "28              1  \n",
       "29             70  \n",
       "30            488  \n",
       "31            674  \n",
       "32           2445  \n",
       "33           3607  \n",
       "34            134  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "charge_columns\n",
    "patients_pricks_injections_Vials_treatment_total_months\n",
    "#patients_pricks_injections_Vials_treatment_total\n",
    "#patients_pricks_injections_Vials_treatment\n",
    "#total_errors_pivot\n",
    "#total_errors\n",
    "#month_number_test = 10\n",
    "#update_missing_months\n",
    "#missing_error_months\n",
    "#total_tests_no_dups\n",
    "#tp2\n",
    "output_df = charge_columns.append(patients_pricks_injections_Vials_treatment_total_months).append(total_errors_pivot, ignore_index=True)\n",
    "#output_df = pd.concat([charge_columns, patients_pricks_injections_Vials_treatment_total_months, total_errors_pivot], ignore_index=True)\n",
    "output_df = output_df[charge_columns.columns]\n",
    "output_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>March</th>\n",
       "      <th>April</th>\n",
       "      <th>May</th>\n",
       "      <th>June</th>\n",
       "      <th>July</th>\n",
       "      <th>August</th>\n",
       "      <th>September</th>\n",
       "      <th>October</th>\n",
       "      <th>November</th>\n",
       "      <th>December</th>\n",
       "      <th>January</th>\n",
       "      <th>February</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Allergy Charges Per Physician</td>\n",
       "      <td>=C7/D38</td>\n",
       "      <td>=D7/E38</td>\n",
       "      <td>=E7/F38</td>\n",
       "      <td>=F7/G38</td>\n",
       "      <td>=G7/H38</td>\n",
       "      <td>=H7/I38</td>\n",
       "      <td>=I7/J38</td>\n",
       "      <td>=J7/K38</td>\n",
       "      <td>=K7/L38</td>\n",
       "      <td>=L7/M38</td>\n",
       "      <td>=M7/N38</td>\n",
       "      <td>=N7/O38</td>\n",
       "      <td>=O7/O38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Allergy Charges Per Tech</td>\n",
       "      <td>=C7/D37</td>\n",
       "      <td>=D7/E37</td>\n",
       "      <td>=E7/F37</td>\n",
       "      <td>=F7/G37</td>\n",
       "      <td>=G7/H37</td>\n",
       "      <td>=H7/I37</td>\n",
       "      <td>=I7/J37</td>\n",
       "      <td>=J7/K37</td>\n",
       "      <td>=K7/L37</td>\n",
       "      <td>=L7/M37</td>\n",
       "      <td>=M7/N37</td>\n",
       "      <td>=N7/O37</td>\n",
       "      <td>=O7/O37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Allergy Charges Per Room</td>\n",
       "      <td>=C7/D35</td>\n",
       "      <td>=D7/E35</td>\n",
       "      <td>=E7/F35</td>\n",
       "      <td>=F7/G35</td>\n",
       "      <td>=G7/H35</td>\n",
       "      <td>=H7/I35</td>\n",
       "      <td>=I7/J35</td>\n",
       "      <td>=J7/K35</td>\n",
       "      <td>=K7/L35</td>\n",
       "      <td>=L7/M35</td>\n",
       "      <td>=M7/N35</td>\n",
       "      <td>=N7/O35</td>\n",
       "      <td>=O7/O35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Allergy Revenue % of Total Clinc Revenue</td>\n",
       "      <td>=C7/C11</td>\n",
       "      <td>=D7/D11</td>\n",
       "      <td>=E7/E11</td>\n",
       "      <td>=F7/F11</td>\n",
       "      <td>=G7/G11</td>\n",
       "      <td>=H7/H11</td>\n",
       "      <td>=I7/I11</td>\n",
       "      <td>=J7/J11</td>\n",
       "      <td>=K7/K11</td>\n",
       "      <td>=L7/L11</td>\n",
       "      <td>=M7/M11</td>\n",
       "      <td>=N7/N11</td>\n",
       "      <td>=O7/O11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Allergy Revenue % of Charges</td>\n",
       "      <td>=C8/C7</td>\n",
       "      <td>=D8/D7</td>\n",
       "      <td>=E8/E7</td>\n",
       "      <td>=F8/F7</td>\n",
       "      <td>=G8/G7</td>\n",
       "      <td>=H8/H7</td>\n",
       "      <td>=I8/I7</td>\n",
       "      <td>=J8/J7</td>\n",
       "      <td>=K8/K7</td>\n",
       "      <td>=L8/L7</td>\n",
       "      <td>=M8/M7</td>\n",
       "      <td>=N8/N7</td>\n",
       "      <td>=O8/O7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Allergy Gross Profit %</td>\n",
       "      <td>=C10/C8</td>\n",
       "      <td>=D10/D8</td>\n",
       "      <td>=E10/E8</td>\n",
       "      <td>=F10/F8</td>\n",
       "      <td>=G10/G8</td>\n",
       "      <td>=H10/H8</td>\n",
       "      <td>=I10/I8</td>\n",
       "      <td>=J10/J8</td>\n",
       "      <td>=K10/K8</td>\n",
       "      <td>=L10/L8</td>\n",
       "      <td>=M10/M8</td>\n",
       "      <td>=N10/N8</td>\n",
       "      <td>=O10/O8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                      index    March    April      May  \\\n",
       "0             Allergy Charges Per Physician  =C7/D38  =D7/E38  =E7/F38   \n",
       "1                  Allergy Charges Per Tech  =C7/D37  =D7/E37  =E7/F37   \n",
       "2                  Allergy Charges Per Room  =C7/D35  =D7/E35  =E7/F35   \n",
       "3  Allergy Revenue % of Total Clinc Revenue  =C7/C11  =D7/D11  =E7/E11   \n",
       "4              Allergy Revenue % of Charges   =C8/C7   =D8/D7   =E8/E7   \n",
       "5                    Allergy Gross Profit %  =C10/C8  =D10/D8  =E10/E8   \n",
       "\n",
       "      June     July   August September  October November December  January  \\\n",
       "0  =F7/G38  =G7/H38  =H7/I38   =I7/J38  =J7/K38  =K7/L38  =L7/M38  =M7/N38   \n",
       "1  =F7/G37  =G7/H37  =H7/I37   =I7/J37  =J7/K37  =K7/L37  =L7/M37  =M7/N37   \n",
       "2  =F7/G35  =G7/H35  =H7/I35   =I7/J35  =J7/K35  =K7/L35  =L7/M35  =M7/N35   \n",
       "3  =F7/F11  =G7/G11  =H7/H11   =I7/I11  =J7/J11  =K7/K11  =L7/L11  =M7/M11   \n",
       "4   =F8/F7   =G8/G7   =H8/H7    =I8/I7   =J8/J7   =K8/K7   =L8/L7   =M8/M7   \n",
       "5  =F10/F8  =G10/G8  =H10/H8   =I10/I8  =J10/J8  =K10/K8  =L10/L8  =M10/M8   \n",
       "\n",
       "  February    Total  \n",
       "0  =N7/O38  =O7/O38  \n",
       "1  =N7/O37  =O7/O37  \n",
       "2  =N7/O35  =O7/O35  \n",
       "3  =N7/N11  =O7/O11  \n",
       "4   =N8/N7   =O8/O7  \n",
       "5  =N10/N8  =O10/O8  "
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "revenue_stats_months = pd.DataFrame({'merge' : [1,2,3,4,5,6]})\n",
    "#for i, m in enumerate(calendar.month_name[1:]):\n",
    "for i in range(1,len(charge_columns.columns) - 1):\n",
    "    month_name = ''.join(charge_columns.columns.values[i:i+1])\n",
    "    last_date = calendar.monthrange(year,i)[1]\n",
    "#    month_name = m.capitalize()\n",
    "    l = string.ascii_uppercase[i + 1:i + 2]\n",
    "#        if PED >= datetime.datetime(year, i + 1, last_date, 0, 0, 0).strftime('%Y-%m-%d %H:%M:%S'):\n",
    "    revenue_stats_new = pd.DataFrame({'%s' % (month_name) :['=%s7/%s' % (l,xl_rowcol_to_cell((len(output_df.index) + 2 + len(practice_locations.index)), i + 2)),\n",
    "                                   '=%s7/%s' % (l,xl_rowcol_to_cell((len(output_df.index) + 1 + len(practice_locations.index)), i + 2)),\n",
    "                                   '=%s7/%s' % (l,xl_rowcol_to_cell((len(output_df.index) - 1 + len(practice_locations.index)), i + 2)),\n",
    "                                   '=%s7/%s11' % (l, l),\n",
    "                                   '=%s8/%s7' % (l, l),\n",
    "                                   '=%s10/%s8' % (l, l)],\n",
    "                                   'merge': [1,2,3,4,5,6]})\n",
    "    revenue_stats_new = revenue_stats_new[['%s'  % (month_name), 'merge']]\n",
    "    revenue_stats_months = revenue_stats_months.merge(revenue_stats_new, on='merge', how='left')\n",
    "revenue_stats_index = pd.DataFrame({'index': ['Allergy Charges Per Physician',\n",
    "                                'Allergy Charges Per Tech',\n",
    "                                'Allergy Charges Per Room',\n",
    "                                'Allergy Revenue % of Total Clinc Revenue',\n",
    "                                'Allergy Revenue % of Charges',\n",
    "                                'Allergy Gross Profit %'], \n",
    "                                'merge': [1,2,3,4,5,6]})\n",
    "revenue_stats_total = pd.DataFrame({'Total' : ['=%s/%s' % (xl_rowcol_to_cell(6, (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(output_df.index) + 2 + len(practice_locations.index)), (len(output_df.columns) - 1))),\n",
    "                                                   '=%s/%s' % (xl_rowcol_to_cell(6, (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(output_df.index) + 1 + len(practice_locations.index)), (len(output_df.columns) - 1))),\n",
    "                                                   '=%s/%s' % (xl_rowcol_to_cell(6, (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(output_df.index) - 1 + len(practice_locations.index)), (len(output_df.columns) - 1))),\n",
    "                                                   '=%s/%s' % (xl_rowcol_to_cell(6, (len(output_df.columns) - 1)), xl_rowcol_to_cell(10, (len(output_df.columns) - 1))),\n",
    "                                                   '=%s/%s' % (xl_rowcol_to_cell(7, (len(output_df.columns) - 1)), xl_rowcol_to_cell(6, (len(output_df.columns) - 1))),\n",
    "                                                   '=%s/%s' % (xl_rowcol_to_cell(9, (len(output_df.columns) - 1)), xl_rowcol_to_cell(7, (len(output_df.columns) - 1)))\n",
    "                                              ],\n",
    "                                          'merge': [1,2,3,4,5,6]})\n",
    "revenue_stats = revenue_stats_index.merge(revenue_stats_months, on='merge', how='left').merge(revenue_stats_total, on='merge', how='left')\n",
    "revenue_stats.drop('merge', inplace=True, axis=1)\n",
    "revenue_stats\n",
    "#revenue_stats = charge_columns.columns[1:-1].tolist()\n",
    "#revenue_stats\n",
    "#for i in range(1,len(charge_columns.columns) - 1):\n",
    "#    month_name = charge_columns.columns[i:i+1].get_values().tolist()\n",
    "#month_name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import calendar\n",
    "import datetime\n",
    "import numpy as np\n",
    "import string\n",
    "import matplotlib as mt\n",
    "import matplotlib.pyplot as plt\n",
    "from xlsxwriter.utility import xl_rowcol_to_cell\n",
    "import pymysql\n",
    "myconnection = pymysql.connect( host='127.0.0.1', user='eallan', passwd='', db='main' )\n",
    "cursor = myconnection.cursor()\n",
    "practice_id = 52\n",
    "PSD = '2015-09-01 00:00:00'\n",
    "PED = '2017-08-31 23:59:59'\n",
    "year = 2017"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "past_due_visits = pd.read_sql_query(\"SELECT a.id, b.allergy_id, b.firstname, b.lastname, concat_ws(' ', b.firstname, b.lastname) as patient_name, b.active, b.city, b.state, b.dob, b.shot_location, b.shot_offsite_id, h.practice_name, h.doctor_name as offsite_doctor_name, timestampdiff(YEAR, b.dob, now()) as age, b.gender, b.mix_practice_doctor_id, concat_ws(', ', g.lastname, g.firstname) AS doctor_name, a.patient_id, a.practice_id, i.name as practice_name, a.location_id, f.name as location_name, b.intake_method, a.date, a.prick_test, a.intra_test, a.vial_tests, a.shots, a.status, (if(b.shot_interval in ('1 weeks', '1 Weeks', 'weekly', '010 Weeks', '10 Weeks', 'Weeks', 'Weekly\\n', 'Weekly', '7 Days'), '1 week', (if(b.shot_interval in ('1 days', 'days', '1 Days', 'Days'), '1 day', (if(b.shot_interval in ('2 weeks', '2 week', '2 Weeks', '14 Days'), '2 week', (if(b.shot_interval in ('monthly', '1 months', '1 Months', '4 Weeks', 'Monthly'), '1 month', (if(b.shot_interval in ('twice weekly', 'Twice Weekly'), '4 day', (if(b.shot_interval in ('10 Days', '10 days'), '10 day', (if(b.shot_interval in ('3 Weeks'), '3 weeks', (if(b.shot_interval IS NULL OR b.shot_interval = '' OR b.shot_interval = 'None' OR b.shot_interval = 'N/a', 'Missing', 'Missing')))))))))))))))) as shot_interval, c.vial_id, d.barcode, d.maintenance, d.last_dosage, c.dose, IF(year(d.expiration_date) > (%(current_year)s + 1) OR year(d.expiration_date) < (%(current_year)s + 100), date_add(a.date, INTERVAL 1 YEAR), d.expiration_date) as expiration_date , d.test_required, d.test_id, d.status_id, e.status as vial_status_name, (IF(b.shot_interval in ('1 weeks', '1 Weeks', 'weekly', '010 Weeks', '10 Weeks', 'Weeks', 'Weekly\\n', 'Weekly', '7 Days'), date_add(a.date, INTERVAL 1 week), (if(b.shot_interval in ('1 days', 'days', '1 Days', 'Days'), date_add(a.date, INTERVAL 1 day), (if(b.shot_interval in ('2 weeks', '2 week', '2 Weeks', '14 Days'), date_add(a.date, INTERVAL 2 week), (if(b.shot_interval in ('1 months', 'monthly', '1 Months', '4 Weeks', 'Monthly'), date_add(a.date, INTERVAL 1 month), (if(b.shot_interval in ('twice weekly', 'Twice Weekly'), date_add(a.date, INTERVAL 4 day), (if(b.shot_interval in ('10 Days', '10 days'), date_add(a.date, INTERVAL 10 day), (if(b.shot_interval in ('3 Weeks'), date_add(a.date, INTERVAL 3 week), date_add(a.date, INTERVAL 14 day))))))))))))))) as past_due_Date FROM patient_visits a LEFT JOIN patients b on a.patient_id = b.id LEFT JOIN patient_visits_shots c ON a.id = c.visit_id LEFT JOIN vials d on c.vial_id = d.id LEFT JOIN vial_statuses e on d.status_id = e.id LEFT JOIN practice_locations f on a.location_id = f.id LEFT JOIN practice_doctors g ON b.mix_practice_doctor_id = g.id LEFT JOIN user_added_doctors h ON b.shot_offsite_id = h.id left join practices i on a.practice_id = i.id WHERE /*a.practice_id = 13 and d.mix_practice_id = 13 and*/ a.status <> 'removed' AND b.dob is not null and year(b.dob) > 1900 and a.date > '2015-10-23 00:00:00' order BY a.patient_id, a.date\", myconnection, params={'current_year':year})\n",
    "per_patient_past_date = past_due_visits.sort_values(['patient_id', 'past_due_Date'], ascending=False).groupby('patient_id', as_index=False).first()\n",
    "per_patient_past_date\n",
    "last_visit_date = per_patient_past_date[['patient_id', 'past_due_Date']].sort_values(['patient_id', 'past_due_Date'], ascending=False).groupby('patient_id', as_index=False).first()\n",
    "last_visit_date.rename(columns = {'past_due_Date':'next_treatment_date'}, inplace = True)\n",
    "last_visit_date\n",
    "first_treatment_date_needed = past_due_visits.sort_values(['patient_id', 'date'], ascending=True).groupby('patient_id', as_index=False).first()\n",
    "first_treatment_date = first_treatment_date_needed[['patient_id', 'date']].sort_values(['patient_id', 'date'], ascending=True).groupby('patient_id', as_index=False).first()\n",
    "first_treatment_date.rename(columns = {'date':'first_treatment_date'}, inplace = True)\n",
    "last_treatment_date_needed = past_due_visits.sort_values(['patient_id', 'date'], ascending=True).groupby('patient_id', as_index=False).last()\n",
    "last_treatment_date = last_treatment_date_needed[['patient_id', 'date']].sort_values(['patient_id', 'date'], ascending=True).groupby('patient_id', as_index=False).last()\n",
    "last_treatment_date.rename(columns = {'date':'last_treatment_date'}, inplace = True)\n",
    "first_and_last_treatment_dates = pd.merge(first_treatment_date, last_treatment_date, on=['patient_id'], how='left')\n",
    "first_and_past_due_dates = pd.merge(last_visit_date, first_and_last_treatment_dates, on=['patient_id'], how='left')\n",
    "past_max_visit = pd.merge(per_patient_past_date, first_and_past_due_dates, on=['patient_id'], how='left')\n",
    "past_max_visit.fillna(value=('Missing'))\n",
    "past_max_visit['Visit_Needed'] = np.where(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S') > (pd.to_datetime(past_max_visit['next_treatment_date'])), 'Y', 'N' )\n",
    "past_max_visit['current'] = pd.to_datetime(datetime.datetime.now())\n",
    "Patients_dropped_off = past_max_visit.sort_values(['patient_id', 'past_due_Date'], ascending=False).groupby('patient_id', as_index=False).first()\n",
    "Patients_dropped_off['weeks_on_treatment'] = (Patients_dropped_off['date'] - Patients_dropped_off['first_treatment_date']).astype('timedelta64[W]')\n",
    "Patients_dropped_off['weeks_since_last_treatment'] = (Patients_dropped_off['current'] - Patients_dropped_off['next_treatment_date']).astype('timedelta64[W]')\n",
    "Patients_dropped_off['Date of Next Needed Visit'] = Patients_dropped_off['next_treatment_date'].dt.strftime('%Y-%m')\n",
    "#writer = pd.ExcelWriter(\"Patients Dropped off of Treatment CEENTA Detail V2.xlsx\", engine='xlsxwriter')\n",
    "#Patients_dropped_off.to_excel(writer, index=False, sheet_name=\"Sheet1\")\n",
    "#past_due_visits.to_excel(writer, index=False, sheet_name=\"Sheet2\")\n",
    "#writer.save()\n",
    "Patients_dropped_off = Patients_dropped_off[['patient_id', 'firstname', 'lastname', 'shot_location', 'shot_offsite_id', 'offsite_doctor_name', 'first_treatment_date', 'last_treatment_date', 'next_treatment_date', 'Visit_Needed', 'weeks_on_treatment', 'weeks_since_last_treatment', 'shot_interval', 'mix_practice_doctor_id', 'doctor_name', 'practice_id', 'practice_name', 'location_id', 'location_name', 'intake_method', 'age', 'gender', 'city', 'state', 'dob', 'maintenance', 'last_dosage', 'expiration_date', 'vial_status_name', 'past_due_Date', 'Date of Next Needed Visit']]\n",
    "Patients_dropped_off.to_excel('Patient Attrition Updated 10.23.17.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "query = '''SELECT a.patient_id, max(a.mix_date) AS new_vial_mix_date, b.last_treatment_date, c.shot_location, c.mix_location_id, c.shot_location_id, c.mix_practice_doctor_id, c.practice_id, d.name\n",
    "FROM vials a\n",
    "  LEFT JOIN (select patient_id AS shot_patient_id, max(date) AS last_treatment_date FROM patient_visits_shots WHERE patient_id IS NOT NULL GROUP BY shot_patient_id) as b ON a.patient_id = b.shot_patient_id\n",
    "  LEFT JOIN patients c ON a.patient_id = c.id\n",
    "  LEFT JOIN practices d ON c.practice_id = d.id\n",
    "WHERE mixed = 1 AND status_id != 2 AND b.last_treatment_date IS NOT NULL\n",
    "GROUP BY a.patient_id'''\n",
    "at_home_shots = pd.read_sql_query(query, myconnection)\n",
    "at_home_shots.to_excel('At Home Treatment.xlsx')\n",
    "at_home_shots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "current_locations = pd.read_sql_query(\"SELECT pl.name AS location_name, p.name AS practice_name, pl.active FROM practice_locations pl LEFT JOIN practices p ON pl.practice_id = p.id WHERE p.name IS NOT NULL and pl.active = 1\", myconnection)\n",
    "#current_locations.to_excel('Active Locations as of %s.xlsx' % (month))\n",
    "current_locations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#V2_reports_being_used = pd.read_sql_query(\"SELECT count(a.id) as total_reports_ran, c.name as practice_name, d.name as location_name, concat_ws(' ', b.firstname, b.lastname) as user_name, a.timestamp, substr(a.post,8,(locate('&', a.post) - locate('=', a.post) - 1)) as report_ran FROM activity_log a LEFT JOIN users b ON a.user_id = b.id LEFT JOIN practices c ON a.practice_id = c.id LEFT JOIN practice_locations d ON a.location_id = d.id where ucase(post) LIKE '%REPORT=%' AND a.practice_id <> 9 and url = '/reports/index/get' GROUP BY concat_ws(' ', b.firstname, b.lastname), substr(a.post,8,(locate('&', a.post) - locate('=', a.post) - 1)), d.name\", myconnection)\n",
    "#V2_reports_being_used.to_excel(\"Reports Activty Report.xlsx\")\n",
    "antigen_inventory_v2 = pd.read_sql_query(\"SELECT a.*, b.name, c.status, d.name as supplier_name, e.size, concat_ws(' ', u.firstname, u.lastname) as received_by_person FROM antigen_inventory a LEFT JOIN antigen_inventory_names b on a.id = b.inventory_id LEFT JOIN antigen_inventory_statuses c ON a.status_id = c.id LEFT JOIN suppliers d on a.supplier_id = d.id LEFT JOIN antigen_vial_sizes e ON a.vial_size_id = e.id LEFT JOIN users u ON a.receiver_id = u.id where a.practice_id = 13 and a.received_date < '2017-07-17 00:00:00' order by a.received_date\", myconnection)\n",
    "#antigen_inventory_v2['received_date'] = pd.to_datetime(antigen_inventory_v2['received_date'])\n",
    "antigen_inventory_v2['received_date'] = antigen_inventory_v2['received_date'].dt.strftime('%Y-%m-%d')\n",
    "antigen_inventory_v2['received_by'].fillna('Missing', inplace=True)\n",
    "antigen_inventory_v1 = pd.read_csv(\"C:/Users/eallan/Downloads/Antigen_Inventory(3).csv\")\n",
    "antigen_inventory_v1['Received_Date'] = pd.to_datetime(antigen_inventory_v1['Received_Date'])\n",
    "antigen_inventory_v1['Received_Date'] = antigen_inventory_v1['Received_Date'].dt.strftime('%Y-%m-%d')\n",
    "difference_in_antigen_inventory = pd.merge(antigen_inventory_v2, antigen_inventory_v1, how='outer', left_on=['lot', 'received_date'], right_on=['Lot_Number', 'Received_Date'])\n",
    "difference_in_antigen_inventory\n",
    "#difference_in_antigen_inventory['received_date'] = pd.to_datetime(difference_in_antigen_inventory['received_date'])\n",
    "#difference_in_antigen_inventory['Received_Date'] = pd.to_datetime(difference_in_antigen_inventory['Received_Date'])\n",
    "total_differences_inventory = difference_in_antigen_inventory[(difference_in_antigen_inventory['received_date'] != difference_in_antigen_inventory['Received_Date']) | (difference_in_antigen_inventory['size'] != difference_in_antigen_inventory['Vial_Size']) | (difference_in_antigen_inventory['name'] != difference_in_antigen_inventory['Full_Name']) | (difference_in_antigen_inventory['received_by_person'] != difference_in_antigen_inventory['Received_By'])]\n",
    "total_differences_inventory.to_excel('Conversion Comparison Test V2.xlsx')\n",
    "total_differences_inventory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "reaction_to_each_antigen_intra = pd.read_sql_query(\"SELECT q.patient_id, q.status, q.test_date, q.dilution, q.left_wheal, q.right_wheal, q.antigen_id, q.antigen_tested, q.end_point, q.name, q.label_abbreviation, q.title FROM (SELECT a.id, a.patient_id, a.status, a.practice_id, a.test_date, b.dilution, substring_index(trim('m' FROM trim('.' FROM if(trim(b.wheal_size) = '', '0', ucase(b.wheal_size)))), 'X', 1) AS left_wheal, substring_index(trim('M' FROM trim('.' FROM if(trim(b.wheal_size) = '', '0', ucase(b.wheal_size)))), 'X', -1) AS right_wheal, b.antigen_id, c.antigen_id AS antigen_tested, c.end_point, d.name, d.label_abbreviation, d.title from intradermal_tests a LEFT JOIN intradermal_test_results b ON a.id=b.test_id LEFT JOIN intradermal_test_antigens c ON b.antigen_id = c.id LEFT JOIN antigens d on c.antigen_id = d.id WHERE a.practice_id = %(practice_ID)s and a.test_date BETWEEN %(PSD)s and %(PED)s AND a.status = 'complete' ORDER BY a.patient_id, a.test_date, c.antigen_id, b.dilution ASC) q GROUP BY q.patient_id, q.test_date, q.antigen_tested\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "#reaction_to_each_antigen_intra.dtypes\n",
    "#reaction_to_each_antigen_intra.left_wheal.fillna('0', inplace=True)\n",
    "#reaction_to_each_antigen_intra.right_wheal.fillna('0', inplace=True)\n",
    "reaction_to_each_antigen_intra['wheal_size'] = reaction_to_each_antigen_intra[['left_wheal', 'right_wheal']].max(axis=1)\n",
    "reaction_to_each_antigen_intra['wheal_size'].astype(int)\n",
    "#reaction_to_each_antigen_intra.to_excel('wheal size test.xlsx')\n",
    "reaction_to_each_antigen_intra\n",
    "control_to_reactions = pd.read_sql_query(\"SELECT DISTINCT q.patient_id, q.wheal_size, q.antigen_tested, q.name, q.title FROM (SELECT a.id, a.patient_id, a.practice_id, a.location_id, a.user_id, a.test_date, a.status, b.wheal_size, b.antigen_id, c.antigen_id AS antigen_tested, c.end_point, d.name, d.label_abbreviation, d.title from intradermal_tests a LEFT JOIN intradermal_test_results b ON a.id=b.test_id LEFT JOIN intradermal_test_antigens c ON b.antigen_id = c.id LEFT JOIN antigens d on c.antigen_id = d.id WHERE a.practice_id = %(practice_ID)s and a.test_date BETWEEN %(PSD)s and %(PED)s) q where ucase(q.name) LIKE %(his)s OR ucase(q.name) LIKE %(hys)s OR ucase(q.name) LIKE %(gly)s OR ucase(q.name) LIKE %(gli)s OR ucase(q.name) LIKE %(sal)s OR ucase(q.title) LIKE %(sal)s\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id, \"his\":'HIS%', \"hys\":'HYS%', \"gly\":'GLY%', \"gli\":'GLI%', \"sal\":'%SALI%'})\n",
    "control_to_reactions\n",
    "per_person_controls = pd.pivot_table(control_to_reactions, index=['patient_id'], values=['wheal_size'], columns=['name'], aggfunc='max', fill_value= 0)\n",
    "per_person_controls.reset_index(inplace=True)\n",
    "per_person_controls.columns = per_person_controls.columns.droplevel(0)\n",
    "per_person_controls.rename(columns={'': 'patient_id'}, inplace=True)\n",
    "per_person_controls['Glycerine'] = per_person_controls[['Glycerine']].astype(int)\n",
    "patients_with_pos_reactions = reaction_to_each_antigen_intra.merge(per_person_controls, on='patient_id')\n",
    "patients_with_pos_reactions['positive_reaction'] = patients_with_pos_reactions['wheal_size'] - patients_with_pos_reactions['Glycerine']\n",
    "patients_with_pos_reactions['positive_reaction'].astype(int)\n",
    "#patients_with_pos_reactions.to_excel('Patient Reaction Tests.xlsx')\n",
    "patients_with_pos_reactions_only = patients_with_pos_reactions[patients_with_pos_reactions['positive_reaction'] > 3]\n",
    "patients_with_pos_reactions_only\n",
    "patients_not_converted = pd.read_sql_query(\"SELECT DISTINCT q.patient as Patients_Tested, q.test_date as month_year, z.intake_method, q.Name as location_name FROM ((select distinct(a.patient_id) as patient, a.Test_Date as test_date, a.location_ID, d.Name, a.practice_id, i.name as Practice_name from intradermal_tests a INNER JOIN practice_locations d ON a.Location_ID = d.id INNER JOIN practices i on a.practice_id = i.id where a.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (a.Status IS NULL OR a.Status <> 'deleted')) UNION (select distinct(b.patient_id) as patient, b.Test_Date as test_date, b.location_id, e.Name, b.practice_id, i.name as Practice_name from mq_tests b INNER JOIN practice_locations e ON b.Location_ID = e.id INNER JOIN practices i on b.practice_id = i.id where b.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (b.Status IS NULL OR b.Status <> 'deleted')) UNION (select distinct(c.patient_id) as patient, c.Test_Date as test_date, c.location_id, f.Name, c.practice_id, i.name as Practice_name from prick_tests c INNER JOIN practice_locations f ON c.location_id = f.id INNER JOIN practices i on c.practice_id = i.id where c.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (c.Status IS NULL OR c.Status <> 'deleted')) UNION (select distinct(g.patient_id) as patient, g.Start_Date as test_date, g.Start_Location_id AS Location_ID, h.name, g.start_practice_id, i.name as Practice_name from ige_tests g INNER JOIN practice_locations h ON g.start_practice_id = h.ID INNER JOIN practices i on g.start_practice_id = i.id where g.Start_Date BETWEEN %(PSD)s AND %(PED)s AND (g.Status = 'Complete')) order by Location_ID) q LEFT JOIN (SELECT DISTINCT barcode, Patient_ID FROM vials WHERE (status_id <> 2 or status_id is not null) and is_child <> 1 AND Mix_Date BETWEEN %(PSD)s AND %(PED)s) v ON q.patient = v.Patient_ID LEFT JOIN (SELECT id, intake_method FROM patients) z on q.patient = z.id where v.Patient_ID is null and practice_id = %(practice_ID)s\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "patients_not_converted_reactions = patients_with_pos_reactions.merge(patients_not_converted, how='inner', left_on='patient_id', right_on='Patients_Tested')\n",
    "patients_not_converted_reactions.to_excel('Patients with Intradermal Tests not converted.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "reaction_to_each_antigen_prick = pd.read_sql_query(\"SELECT q.patient_id, q.status, q.test_date, q.left_wheal, q.right_wheal, q.antigen_id, q.name FROM (SELECT a.id, a.patient_id, a.status, a.practice_id, a.test_date, a.template_id, substring_index(trim('M' FROM trim(',' FROM trim('+' FROM trim('N' FROM trim('T' FROM trim('-' FROM trim('A' FROM if(trim(b.wheal_size) = '', '0', ucase(b.wheal_size))))))))), 'X', 1) AS left_wheal, substring_index(trim('M' FROM trim(',' FROM trim('+' FROM trim('N' FROM trim('T' FROM trim('-' FROM trim('A' FROM if(trim(b.wheal_size) = '', '0', ucase(b.wheal_size))))))))), 'X', -1) AS right_wheal, c.antigen_id, d.name FROM prick_tests a LEFT JOIN prick_test_results b ON a.id = b.test_id LEFT JOIN prick_test_templates_antigens c ON (a.template_id=c.template_id AND b.antigen_id=c.antigen_id) LEFT JOIN prick_test_templates_antigens_names d ON c.id=d.antigen_id WHERE a.practice_id = %(practice_ID)s and a.test_date BETWEEN %(PSD)s and %(PED)s AND a.status = 'complete' ORDER BY a.patient_id, a.test_date, c.antigen_id) q GROUP BY q.patient_id, q.test_date, q.name\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "#, if(q.left_wheal > q.right_wheal, q.left_wheal, q.right_wheal) AS wheal_size\n",
    "reaction_to_each_antigen_prick['wheal_size'] = reaction_to_each_antigen_prick[['left_wheal', 'right_wheal']].max(axis=1)\n",
    "reaction_to_each_antigen_prick['wheal_size'].astype(int)\n",
    "reaction_to_each_antigen_prick\n",
    "control_to_reactions = pd.read_sql_query(\"SELECT DISTINCT q.patient_id, q.left_wheal, q.right_wheal, if(q.left_wheal > q.right_wheal, q.left_wheal, q.right_wheal) AS wheal_size, q.name FROM (SELECT a.id, a.patient_id, a.status, a.practice_id, a.test_date, a.template_id, substring_index(trim('M' FROM trim(',' FROM trim('+' FROM trim('N' FROM trim('T' FROM trim('-' FROM trim('A' FROM if(trim(b.wheal_size) = '', '0', ucase(b.wheal_size))))))))), 'X', 1) AS left_wheal, substring_index(trim('M' FROM trim(',' FROM trim('+' FROM trim('N' FROM trim('T' FROM trim('-' FROM trim('A' FROM if(trim(b.wheal_size) = '', '0', ucase(b.wheal_size))))))))), 'X', -1) AS right_wheal, c.antigen_id, d.name FROM prick_tests a LEFT JOIN prick_test_results b ON a.id = b.test_id LEFT JOIN prick_test_templates_antigens c ON (a.template_id=c.template_id AND b.antigen_id=c.antigen_id) LEFT JOIN prick_test_templates_antigens_names d ON c.id=d.antigen_id WHERE a.practice_id = %(practice_ID)s and a.test_date BETWEEN %(PSD)s and %(PED)s AND a.status = 'complete' ORDER BY a.patient_id, a.test_date, c.antigen_id) q where ucase(q.name) LIKE %(his)s OR ucase(q.name) LIKE %(hys)s OR ucase(q.name) LIKE %(gly)s OR ucase(q.name) LIKE %(gli)s OR ucase(q.name) LIKE %(sal)s OR ucase(q.name) LIKE %(sal)s\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id, \"his\":'HIS%', \"hys\":'%CO%', \"gly\":'%GLY%', \"gli\":'%GLI%', \"sal\":'%SALI%'})\n",
    "control_to_reactions\n",
    "per_person_controls = pd.pivot_table(control_to_reactions, index=['patient_id'], values=['wheal_size'], columns=['name'], aggfunc='max', fill_value= 0)\n",
    "per_person_controls.reset_index(inplace=True)\n",
    "per_person_controls.columns = per_person_controls.columns.droplevel(0)\n",
    "per_person_controls.rename(columns={'': 'patient_id'}, inplace=True)\n",
    "per_person_controls['Sterile Diluent Glycerine'] = per_person_controls[['Sterile Diluent Glycerine']].astype(int)\n",
    "per_person_controls\n",
    "patients_with_pos_reactions_prick = reaction_to_each_antigen_prick.merge(per_person_controls, on='patient_id')\n",
    "patients_with_pos_reactions_prick['positive_reaction'] = patients_with_pos_reactions_prick['wheal_size'] - patients_with_pos_reactions_prick['Sterile Diluent Glycerine']\n",
    "patients_with_pos_reactions_prick['positive_reaction'].astype(int)\n",
    "patients_with_pos_reactions_prick\n",
    "patients_not_converted = pd.read_sql_query(\"SELECT DISTINCT q.patient as Patients_Tested, q.test_date as month_year, z.intake_method, q.Name as location_name FROM ((select distinct(a.patient_id) as patient, a.Test_Date as test_date, a.location_ID, d.Name, a.practice_id, i.name as Practice_name from intradermal_tests a INNER JOIN practice_locations d ON a.Location_ID = d.id INNER JOIN practices i on a.practice_id = i.id where a.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (a.Status IS NULL OR a.Status <> 'deleted')) UNION (select distinct(b.patient_id) as patient, b.Test_Date as test_date, b.location_id, e.Name, b.practice_id, i.name as Practice_name from mq_tests b INNER JOIN practice_locations e ON b.Location_ID = e.id INNER JOIN practices i on b.practice_id = i.id where b.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (b.Status IS NULL OR b.Status <> 'deleted')) UNION (select distinct(c.patient_id) as patient, c.Test_Date as test_date, c.location_id, f.Name, c.practice_id, i.name as Practice_name from prick_tests c INNER JOIN practice_locations f ON c.location_id = f.id INNER JOIN practices i on c.practice_id = i.id where c.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (c.Status IS NULL OR c.Status <> 'deleted')) UNION (select distinct(g.patient_id) as patient, g.Start_Date as test_date, g.Start_Location_id AS Location_ID, h.name, g.start_practice_id, i.name as Practice_name from ige_tests g INNER JOIN practice_locations h ON g.start_practice_id = h.ID INNER JOIN practices i on g.start_practice_id = i.id where g.Start_Date BETWEEN %(PSD)s AND %(PED)s AND (g.Status = 'Complete')) order by Location_ID) q LEFT JOIN (SELECT DISTINCT barcode, Patient_ID FROM vials WHERE (status_id <> 2 or status_id is not null) and is_child <> 1 AND Mix_Date BETWEEN %(PSD)s AND %(PED)s) v ON q.patient = v.Patient_ID LEFT JOIN (SELECT id, intake_method FROM patients) z on q.patient = z.id where v.Patient_ID is null and practice_id = %(practice_ID)s\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "patients_not_converted_reactions = patients_with_pos_reactions_prick.merge(patients_not_converted, how='inner', left_on='patient_id', right_on='Patients_Tested')\n",
    "patients_not_converted_reactions.to_excel('Patients with Prick Tests not converted.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "wheal_test_prick = pd.read_sql_query(\"select distinct wheal_size from prick_test_results\", myconnection)\n",
    "wheal_test_prick\n",
    "reaction_to_each_antigen_prick = pd.read_sql_query(\"SELECT q.patient_id, q.status, q.practice_id, q.location_id, q.tester_id, q.test_date, monthname(q.test_date) as test_month, q.left_wheal, q.right_wheal, q.antigen_id, q.name FROM (SELECT a.id, a.patient_id, a.status, a.tester_id, a.practice_id, a.location_id, a.test_date, a.template_id, substring_index(ucase(b.wheal_size), 'X', 1) AS left_wheal, substring_index(ucase(b.wheal_size), 'X', -1) AS right_wheal, c.antigen_id, d.name FROM prick_tests a LEFT JOIN prick_test_results b ON a.id = b.test_id LEFT JOIN prick_test_templates_antigens c ON (a.template_id=c.template_id AND b.antigen_id=c.antigen_id) LEFT JOIN prick_test_templates_antigens_names d ON c.id=d.antigen_id WHERE a.practice_id = %(practice_ID)s and a.test_date BETWEEN %(PSD)s and %(PED)s AND a.status = 'complete' ORDER BY a.patient_id, a.test_date, c.antigen_id) q GROUP BY q.patient_id, q.test_date, q.name\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "reaction_to_each_antigen_prick['left_wheal'].unique()\n",
    "reaction_to_each_antigen_prick['left_wheal'] = reaction_to_each_antigen_prick['left_wheal'].str.replace(r\"[a-zA-Z|-|-|`|.|,|/|+|=|#|'|@]+\", '')\n",
    "reaction_to_each_antigen_prick['right_wheal'] = reaction_to_each_antigen_prick['right_wheal'].str.replace(r\"[a-zA-Z|-|-|`|.|,|/|+|=|#|'|@]+\", '')\n",
    "reaction_to_each_antigen_prick[['right_wheal', 'left_wheal']] = reaction_to_each_antigen_prick[['right_wheal', 'left_wheal']].replace('', np.nan)\n",
    "reaction_to_each_antigen_prick['left_wheal'].fillna(0, inplace=True)\n",
    "reaction_to_each_antigen_prick['right_wheal'].fillna(0, inplace=True)\n",
    "reaction_to_each_antigen_prick['left_wheal'].astype(int)\n",
    "reaction_to_each_antigen_prick['right_wheal'].astype(int)\n",
    "reaction_to_each_antigen_prick['wheal_size'] = reaction_to_each_antigen_prick[['left_wheal', 'right_wheal']].max(axis=1)\n",
    "reaction_to_each_antigen_prick\n",
    "control_to_reactions = pd.read_sql_query(\"SELECT DISTINCT q.patient_id, q.left_wheal, q.right_wheal, q.name FROM (SELECT a.id, a.patient_id, a.status, a.practice_id, a.test_date, a.template_id, substring_index(ucase(b.wheal_size), 'X', 1) AS left_wheal, substring_index(ucase(b.wheal_size), 'X', -1) AS right_wheal, c.antigen_id, d.name FROM prick_tests a LEFT JOIN prick_test_results b ON a.id = b.test_id LEFT JOIN prick_test_templates_antigens c ON (a.template_id=c.template_id AND b.antigen_id=c.antigen_id) LEFT JOIN prick_test_templates_antigens_names d ON c.id=d.antigen_id WHERE a.practice_id = %(practice_ID)s and a.test_date BETWEEN %(PSD)s and %(PED)s AND a.status = 'complete' ORDER BY a.patient_id, a.test_date, c.antigen_id) q where ucase(q.name) LIKE %(his)s OR ucase(q.name) LIKE %(hys)s OR ucase(q.name) LIKE %(gly)s OR ucase(q.name) LIKE %(gli)s OR ucase(q.name) LIKE %(sal)s OR ucase(q.name) LIKE %(sal)s\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id, \"his\":'HIS%', \"hys\":'%CO%', \"gly\":'%GLY%', \"gli\":'%GLI%', \"sal\":'%SALI%'})\n",
    "control_to_reactions['left_wheal'].unique()\n",
    "control_to_reactions['left_wheal'] = control_to_reactions['left_wheal'].str.replace(r\"[a-zA-Z|-|-|`|.|,|/|+|=|#|'|@]+\", '')\n",
    "control_to_reactions['right_wheal'] = control_to_reactions['right_wheal'].str.replace(r\"[a-zA-Z|-|-|`|.|,|/|+|=|#|'|@]+\", '')\n",
    "control_to_reactions[['right_wheal', 'left_wheal']] = control_to_reactions[['right_wheal', 'left_wheal']].replace('', np.nan)\n",
    "control_to_reactions['left_wheal'].fillna(0, inplace=True)\n",
    "control_to_reactions['right_wheal'].fillna(0, inplace=True)\n",
    "control_to_reactions['left_wheal'].astype(int)\n",
    "control_to_reactions['right_wheal'].astype(int)\n",
    "control_to_reactions['wheal_size'] = control_to_reactions[['left_wheal', 'right_wheal']].max(axis=1)\n",
    "control_to_reactions\n",
    "per_person_controls = pd.pivot_table(control_to_reactions, index=['patient_id'], values=['wheal_size'], columns=['name'], aggfunc='max', fill_value= 0)\n",
    "per_person_controls.reset_index(inplace=True)\n",
    "per_person_controls.columns = per_person_controls.columns.droplevel(0)\n",
    "per_person_controls.rename(columns={'': 'patient_id'}, inplace=True)\n",
    "per_person_controls['Histatrol Histamine Base'] = per_person_controls[['Histatrol Histamine Base']].astype(int)\n",
    "per_person_controls['Histamine '] = per_person_controls['Histatrol Histamine Base']\n",
    "patients_with_pos_reactions_prick = reaction_to_each_antigen_prick.merge(per_person_controls, on='patient_id')\n",
    "patients_with_pos_reactions_prick['positive_reaction'] = patients_with_pos_reactions_prick['wheal_size'] - patients_with_pos_reactions_prick['Histamine ']\n",
    "patients_with_pos_reactions_prick['positive_reaction'].astype(int)\n",
    "patients_with_pos_reactions_prick['needs_treatment'] = np.where(patients_with_pos_reactions_prick['positive_reaction'] > 3, 1, 0)\n",
    "patients_with_pos_reactions_prick\n",
    "all_patient_reactions_prick = patients_with_pos_reactions_prick[['patient_id', 'location_id', 'test_date', 'test_month', 'name', 'tester_id', 'wheal_size', 'Histamine ', 'positive_reaction', 'needs_treatment']]\n",
    "all_patient_reactions_prick"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "wheal_test_intra = pd.read_sql_query(\"select distinct wheal_size from intradermal_test_results\", myconnection)\n",
    "reaction_to_each_antigen_intra = pd.read_sql_query(\"SELECT q.patient_id, q.status, q.practice_id, q.location_id, q.tester_id, q.test_date, monthname(q.test_date) as test_month, q.dilution, q.left_wheal, q.right_wheal, q.antigen_id, q.antigen_tested, q.end_point, q.name, q.label_abbreviation, q.title FROM (SELECT a.id, a.patient_id, a.status, a.practice_id, a.location_id, a.user_id as tester_id, a.test_date, b.dilution, substring_index(ucase(b.wheal_size), 'X', 1) AS left_wheal, substring_index(ucase(b.wheal_size), 'X', -1) AS right_wheal, b.antigen_id, c.antigen_id AS antigen_tested, c.end_point, d.name, d.label_abbreviation, d.title from intradermal_tests a LEFT JOIN intradermal_test_results b ON a.id=b.test_id LEFT JOIN intradermal_test_antigens c ON b.antigen_id = c.id LEFT JOIN antigens d on c.antigen_id = d.id WHERE a.practice_id = %(practice_ID)s and a.test_date BETWEEN %(PSD)s and %(PED)s AND a.status = 'complete' ORDER BY a.patient_id, a.test_date, c.antigen_id, b.dilution ASC) q GROUP BY q.patient_id, q.test_date, q.antigen_tested\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "reaction_to_each_antigen_intra['right_wheal'].unique()\n",
    "reaction_to_each_antigen_intra[['left_wheal', 'right_wheal']] = reaction_to_each_antigen_intra[['left_wheal', 'right_wheal']].replace('', np.nan)\n",
    "reaction_to_each_antigen_intra\n",
    "reaction_to_each_antigen_intra['left_wheal'].fillna(0, inplace=True)\n",
    "reaction_to_each_antigen_intra['right_wheal'].fillna(0, inplace=True)\n",
    "reaction_to_each_antigen_intra['left_wheal'].astype(int)\n",
    "reaction_to_each_antigen_intra['right_wheal'].astype(int)\n",
    "reaction_to_each_antigen_intra['wheal_size'] = reaction_to_each_antigen_intra[['left_wheal', 'right_wheal']].max(axis=1)\n",
    "reaction_to_each_antigen_intra\n",
    "control_to_reactions = pd.read_sql_query(\"SELECT DISTINCT q.patient_id, q.left_wheal, right_wheal, q.antigen_tested, q.name, q.title FROM (SELECT a.id, a.patient_id, a.practice_id, a.location_id, a.user_id, a.test_date, a.status, substring_index(ucase(b.wheal_size), 'X', 1) AS left_wheal, substring_index(ucase(b.wheal_size), 'X', -1) AS right_wheal, b.antigen_id, c.antigen_id AS antigen_tested, c.end_point, d.name, d.label_abbreviation, d.title from intradermal_tests a LEFT JOIN intradermal_test_results b ON a.id=b.test_id LEFT JOIN intradermal_test_antigens c ON b.antigen_id = c.id LEFT JOIN antigens d on c.antigen_id = d.id WHERE a.practice_id = %(practice_ID)s and a.test_date BETWEEN %(PSD)s and %(PED)s) q where ucase(q.name) LIKE %(his)s OR ucase(q.name) LIKE %(hys)s OR ucase(q.name) LIKE %(gly)s OR ucase(q.name) LIKE %(gli)s OR ucase(q.name) LIKE %(sal)s OR ucase(q.title) LIKE %(sal)s\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id, \"his\":'HIS%', \"hys\":'HYS%', \"gly\":'GLY%', \"gli\":'GLI%', \"sal\":'%SALI%'})\n",
    "control_to_reactions[['left_wheal', 'right_wheal']] = control_to_reactions[['left_wheal', 'right_wheal']].replace('', np.nan)\n",
    "control_to_reactions\n",
    "control_to_reactions['left_wheal'].fillna(0, inplace=True)\n",
    "control_to_reactions['right_wheal'].fillna(0, inplace=True)\n",
    "control_to_reactions['left_wheal'].astype(int)\n",
    "control_to_reactions['right_wheal'].astype(int)\n",
    "control_to_reactions['wheal_size'] = control_to_reactions[['left_wheal', 'right_wheal']].max(axis=1).astype(int)\n",
    "control_to_reactions\n",
    "per_person_controls = pd.pivot_table(control_to_reactions, index=['patient_id'], values=['wheal_size'], columns=['name'], aggfunc='max', fill_value= 0)\n",
    "per_person_controls.reset_index(inplace=True)\n",
    "per_person_controls.columns = per_person_controls.columns.droplevel(0)\n",
    "per_person_controls.rename(columns={'': 'patient_id'}, inplace=True)\n",
    "per_person_controls  \n",
    "patients_with_pos_reactions_intra = reaction_to_each_antigen_intra.merge(per_person_controls, on='patient_id')\n",
    "patients_with_pos_reactions_intra['positive_reaction'] = patients_with_pos_reactions_intra['wheal_size'] - patients_with_pos_reactions_intra['Histamine ']\n",
    "patients_with_pos_reactions_intra['positive_reaction'].astype(int)\n",
    "patients_with_pos_reactions_intra['needs_treatment'] = np.where(patients_with_pos_reactions_intra['positive_reaction'] > 3, 1, 0)\n",
    "patients_with_pos_reactions_intra\n",
    "all_patient_reactions_intra = patients_with_pos_reactions_intra[['patient_id', 'location_id', 'test_date', 'test_month', 'name', 'tester_id', 'wheal_size', 'Histamine ', 'positive_reaction', 'needs_treatment']]\n",
    "all_patient_reactions_intra"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "reaction_to_each_antigen_mqt = pd.read_sql_query(\"SELECT a.id, a.patient_id, a.tester_id, a.test_date, monthname(a.test_date) as test_month, a.status, a.practice_id, a.location_id, a.control_pos, a.control_neg, a.control_saline, a.dilution_1_strength, a.dilution_2_strength, b.antigen_id, b.multi, b.dilution_1, b.dilution_2, c.name FROM mq_tests a LEFT JOIN mq_tests_antigens b ON a.id = b.test_id LEFT JOIN mq_tests_antigens_names c ON b.id = c.antigen_id WHERE a.practice_id = %(practice_ID)s and a.test_date BETWEEN %(PSD)s and %(PED)s AND a.status = 'complete' ORDER BY a.patient_id, a.test_date, b.antigen_id\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "reaction_to_each_antigen_mqt['multi'].unique()\n",
    "reaction_to_each_antigen_mqt['dilution_1'].unique()\n",
    "reaction_to_each_antigen_mqt['dilution_2'].unique()\n",
    "reaction_to_each_antigen_mqt['multi'] = reaction_to_each_antigen_mqt['multi'].str.replace(r\"[a-zA-Z|-|-|`|.|,|/|+|=|#|'|@]+\", '')\n",
    "reaction_to_each_antigen_mqt['dilution_1'] = reaction_to_each_antigen_mqt['dilution_1'].str.replace(r\"[a-zA-Z|-|-|`|.|,|/|+|=|#|'|@]+\", '')\n",
    "reaction_to_each_antigen_mqt['dilution_2'] = reaction_to_each_antigen_mqt['dilution_2'].str.replace(r\"[a-zA-Z|-|-|`|.|,|/|+|=|#|'|@]+\", '')\n",
    "reaction_to_each_antigen_mqt[['multi', 'dilution_1', 'dilution_2']] = reaction_to_each_antigen_mqt[['multi', 'dilution_1', 'dilution_2']].replace('', np.nan)\n",
    "reaction_to_each_antigen_mqt['multi'].fillna(0, inplace=True)\n",
    "reaction_to_each_antigen_mqt['dilution_1'].fillna(0, inplace=True)\n",
    "reaction_to_each_antigen_mqt['dilution_2'].fillna(0, inplace=True)\n",
    "reaction_to_each_antigen_mqt['multi'] = reaction_to_each_antigen_mqt['multi'].astype(str).astype(int)\n",
    "reaction_to_each_antigen_mqt['dilution_1'] = reaction_to_each_antigen_mqt['dilution_1'].astype(str).astype(int)\n",
    "reaction_to_each_antigen_mqt['dilution_2'] = reaction_to_each_antigen_mqt['dilution_2'].astype(str).astype(int)\n",
    "reaction_to_each_antigen_mqt['multi'].dtype\n",
    "reaction_to_each_antigen_mqt['dilution_1'].dtype\n",
    "reaction_to_each_antigen_mqt['dilution_2'].dtype\n",
    "reaction_to_each_antigen_mqt['wheal_size'] = np.where(reaction_to_each_antigen_mqt['dilution_2'] > 0, reaction_to_each_antigen_mqt['dilution_2'], np.where(reaction_to_each_antigen_mqt['dilution_1'] > 0, reaction_to_each_antigen_mqt['dilution_1'], reaction_to_each_antigen_mqt['multi']))\n",
    "reaction_to_each_antigen_mqt\n",
    "control_reactions = pd.read_sql_query(\"SELECT a.id, a.patient_id, a.test_date, a.status, practice_id, a.control_pos, a.control_neg, a.control_saline, a.dilution_1_strength, a.dilution_2_strength, b.antigen_id, b.multi, b.dilution_1, b.dilution_2, c.name FROM mq_tests a LEFT JOIN mq_tests_antigens b ON a.id = b.test_id LEFT JOIN mq_tests_antigens_names c ON b.id = c.antigen_id WHERE a.practice_id = %(practice_ID)s and a.test_date BETWEEN %(PSD)s and %(PED)s AND a.status = 'complete' AND (ucase(c.name) LIKE %(his)s OR ucase(c.name) LIKE %(hys)s OR ucase(c.name) LIKE %(gly)s OR ucase(c.name) LIKE %(gli)s OR ucase(c.name) LIKE %(sal)s) ORDER BY a.patient_id, a.test_date, b.antigen_id\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id, \"his\":'HIS%', \"hys\":'HYS%', \"gly\":'GLY%', \"gli\":'GLI%', \"sal\":'%SALI%'})\n",
    "control_reactions['multi'].unique()\n",
    "control_reactions['dilution_1'].unique()\n",
    "control_reactions['dilution_2'].unique()\n",
    "control_reactions['multi'] = control_reactions['multi'].str.replace(r\"[a-zA-Z|-|-|`|.|,|/|+|=|#|'|@]+\", '')\n",
    "control_reactions['dilution_1'] = control_reactions['dilution_1'].str.replace(r\"[a-zA-Z|-|-|`|.|,|/|+|=|#|'|@]+\", '')\n",
    "control_reactions['dilution_2'] = control_reactions['dilution_2'].str.replace(r\"[a-zA-Z|-|-|`|.|,|/|+|=|#|'|@]+\", '')\n",
    "control_reactions['control_pos'] = control_reactions['control_pos'].str.replace(r\"[a-zA-Z|-|-|`|.|,|/|+|=|#|'|@]+\", '')\n",
    "control_reactions[['multi', 'dilution_1', 'dilution_2', 'control_pos']] = control_reactions[['multi', 'dilution_1', 'dilution_2', 'control_pos']].replace('', np.nan)\n",
    "control_reactions['multi'].fillna(0, inplace=True)\n",
    "control_reactions['dilution_1'].fillna(0, inplace=True)\n",
    "control_reactions['dilution_2'].fillna(0, inplace=True)\n",
    "control_reactions['control_pos'].fillna(0, inplace=True)\n",
    "control_reactions['multi'] = control_reactions['multi'].astype(str).astype(int)\n",
    "control_reactions['dilution_1'] = control_reactions['dilution_1'].astype(str).astype(int)\n",
    "control_reactions['dilution_2'] = control_reactions['dilution_2'].astype(str).astype(int)\n",
    "control_reactions['control_pos'] = control_reactions['control_pos'].astype(str).astype(int)\n",
    "control_reactions['multi'].dtype\n",
    "control_reactions['dilution_1'].dtype\n",
    "control_reactions['dilution_2'].dtype\n",
    "control_reactions['control_pos'].dtype\n",
    "control_reactions['control_pos'] = np.where(control_reactions['control_pos'] > 0, control_reactions['control_pos'], np.where(control_reactions['dilution_2'] > 0, control_reactions['dilution_2'], np.where(control_reactions['dilution_1'] > 0, control_reactions['dilution_1'], control_reactions['multi'])))\n",
    "control_reactions\n",
    "per_person_controls = pd.pivot_table(control_reactions, index=['patient_id'], values=['control_pos'], columns=['name'], aggfunc='max', fill_value= 0)\n",
    "per_person_controls.reset_index(inplace=True)\n",
    "per_person_controls.columns = per_person_controls.columns.droplevel(0)\n",
    "per_person_controls.rename(columns={'': 'patient_id'}, inplace=True)\n",
    "per_person_controls['Histamine '] = np.where(per_person_controls['Histamine '] == 0, per_person_controls['Histatrol Histamine Base'], per_person_controls['Histamine '])\n",
    "per_person_controls\n",
    "patients_with_pos_reactions_mqt = reaction_to_each_antigen_mqt.merge(per_person_controls, on='patient_id')\n",
    "patients_with_pos_reactions_mqt['positive_reaction'] = patients_with_pos_reactions_mqt['wheal_size'] - patients_with_pos_reactions_mqt['Histamine ']\n",
    "patients_with_pos_reactions_mqt['positive_reaction'].astype(int)\n",
    "patients_with_pos_reactions_mqt\n",
    "patients_with_pos_reactions_mqt['needs_treatment'] = np.where(patients_with_pos_reactions_mqt['positive_reaction'] > 3, 1, 0)\n",
    "patients_with_pos_reactions_mqt\n",
    "#patients_not_converted = pd.read_sql_query(\"SELECT DISTINCT q.patient as Patients_Tested, q.test_date as month_year, z.intake_method, q.Name as location_name FROM ((select distinct(a.patient_id) as patient, a.Test_Date as test_date, a.location_ID, d.Name, a.practice_id, i.name as Practice_name from intradermal_tests a INNER JOIN practice_locations d ON a.Location_ID = d.id INNER JOIN practices i on a.practice_id = i.id where a.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (a.Status IS NULL OR a.Status <> 'deleted')) UNION (select distinct(b.patient_id) as patient, b.Test_Date as test_date, b.location_id, e.Name, b.practice_id, i.name as Practice_name from mq_tests b INNER JOIN practice_locations e ON b.Location_ID = e.id INNER JOIN practices i on b.practice_id = i.id where b.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (b.Status IS NULL OR b.Status <> 'deleted')) UNION (select distinct(c.patient_id) as patient, c.Test_Date as test_date, c.location_id, f.Name, c.practice_id, i.name as Practice_name from prick_tests c INNER JOIN practice_locations f ON c.location_id = f.id INNER JOIN practices i on c.practice_id = i.id where c.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (c.Status IS NULL OR c.Status <> 'deleted')) UNION (select distinct(g.patient_id) as patient, g.Start_Date as test_date, g.Start_Location_id AS Location_ID, h.name, g.start_practice_id, i.name as Practice_name from ige_tests g INNER JOIN practice_locations h ON g.start_practice_id = h.ID INNER JOIN practices i on g.start_practice_id = i.id where g.Start_Date BETWEEN %(PSD)s AND %(PED)s AND (g.Status = 'Complete')) order by Location_ID) q LEFT JOIN (SELECT DISTINCT barcode, Patient_ID FROM vials WHERE (status_id <> 2 or status_id is not null) and is_child <> 1 AND Mix_Date BETWEEN %(PSD)s AND %(PED)s) v ON q.patient = v.Patient_ID LEFT JOIN (SELECT id, intake_method FROM patients) z on q.patient = z.id where v.Patient_ID is null and practice_id = %(practice_ID)s\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "#patients_not_converted_reactions = patients_with_pos_reactions.merge(patients_not_converted, how='inner', left_on='patient_id', right_on='Patients_Tested')\n",
    "#patients_not_converted_reactions\n",
    "all_patient_reactions_mqt = patients_with_pos_reactions_mqt[['patient_id', 'location_id', 'test_date', 'test_month', 'name', 'tester_id', 'wheal_size', 'Histamine ', 'positive_reaction', 'needs_treatment']]\n",
    "all_patient_reactions_mqt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import re\n",
    "from sklearn.cross_validation import train_test_split\n",
    "from subprocess import check_call\n",
    "import pydotplus\n",
    "import sklearn\n",
    "all_patient_reactions = pd.concat([all_patient_reactions_mqt, all_patient_reactions_intra, all_patient_reactions_prick])\n",
    "all_patient_reactions\n",
    "patients_not_converted = pd.read_sql_query(\"SELECT DISTINCT q.patient as patient_id, z.intake_method as 'Vial_Mixed?' FROM ((select distinct(a.patient_id) as patient, a.Test_Date as test_date, a.location_ID, d.Name, a.practice_id, i.name as Practice_name from intradermal_tests a INNER JOIN practice_locations d ON a.Location_ID = d.id INNER JOIN practices i on a.practice_id = i.id where a.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (a.Status IS NULL OR a.Status <> 'deleted')) UNION (select distinct(b.patient_id) as patient, b.Test_Date as test_date, b.location_id, e.Name, b.practice_id, i.name as Practice_name from mq_tests b INNER JOIN practice_locations e ON b.Location_ID = e.id INNER JOIN practices i on b.practice_id = i.id where b.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (b.Status IS NULL OR b.Status <> 'deleted')) UNION (select distinct(c.patient_id) as patient, c.Test_Date as test_date, c.location_id, f.Name, c.practice_id, i.name as Practice_name from prick_tests c INNER JOIN practice_locations f ON c.location_id = f.id INNER JOIN practices i on c.practice_id = i.id where c.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (c.Status IS NULL OR c.Status <> 'deleted')) UNION (select distinct(g.patient_id) as patient, g.Start_Date as test_date, g.Start_Location_id AS Location_ID, h.name, g.start_practice_id, i.name as Practice_name from ige_tests g INNER JOIN practice_locations h ON g.start_practice_id = h.ID INNER JOIN practices i on g.start_practice_id = i.id where g.Start_Date BETWEEN %(PSD)s AND %(PED)s AND (g.Status = 'Complete')) order by Location_ID) q LEFT JOIN (SELECT DISTINCT barcode, Patient_ID FROM vials WHERE (status_id <> 2 or status_id is not null) and is_child <> 1 AND Mix_Date BETWEEN %(PSD)s AND %(PED)s) v ON q.patient = v.Patient_ID LEFT JOIN (SELECT id, intake_method FROM patients) z on q.patient = z.id where v.Patient_ID is not null and practice_id = %(practice_ID)s\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "#patients_not_converted[patients_not_converted['patient_id'] == 42435]\n",
    "patients_not_converted\n",
    "patients_not_converted_reactions = all_patient_reactions.merge(patients_not_converted, on='patient_id', sort=True, how='left')\n",
    "patients_not_converted_reactions\n",
    "patient_info = pd.read_sql_query(\"SELECT a.id, a.firstname, a.middlename, a.lastname, a.dob, a.gender, a.address, a.address2, a.city, a.state, a.zip, a.homephone, a.cellphone, a.mix_practice_doctor_id, concat_ws(' ', b.firstname, b.lastname) AS doctor_name FROM patients a LEFT JOIN practice_doctors b ON a.mix_practice_doctor_id = b.id\", myconnection)\n",
    "patients_with_info = patients_not_converted_reactions.merge(patient_info, left_on='patient_id', right_on='id', how='left', sort=True)\n",
    "#patients_with_info.to_excel('Patients With Test Results.xlsx')\n",
    "food_antigens = pd.read_excel('Food Allergens.xlsx')\n",
    "food_antigens\n",
    "location_names = pd.read_sql_query(\"SELECT id as location_id, name as location_name FROM practice_locations\", myconnection)\n",
    "patients_with_info_and_food_reactions = patients_with_info.merge(food_antigens, on='name', how='left').merge(location_names, on='location_id')\n",
    "patients_with_info_and_food_reactions['food'].fillna('N', inplace=True)\n",
    "patients_with_info_and_food_reactions['mix_practice_doctor_id'].fillna(1, inplace=True)\n",
    "patients_with_info_and_food_reactions['Vial_Mixed?'].fillna('dnm', inplace=True)\n",
    "#patients_with_info_and_food_reactions['mixed_target'] = np.where(patients_with_info_and_food_reactions['Vial_Mixed?'] == 'dnm', 0, np.where(patients_with_info_and_food_reactions['Vial_Mixed?'] == 'inj', 1, np.where(patients_with_info_and_food_reactions['Vial_Mixed?'] == 'sub', 2, np.where(patients_with_info_and_food_reactions['Vial_Mixed?'] == 'unk', 3, 4))))\n",
    "patients_with_info_and_food_reactions['mixed_target'] = np.where(patients_with_info_and_food_reactions['Vial_Mixed?'] == 'dnm', 0, 1)\n",
    "patients_with_info_and_food_reactions['patient_name'] = patients_with_info_and_food_reactions['firstname'] + \" \" + patients_with_info_and_food_reactions['lastname']\n",
    "patients_with_info_and_food_reactions['age'] = (datetime.datetime.now() - patients_with_info_and_food_reactions['dob']).astype('timedelta64[Y]')\n",
    "#patients_with_info_and_food_reactions.to_excel('Patients With Test Results V3.xlsx')\n",
    "patients_with_info_and_food_reactions_filter = patients_with_info_and_food_reactions[patients_with_info_and_food_reactions['dob'] >= datetime.datetime(year=1912, month=1, day=1, hour=0, minute=0, second=0)]\n",
    "patients_with_info_and_food_reactions_filter\n",
    "different_try = patients_with_info_and_food_reactions_filter.groupby(['patient_id', 'test_date']).agg({'wheal_size' : 'sum', 'Histamine ' : 'sum', 'needs_treatment' : 'sum', 'location_id' : 'max', 'age' : 'max', 'mixed_target' : 'max', 'mix_practice_doctor_id' : 'max', 'tester_id' : 'max'})\n",
    "different_try\n",
    "#test = patients_with_info_and_food_reactions_filter[patients_with_info_and_food_reactions_filter['patient_id'] == 26898]\n",
    "#test\n",
    "#sample = patients_with_info_and_food_reactions_filter[(patients_with_info_and_food_reactions_filter['tester_id'].isnull()) | (patients_with_info_and_food_reactions_filter['mix_practice_doctor_id'].isnull())]\n",
    "#sample\n",
    "unique_physicians = pd.DataFrame(patients_with_info_and_food_reactions_filter['mix_practice_doctor_id'].sort_values().unique().tolist()).rename(columns={0:'mix_practice_doctor_id'})\n",
    "normalize_dr = sklearn.preprocessing.normalize(patients_with_info_and_food_reactions_filter['mix_practice_doctor_id'].sort_values().unique().tolist())\n",
    "normalize_dr = pd.DataFrame(normalize_dr).T.rename(columns={0:'normalized_doctor_id'})\n",
    "normalized_physicians = pd.concat([unique_physicians, normalize_dr], axis=1)\n",
    "unique_tester = pd.DataFrame(patients_with_info_and_food_reactions_filter['tester_id'].sort_values().unique().tolist()).rename(columns={0:'tester_id'})\n",
    "normalize_tester = sklearn.preprocessing.normalize(patients_with_info_and_food_reactions_filter['tester_id'].sort_values().unique().tolist())\n",
    "normalize_tester = pd.DataFrame(normalize_tester).T.rename(columns={0:'normalized_tester_id'})\n",
    "normalized_testers = pd.concat([unique_tester, normalize_tester], axis=1)\n",
    "patients_with_info_and_food_reactions_filter = patients_with_info_and_food_reactions_filter.merge(normalized_physicians, on='mix_practice_doctor_id').merge(normalized_testers, on='tester_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "X = patients_with_info_and_food_reactions_filter[['normalized_doctor_id', 'normalized_tester_id', 'location_id', 'Histamine ', 'wheal_size', 'age']]\n",
    "y = patients_with_info_and_food_reactions_filter[['mixed_target']]\n",
    "#X = different_try[['age', 'location_id', 'wheal_size', 'Histamine ']]\n",
    "#y = different_try[['mixed_target']]\n",
    "from sklearn.cross_validation import train_test_split\n",
    "from subprocess import check_call\n",
    "import pydotplus\n",
    "import sklearn\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .5)\n",
    "from sklearn import tree\n",
    "my_classifier = tree.DecisionTreeClassifier(criterion='entropy', splitter='best', max_depth=17, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features=None, random_state=None, max_leaf_nodes=None, min_impurity_split=1e-07, class_weight=None, presort=False)\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "#my_classifier = KNeighborsClassifier()\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "#my_classifier = GaussianNB()\n",
    "from sklearn.svm import SVC\n",
    "#my_classifier = SVC()\n",
    "from sklearn.cross_validation import StratifiedKFold\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "#my_classifier = RandomForestClassifier(n_estimators=50, criterion='entropy', max_depth=10, min_samples_split=2, min_samples_leaf=2, min_weight_fraction_leaf=0.0, max_features='auto', max_leaf_nodes=None, min_impurity_split=1e-07, bootstrap=True, oob_score=False, n_jobs=-1, random_state=None, verbose=0, warm_start=False, class_weight=None)\n",
    "#my_classifier = RandomForestClassifier(n_estimators=19, criterion='entropy', max_depth=17, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features='auto', max_leaf_nodes=None, min_impurity_split=1e-07, bootstrap=True, oob_score=False, n_jobs=1, random_state=None, verbose=0, warm_start=False, class_weight=None)\n",
    "my_classifier.fit(X_train, y_train)\n",
    "trained = my_classifier.fit(X_train, y_train)\n",
    "predictions = my_classifier.predict(X_test)\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.tree import export_graphviz\n",
    "print(accuracy_score(y_test, predictions))\n",
    "#[estimator.tree_.max_depth for estimator in trained.estimators_]\n",
    "##print(my_classifier.predict([[22, 206, 7, 14]]))\n",
    "#sklearn.tree.export_graphviz(trained, out_file='C:\\\\Users\\\\eallan\\\\OneDrive - Fuel Medical Group, LLC\\\\tree.dot', feature_names=['mix_practice_doctor_id', 'tester_id', 'location_id', 'Histamine ', 'wheal_size', 'age'])\n",
    "##import os\n",
    "##path = os.path.normcase('C:\\\\Users\\\\eallan\\\\OneDrive - Fuel Medical Group, LLC\\\\tree.dot')\n",
    "##output_path = os.path.normcase('C:\\\\Users\\\\eallan\\\\OneDrive - Fuel Medical Group, LLC\\\\tree.png')\n",
    "##check_call(['dot', '-Tpng', 'path', '>', 'output_path'])\n",
    "#graph = pydotplus.graph_from_dot_file('C:\\\\Users\\\\eallan\\\\OneDrive - Fuel Medical Group, LLC\\\\tree.dot')\n",
    "#graph.write_svg('C:\\\\Users\\\\eallan\\\\OneDrive - Fuel Medical Group, LLC\\\\tree.svg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "patients_reaction_table = pd.pivot_table(patients_with_info_and_food_reactions, index=['patient_id', 'food', 'name'], columns=['Vial_Mixed?'], values=['needs_treatment'], aggfunc='sum', fill_value=0)\n",
    "patients_reaction_table\n",
    "x = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "x\n",
    "Y = x.ravel(order='C')\n",
    "Y\n",
    "test_ravel = X.unstack()\n",
    "test_ravel\n",
    "#patients_with_info_and_food_reactions_filter['mix_practice_doctor_id_nomralized'] = sklearn.preprocessing.normalize(patients_with_info_and_food_reactions_filter['mix_practice_doctor_id'])\n",
    "#patients_with_info_and_food_reactions_filter\n",
    "unique_physicians = pd.DataFrame(patients_with_info_and_food_reactions_filter['mix_practice_doctor_id'].sort_values().unique().tolist()).rename(columns={0:'mix_practice_doctor_id'})\n",
    "normalize_dr = sklearn.preprocessing.normalize(patients_with_info_and_food_reactions_filter['mix_practice_doctor_id'].sort_values().unique().tolist())\n",
    "normalize_dr = pd.DataFrame(normalize_dr).T.rename(columns={0:'normalized_doctor_id'})\n",
    "normalized_physicians = pd.concat([unique_physicians, normalize_dr], axis=1)\n",
    "unique_tester = pd.DataFrame(patients_with_info_and_food_reactions_filter['tester_id'].sort_values().unique().tolist()).rename(columns={0:'tester_id'})\n",
    "normalize_tester = sklearn.preprocessing.normalize(patients_with_info_and_food_reactions_filter['tester_id'].sort_values().unique().tolist())\n",
    "normalize_tester = pd.DataFrame(normalize_tester).T.rename(columns={0:'normalized_tester_id'})\n",
    "normalized_testers = pd.concat([unique_tester, normalize_tester], axis=1)\n",
    "patients_with_info_and_food_reactions_filter.merge(normalized_physicians, on='mix_practice_doctor_id').merge(normalized_testers, on='tester_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#excel = win32.Dispatch('Excel.Application')\n",
    "#wb = excel.Workbooks.Add(\"C:\\\\Users\\\\eallan\\\\OneDrive - Fuel Medical Group, LLC\\\\Patients With Test Results.xlsx\")\n",
    "#wb = excel.Workbooks.Open(\"Patients With Test Results.xlsx\")\n",
    "#wb\n",
    "#import itertools\n",
    "#tablecount = itertools.count\n",
    "#tablecount\n",
    "#excel.Application.Quit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import win32com.client\n",
    "Excel   = win32com.client.gencache.EnsureDispatch('Excel.Application') # Excel = win32com.client.Dispatch('Excel.Application')\n",
    "\n",
    "win32c = win32com.client.constants\n",
    "\n",
    "wb = Excel.Workbooks.Open(\"C:\\\\Users\\\\eallan\\\\OneDrive - Fuel Medical Group, LLC\\\\Patients With Test Results.xlsx\")\n",
    "Sheet1 = wb.Worksheets(\"Sheet1\")\n",
    "\n",
    "cl1 = Sheet1.Cells(1,2)\n",
    "cl2 = Sheet1.Cells(len(patients_with_info_and_food_reactions.index),len(patients_with_info_and_food_reactions.columns)+1)\n",
    "PivotSourceRange = Sheet1.Range(cl1,cl2)\n",
    "\n",
    "PivotSourceRange.Select()\n",
    "\n",
    "wb.Sheets.Add (After=wb.Sheets(1))\n",
    "Sheet2 = wb.Worksheets(2)\n",
    "cl3=Sheet2.Cells(4,1)\n",
    "PivotTargetRange=  Sheet2.Range(cl3,cl3)\n",
    "PivotTableName = 'ReportPivotTable'\n",
    "\n",
    "PivotCache = wb.PivotCaches().Create(SourceType=win32c.xlDatabase, SourceData=PivotSourceRange, Version=win32c.xlPivotTableVersion14)\n",
    "\n",
    "PivotTable = PivotCache.CreatePivotTable(TableDestination=PivotTargetRange, TableName=PivotTableName, DefaultVersion=win32c.xlPivotTableVersion14)\n",
    "\n",
    "PivotTable.PivotFields('patient_name').Orientation = win32c.xlRowField\n",
    "PivotTable.PivotFields('patient_name').Position = 1\n",
    "PivotTable.PivotFields('patient_name').Subtotals = [False, False, False, False, False, False, False, False, False, False, False, False]\n",
    "PivotTable.PivotFields('doctor_name').Orientation = win32c.xlPageField\n",
    "PivotTable.PivotFields('doctor_name').Position = 1\n",
    "PivotTable.PivotFields('test_month').Orientation = win32c.xlPageField\n",
    "PivotTable.PivotFields('test_month').Position = 2\n",
    "PivotTable.PivotFields('location_name').Orientation = win32c.xlPageField\n",
    "PivotTable.PivotFields('location_name').Position = 3\n",
    "#PivotTable.PivotFields('Gender').CurrentPage = 'M'\n",
    "PivotTable.PivotFields('Vial_Mixed?').Orientation = win32c.xlColumnField\n",
    "PivotTable.PivotFields('Vial_Mixed?').Position = 1\n",
    "PivotTable.PivotFields('Vial_Mixed?').Subtotals = [False, False, False, False, False, False, False, False, False, False, False, False]\n",
    "PivotTable.ColumnGrand = False\n",
    "PivotTable.RowGrand = False\n",
    "PivotTable.PivotFields('food').Orientation = win32c.xlRowField\n",
    "PivotTable.PivotFields('food').Position = 2\n",
    "PivotTable.PivotFields('food').Subtotals = [False, False, False, False, False, False, False, False, False, False, False, False]\n",
    "PivotTable.PivotFields('name').Orientation = win32c.xlRowField\n",
    "PivotTable.PivotFields('name').Position = 3\n",
    "PivotTable.PivotFields('name').Subtotals = [False, False, False, False, False, False, False, False, False, False, False, False]\n",
    "\n",
    "\n",
    "DataField = PivotTable.AddDataField(PivotTable.PivotFields('needs_treatment'))\n",
    "#DataField.NumberFormat = '#\\'##0.00'\n",
    "\n",
    "Excel.Visible = 1\n",
    "\n",
    "wb.SaveAs('C:\\\\Users\\\\eallan\\\\OneDrive - Fuel Medical Group, LLC\\\\Patients With Test Results Summary.xlsx')\n",
    "Excel.Application.Quit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import win32com.client\n",
    "Excel   = win32com.client.gencache.EnsureDispatch('Excel.Application') # Excel = win32com.client.Dispatch('Excel.Application')\n",
    "\n",
    "win32c = win32com.client.constants\n",
    "\n",
    "wb = Excel.Workbooks.Add()\n",
    "Sheet1 = wb.Worksheets(\"Sheet1\")\n",
    "\n",
    "TestData = [['Country','Name','Gender','Sign','Amount'],\n",
    "             ['CH','Max' ,'M','Plus',123.4567],\n",
    "             ['CH','Max' ,'M','Minus',-23.4567],\n",
    "             ['CH','Max' ,'M','Plus',12.2314],\n",
    "             ['CH','Max' ,'M','Minus',-2.2314],\n",
    "             ['CH','Sam' ,'M','Plus',453.7685],\n",
    "             ['CH','Sam' ,'M','Minus',-53.7685],\n",
    "             ['CH','Sara','F','Plus',777.666],\n",
    "             ['CH','Sara','F','Minus',-77.666],\n",
    "             ['DE','Hans','M','Plus',345.088],\n",
    "             ['DE','Hans','M','Minus',-45.088],\n",
    "             ['DE','Paul','M','Plus',222.455],\n",
    "             ['DE','Paul','M','Minus',-22.455]]\n",
    "\n",
    "for i, TestDataRow in enumerate(TestData):\n",
    "    for j, TestDataItem in enumerate(TestDataRow):\n",
    "        Sheet1.Cells(i+2,j+4).Value = TestDataItem\n",
    "\n",
    "cl1 = Sheet1.Cells(2,4)\n",
    "cl2 = Sheet1.Cells(2+len(TestData)-1,4+len(TestData[0])-1)\n",
    "PivotSourceRange = Sheet1.Range(cl1,cl2)\n",
    "\n",
    "PivotSourceRange.Select()\n",
    "\n",
    "wb.Sheets.Add (After=wb.Sheets(1))\n",
    "Sheet2 = wb.Worksheets(2)\n",
    "cl3=Sheet2.Cells(4,1)\n",
    "PivotTargetRange=  Sheet2.Range(cl3,cl3)\n",
    "PivotTableName = 'ReportPivotTable'\n",
    "\n",
    "PivotCache = wb.PivotCaches().Create(SourceType=win32c.xlDatabase, SourceData=PivotSourceRange, Version=win32c.xlPivotTableVersion14)\n",
    "\n",
    "PivotTable = PivotCache.CreatePivotTable(TableDestination=PivotTargetRange, TableName=PivotTableName, DefaultVersion=win32c.xlPivotTableVersion14)\n",
    "\n",
    "PivotTable.PivotFields('Name').Orientation = win32c.xlRowField\n",
    "PivotTable.PivotFields('Name').Position = 1\n",
    "PivotTable.PivotFields('Gender').Orientation = win32c.xlPageField\n",
    "PivotTable.PivotFields('Gender').Position = 1\n",
    "PivotTable.PivotFields('Gender').CurrentPage = 'M'\n",
    "PivotTable.PivotFields('Country').Orientation = win32c.xlColumnField\n",
    "PivotTable.PivotFields('Country').Position = 1\n",
    "PivotTable.PivotFields('Country').Subtotals = [False, False, False, False, False, False, False, False, False, False, False, False]\n",
    "PivotTable.PivotFields('Sign').Orientation = win32c.xlColumnField\n",
    "PivotTable.PivotFields('Sign').Position = 2\n",
    "\n",
    "DataField = PivotTable.AddDataField(PivotTable.PivotFields('Amount'))\n",
    "DataField.NumberFormat = '#\\'##0.00'\n",
    "\n",
    "Excel.Visible = 1\n",
    "\n",
    "wb.SaveAs('ranges_and_offsets.xlsx')\n",
    "Excel.Application.Quit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "lcns = pd.read_sql_query(\"SELECT patient_id, practice_chart_id, practice_id FROM practice_patient_refs where patient_id IS NOT NULL OR practice_id IS NOT NULL\", myconnection)\n",
    "lcns.fillna('M', inplace=True)\n",
    "lcns_test = lcns[lcns['practice_chart_id'] == \"03/18/1982\"]\n",
    "#lcns_test = lcns['practice_chart_id'][1]\n",
    "lcns_test = \"03%18/1982\"\n",
    "lcns_unique = lcns_test[2]\n",
    "lcns_unique\n",
    "#lcns_unique = ''.join(set(lcns_test['practice_chart_id']))\n",
    "#lcns_unique\n",
    "#lcns\n",
    "#lcns_unique[2]\n",
    "#c = []\n",
    "#for i in range((len(lcns.index))):\n",
    "#    lcns_test = lcns['practice_chart_id'][i]\n",
    "#    for j in range(len(lcns_test)):\n",
    "#        lcns_unique = lcns_test[j]\n",
    "#        c.append({'Unique Characters': lcns_unique,\n",
    "#                 'needed_column': 'Column',\n",
    "#                 'count_values': '2'})\n",
    "#new_test_columns = pd.DataFrame(c)\n",
    "#new_test_columns\n",
    "#unique_lcn_characters = pd.pivot_table(new_test_columns, index=['Unique Characters'], columns=['needed_column'], values=['count_values'], aggfunc='count')\n",
    "#unique_lcn_characters.to_excel('Count of Each Character Instance in the LCN.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#benchmarks = pd.read_excel('Documents/Benchmark %s %s KPIs Formatted.xlsx' % (month, year))\n",
    "#benchmarks_needed = benchmarks[['index', 'Benchmark']]\n",
    "#benchmarks_needed\n",
    "#output_benchmark = benchmarks_needed[benchmarks_needed['index'].isin(output_df['index'])]\n",
    "#output_benchmark\n",
    "#location_benchmark = benchmarks_needed[benchmarks_needed['index'].isin(practice_locations['index'])]\n",
    "#location_benchmark\n",
    "#revenue_benchmark = benchmarks_needed[benchmarks_needed['index'].isin(revenue_stats['Revenue & Profit Contribution Statistics'])]\n",
    "#revenue_benchmark\n",
    "#test_benchmark = benchmarks_needed[benchmarks_needed['index'].isin(test_stats['Testing Statistics'])]\n",
    "#test_benchmark\n",
    "#treatment_benchmark = benchmarks_needed[benchmarks_needed['index'].isin(treat_stats['Treatment Statistics'])]\n",
    "#treatment_benchmark\n",
    "#type(practice_id)\n",
    "#practice_id\n",
    "#total_errors = pd.read_sql_query(\"SELECT a.id, a.user_id, b.username, a.practice_id, a.location_id, e.name, a.category_id, a.description, c.category, d.name as error_type, a.date FROM user_errors a LEFT JOIN users b ON a.user_id = b.id LEFT JOIN user_error_categories c ON a.category_id=c.id LEFT JOIN user_error_types d ON c.type_id = d.id LEFT JOIN practice_locations e ON a.location_id = e.id WHERE a.practice_id = 36 and a.date BETWEEN '2016-01-01 00:00:00' AND '2016-12-31 23:59:59' AND d.name = 'Mixing'\", myconnection)\n",
    "#total_errors.to_excel('Documents/FY 2016 Mixing Errors AUGENT.xlsx')\n",
    "#total_vials_mixed = pd.read_sql_query(\"SELECT DISTINCT v.patient_id as Patients_Tested, v.barcode, monthname(v.Mix_Date) as test_date, v.Mix_Date as month_year, z.intake_method, v.mix_location_id, a.Name as location_name, v.mix_practice_id, b.name as practice_name, u.username, u.firstname, u.lastname FROM vials v LEFT JOIN patients z on v.patient_id = z.id left join users u on if(v.created_by is null, v.mixer_id, v.created_by) = u.id left join practice_locations a on v.mix_location_id = a.id left join practices b on v.mix_practice_id = b.id where (v.status_id <> 2 or v.status_id is not null) and v.is_child <> 1 AND v.Mix_Date BETWEEN '2016-01-01 00:00:00' AND '2016-12-31 23:59:59' and v.Patient_ID is not null and v.mix_practice_id = 36 and u.id is not null\", myconnection)\n",
    "total_vials_mixed = pd.read_sql_query(\"SELECT DISTINCT(v.barcode) AS barcode, v.patient_id as Patients_Tested, vn.name, vs.status, z.firstname, z.middlename, z.lastname, v.Mix_Date as month_year, z.intake_method, v.mix_location_id, a.Name as location_name, v.mix_practice_id, b.name as practice_name, u.username FROM vials v LEFT JOIN vial_names vn ON v.id=vn.vial_id LEFT JOIN vial_statuses vs on v.status_id = vs.id LEFT JOIN patients z on v.patient_id = z.id left join users u on if(v.created_by is null, v.mixer_id, v.created_by) = u.id left join practice_locations a on v.mix_location_id = a.id left join practices b on v.mix_practice_id = b.id where (v.status_id <> 2 or v.status_id is not null) and (v.is_child = 0 OR v.is_child IS null OR (v.is_child = 1 and v.from_titrated = 1)) AND v.Mix_Date BETWEEN '2016-01-01 00:00:00' AND '2016-12-31 23:59:59' and (v.mix_practice_id = 36 OR z.shot_practice_id = 36) ORDER BY barcode\", myconnection)\n",
    "total_vials_mixed.to_excel('FY 2016 Total Vials Mixed AUGENT.xlsx')\n",
    "total_vials_mixed_test = pd.read_sql_query(\"SELECT DISTINCT(v.barcode) AS barcode, v.patient_id as Patients_Tested, vn.name, vs.status, z.firstname, z.middlename, z.lastname, v.Mix_Date as month_year, z.intake_method, v.mix_location_id, a.Name as location_name, v.mix_practice_id, b.name as practice_name, u.username FROM vials v LEFT JOIN vial_names vn ON v.id=vn.vial_id LEFT JOIN vial_statuses vs on v.status_id = vs.id LEFT JOIN patients z on v.patient_id = z.id left join users u on if(v.created_by is null, v.mixer_id, v.created_by) = u.id left join practice_locations a on v.mix_location_id = a.id left join practices b on v.mix_practice_id = b.id where (v.status_id <> 2 or v.status_id is not null) and (v.is_child = 0 OR v.is_child IS null OR (v.is_child = 1 and v.from_titrated = 1)) AND v.Mix_Date BETWEEN '2016-01-01 00:00:00' AND '2016-12-31 23:59:59' and (v.mix_practice_id = 36 OR z.shot_practice_id = 36) ORDER BY barcode\", myconnection)\n",
    "total_vials_mixed_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "test_pricks = patients_pricks_injections_Vials_treatment_total\n",
    "test_pricks\n",
    "#patients_pricks_injections_Vials_treatment\n",
    "test_unique = total_errors.test_date.unique()\n",
    "test_unique\n",
    "#total_errors\n",
    "total_errors_pivot\n",
    "update_missing_months\n",
    "missing_months_final\n",
    "missing_months\n",
    "patients_pricks_injections_Vials_treatment_total\n",
    "#charge_columns_values\n",
    "#charge_columns\n",
    "#output_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import calendar\n",
    "missing = []\n",
    "for i, m in enumerate(calendar.month_name[0:(len(patients_pricks_injections_Vials_treatment_total.columns) - 2)]):\n",
    "    missing.append({'Months' : m.capitalize()})  \n",
    "missing_months = pd.DataFrame(missing)\n",
    "missing_months_final = missing_months[~missing_months['Months'].isin(total_errors['test_date'])]\n",
    "missing_error_months = []\n",
    "for i, j in enumerate(calendar.month_name[1:(len(missing_months_final.index)+1 )]):\n",
    "    missing_error_months.append({'Patients_Tested' : i,\n",
    "                                 'practice_id' : '# of Errors',\n",
    "                                 'test_date' : j.capitalize(),\n",
    "                                 'month_year' : '0%s - %s' % (i + 1, year),\n",
    "                                 'practice_name' : '%s' % (practice_name),\n",
    "                                 'username' : '',\n",
    "                                 'firstname' : '',\n",
    "                                 'lastname' : ''})\n",
    "update_missing_months = pd.DataFrame(missing_error_months)    \n",
    "update_missing_months = update_missing_months[['Patients_Tested', 'practice_id', 'test_date', 'month_year', 'practice_name', 'username', 'firstname', 'lastname']]\n",
    "update_missing_months\n",
    "#(len(patients_pricks_injections_Vials_treatment_total.columns) - 1)\n",
    "#(len(patients_pricks_injections_Vials_treatment_total.columns) - 2)\n",
    "#benchmarks = pd.read_excel('Documents/Benchmark %s %s KPIs Formatted.xlsx' % (month, year))\n",
    "#benchmarks_needed = benchmarks[['index', 'Benchmark']]\n",
    "#output_benchmark = benchmarks_needed[benchmarks_needed['index'].isin(output_df['index'])]\n",
    "#output_benchmark.drop(['index'], inplace=True, axis=1)\n",
    "#output_benchmark"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "treat_stats_months = pd.DataFrame({'merge' : [1,2,3,4,5,6,7,8,9]})\n",
    "for i, m in enumerate(calendar.month_name[1:]):\n",
    "    last_date = calendar.monthrange(year,i + 1)[1]\n",
    "    month_name = m.capitalize()\n",
    "    l = string.ascii_uppercase[i + 2:i + 3]\n",
    "    if PED >= datetime.datetime(year, i + 1, last_date, 0, 0, 0).strftime('%Y-%m-%d %H:%M:%S'):\n",
    "        treat_stats_new = pd.DataFrame({'%s' % (month_name) :['=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials.index) + 11), i + 2), xl_rowcol_to_cell((len(tp4.index) + 11), i + 2)), \n",
    "                                               '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 11 + len(injections.index)), i + 2), xl_rowcol_to_cell((len(patients_pricks_injections_Vials_treatment.index) + 10), i + 2)),\n",
    "                                               '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 12 + len(injections.index)), i + 2), xl_rowcol_to_cell((len(patients_pricks_injections_Vials_treatment.index) + 10), i + 2)),\n",
    "                                               '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 12), i + 2), xl_rowcol_to_cell((len(patients_pricks_injections_Vials_treatment_total.index) + 13 + len(practice_locations_jan.index)), i + 2)),\n",
    "                                               '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 12), i + 2), xl_rowcol_to_cell((len(patients_pricks_injections_Vials_treatment_total.index) + 11 + len(practice_locations_jan.index)), i + 2)),\n",
    "                                               '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 11), i + 2), xl_rowcol_to_cell((len(patients_pricks_injections_Vials_treatment_total.index) + 13 + len(practice_locations_jan.index)), i + 2)),\n",
    "                                               '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 11), i + 2), xl_rowcol_to_cell((len(patients_pricks_injections_Vials_treatment_total.index) + 12 + len(practice_locations_jan.index)), i + 2)),\n",
    "                                               '=%s5/%s' % (l, xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 12), i + 2)),\n",
    "                                               '=%s4/%s' % (l, xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials.index) + 12), i + 2))],\n",
    "                                  'merge': [1,2,3,4,5,6,7,8,9]})\n",
    "        treat_stats_new = treat_stats_new[['%s'  % (month_name), 'merge']]\n",
    "        treat_stats_months = treat_stats_months.merge(treat_stats_new, on='merge', how='left')\n",
    "treat_stats_index = pd.DataFrame({'Treatment Statistics': ['Testing to Treatment Conversion Rate',\n",
    "                                                            '% of New Patients on SCIT',\n",
    "                                                            '% of New Patients on SLIT',\n",
    "                                                            '# of Injections per Tech',\n",
    "                                                            '# of Injections per Room',\n",
    "                                                            '# of Vials Mixed per Tech',\n",
    "                                                            '# of Vials Mixed per Mixing Location',\n",
    "                                                            'SCIT Charge Per Injection',\n",
    "                                                            'SCIT Charge Per Vial'], \n",
    "                                'merge': [1,2,3,4,5,6,7,8,9]})\n",
    "treat_stats_total = pd.DataFrame({'Total' :['=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials.index) + 11), (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(tp4.index) + 11), (len(output_df.columns) - 1))), \n",
    "                                               '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 11 + len(injections.index)), (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(patients_pricks_injections_Vials_treatment.index) + 10), (len(output_df.columns) - 1))),\n",
    "                                               '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 12 + len(injections.index)), (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(patients_pricks_injections_Vials_treatment.index) + 10), (len(output_df.columns) - 1))),\n",
    "                                               '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 12), (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(patients_pricks_injections_Vials_treatment_total.index) + 13 + len(practice_locations_jan.index)), (len(output_df.columns) - 1))),\n",
    "                                               '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 12), (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(patients_pricks_injections_Vials_treatment_total.index) + 11 + len(practice_locations_jan.index)), (len(output_df.columns) - 1))),\n",
    "                                               '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 11), (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(patients_pricks_injections_Vials_treatment_total.index) + 13 + len(practice_locations_jan.index)), (len(output_df.columns) - 1))),\n",
    "                                               '=%s/%s' % (xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials.index) + 11), (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(patients_pricks_injections_Vials_treatment_total.index) + 12 + len(practice_locations_jan.index)), (len(output_df.columns) - 1))),\n",
    "                                               '=%s/%s' % (xl_rowcol_to_cell(4, (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(patients_and_pricks_and_injections_Vials_total_Vials.index) + 12), (len(output_df.columns) - 1))),\n",
    "                                               '=%s/%s' % (xl_rowcol_to_cell(3, (len(output_df.columns) - 1)), xl_rowcol_to_cell((len(patients_and_pricks_and_injections.index) + 12), (len(output_df.columns) - 1)))],\n",
    "                                  'merge': [1,2,3,4,5,6,7,8,9]})\n",
    "treat_stats = treat_stats_index.merge(treat_stats_months, on='merge', how='left').merge(treat_stats_total, on='merge', how='left')\n",
    "treat_stats.drop('merge', inplace=True, axis=1)\n",
    "treat_stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#for i, m in enumerate(calendar.month_name[1:]):\n",
    "#    last_date = calendar.monthrange(year,i + 1)[1]\n",
    "#    month_name = m.capitalize()\n",
    "#    if PED >= datetime.datetime(year, i + 1, last_date, 0, 0, 0).strftime('%Y-%m-%d %H:%M:%S'):\n",
    "#        if i + 1 < 10:\n",
    "#            total_techs_for_practice_size = pd.read_sql_query(\"SELECT count(DISTINCT tech.tester, tech.username) AS %(month_name)s, tech.practice_id, name.name FROM (( SELECT a.patient_id AS Patients_Tested, monthname(a.date) AS test_date, a.date AS month_year, b.practice_id, a.shot_giver_id AS tester, 'shot' as type_of_test, 'ZXCV78' as barcode, 'sht' as intake_method, c.username, c.firstname, c.lastname FROM patient_visits_shots a LEFT JOIN patients b ON a.patient_id = b.id LEFT JOIN users c ON c.id = a.shot_giver_id WHERE a.active = 1 AND a.Date BETWEEN %(PSD)s AND %(PED)s AND b.id IS NOT NULL AND c.id IS NOT NULL ) UNION ( SELECT DISTINCT q.patient AS Patients_Tested, q.tester, monthname(q.test_date) AS test_date, q.test_date AS month_year, q.type AS type_of_test, 'QWER45' as barcode, 'tst' as intake_method, q.practice_ID, z.username, z.firstname, z.lastname FROM (( SELECT DISTINCT (a.patient_id) AS patient, a.user_id AS tester, a.test_date AS test_date, a.location_ID, d.Name, a.practice_id, i.name AS Practice_name, 'injection' AS type FROM intradermal_tests a INNER JOIN practice_locations d ON a.Location_ID = d.id INNER JOIN practices i ON a.practice_id = i.id WHERE a.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (a.Status IS NULL OR a.Status <> 'deleted')) UNION ( SELECT DISTINCT (b.patient_id) AS patient, b.tester_id AS tester, b.test_date AS test_date, b.location_id, e.Name, b.practice_id, i.name AS Practice_name, 'mqt' AS type FROM mq_tests b INNER JOIN practice_locations e ON b.Location_ID = e.id INNER JOIN practices i ON b.practice_id = i.id WHERE b.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (b.Status IS NULL OR b.Status <> 'deleted')) UNION ( SELECT DISTINCT (c.patient_id) AS patient, c.tester_id AS tester, c.test_date AS test_date, c.location_id, f.Name, c.practice_id, i.name AS Practice_name, 'stick' AS type FROM prick_tests c INNER JOIN practice_locations f ON c.location_id = f.id INNER JOIN practices i ON c.practice_id = i.id WHERE c.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (c.Status IS NULL OR c.Status <> 'deleted')) UNION ( SELECT DISTINCT (g.patient_id) AS patient, g.blood_drawn_by AS tester, g.Start_Date AS test_date, g.Start_Location_id AS Location_ID, h.name, g.start_practice_id, i.name AS Practice_name, 'ige' AS type FROM ige_tests g INNER JOIN practice_locations h ON g.start_practice_id = h.ID INNER JOIN practices i ON g.start_practice_id = i.id WHERE g.Start_Date BETWEEN %(PSD)s AND %(PED)s AND (g.Status = 'Complete')) ORDER BY Location_ID) q LEFT JOIN users z ON q.tester = z.id) UNION ( SELECT DISTINCT v.patient_id AS Patients_Tested, v.barcode, IF (v.created_by IS NULL, v.mixer_id, v.created_by) AS tester, monthname(v.Mix_Date) AS test_date, v.Mix_Date AS month_year, z.intake_method, 'vial' as type_of_test, v.mix_practice_id AS practice_id, u.username, u.firstname, u.lastname FROM vials v LEFT JOIN patients z ON v.patient_id = z.id LEFT JOIN users u ON IF (v.created_by IS NULL, v.mixer_id, v.created_by) = u.id LEFT JOIN practice_locations a ON v.mix_location_id = a.id LEFT JOIN practices b ON v.mix_practice_id = b.id WHERE (v.status_id <> 2 OR v.status_id IS NOT NULL ) AND v.is_child <> 1 AND v.Mix_Date BETWEEN %(PSD)s AND %(PED)s AND v.Patient_ID IS NOT NULL AND u.id IS NOT NULL ) UNION ( SELECT a.id AS Patients_Tested, a.user_id AS tester, a.practice_id, monthname(a.date) AS test_date, a.date AS month_year, 'ASDF12' as barcode, 'err' as intake_method, 'error' as type_of_test, u.username, u.firstname, u.lastname FROM user_errors a INNER JOIN practice_locations b ON a.Location_ID = b.id INNER JOIN practices c ON a.practice_id = c.id LEFT JOIN users u ON a.user_id = u.id WHERE a.Date BETWEEN %(PSD)s AND %(PED)s)) tech left join practices name on tech.practice_id = name.id WHERE tech.month_year BETWEEN '%(year)s-0%(month)s-01 00:00:00' AND '%(year)s-0%(month)s-%(last_date)s 23:59:59' GROUP BY tech.practice_ID\", myconnection, params={\"year\":year, \"month_name\":month_name, \"month\":i + 1,\"last_date\":last_date, \"PSD\":PSD, \"PED\":PED})\n",
    "#        else:\n",
    "#            total_techs_for_practice_size = pd.read_sql_query(\"SELECT count(DISTINCT tech.tester, tech.username) AS %(month_name)s, tech.practice_id, name.name FROM (( SELECT a.patient_id AS Patients_Tested, monthname(a.date) AS test_date, a.date AS month_year, b.practice_id, a.shot_giver_id AS tester, 'shot' as type_of_test, 'ZXCV78' as barcode, 'sht' as intake_method, c.username, c.firstname, c.lastname FROM patient_visits_shots a LEFT JOIN patients b ON a.patient_id = b.id LEFT JOIN users c ON c.id = a.shot_giver_id WHERE a.active = 1 AND a.Date BETWEEN %(PSD)s AND %(PED)s AND b.id IS NOT NULL AND c.id IS NOT NULL ) UNION ( SELECT DISTINCT q.patient AS Patients_Tested, q.tester, monthname(q.test_date) AS test_date, q.test_date AS month_year, q.type AS type_of_test, 'QWER45' as barcode, 'tst' as intake_method, q.practice_ID, z.username, z.firstname, z.lastname FROM (( SELECT DISTINCT (a.patient_id) AS patient, a.user_id AS tester, a.test_date AS test_date, a.location_ID, d.Name, a.practice_id, i.name AS Practice_name, 'injection' AS type FROM intradermal_tests a INNER JOIN practice_locations d ON a.Location_ID = d.id INNER JOIN practices i ON a.practice_id = i.id WHERE a.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (a.Status IS NULL OR a.Status <> 'deleted')) UNION ( SELECT DISTINCT (b.patient_id) AS patient, b.tester_id AS tester, b.test_date AS test_date, b.location_id, e.Name, b.practice_id, i.name AS Practice_name, 'mqt' AS type FROM mq_tests b INNER JOIN practice_locations e ON b.Location_ID = e.id INNER JOIN practices i ON b.practice_id = i.id WHERE b.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (b.Status IS NULL OR b.Status <> 'deleted')) UNION ( SELECT DISTINCT (c.patient_id) AS patient, c.tester_id AS tester, c.test_date AS test_date, c.location_id, f.Name, c.practice_id, i.name AS Practice_name, 'stick' AS type FROM prick_tests c INNER JOIN practice_locations f ON c.location_id = f.id INNER JOIN practices i ON c.practice_id = i.id WHERE c.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (c.Status IS NULL OR c.Status <> 'deleted')) UNION ( SELECT DISTINCT (g.patient_id) AS patient, g.blood_drawn_by AS tester, g.Start_Date AS test_date, g.Start_Location_id AS Location_ID, h.name, g.start_practice_id, i.name AS Practice_name, 'ige' AS type FROM ige_tests g INNER JOIN practice_locations h ON g.start_practice_id = h.ID INNER JOIN practices i ON g.start_practice_id = i.id WHERE g.Start_Date BETWEEN %(PSD)s AND %(PED)s AND (g.Status = 'Complete')) ORDER BY Location_ID) q LEFT JOIN users z ON q.tester = z.id) UNION ( SELECT DISTINCT v.patient_id AS Patients_Tested, v.barcode, IF (v.created_by IS NULL, v.mixer_id, v.created_by) AS tester, monthname(v.Mix_Date) AS test_date, v.Mix_Date AS month_year, z.intake_method, 'vial' as type_of_test, v.mix_practice_id AS practice_id, u.username, u.firstname, u.lastname FROM vials v LEFT JOIN patients z ON v.patient_id = z.id LEFT JOIN users u ON IF (v.created_by IS NULL, v.mixer_id, v.created_by) = u.id LEFT JOIN practice_locations a ON v.mix_location_id = a.id LEFT JOIN practices b ON v.mix_practice_id = b.id WHERE (v.status_id <> 2 OR v.status_id IS NOT NULL ) AND v.is_child <> 1 AND v.Mix_Date BETWEEN %(PSD)s AND %(PED)s AND v.Patient_ID IS NOT NULL AND u.id IS NOT NULL ) UNION ( SELECT a.id AS Patients_Tested, a.user_id AS tester, a.practice_id, monthname(a.date) AS test_date, a.date AS month_year, 'ASDF12' as barcode, 'err' as intake_method, 'error' as type_of_test, u.username, u.firstname, u.lastname FROM user_errors a INNER JOIN practice_locations b ON a.Location_ID = b.id INNER JOIN practices c ON a.practice_id = c.id LEFT JOIN users u ON a.user_id = u.id WHERE a.Date BETWEEN %(PSD)s AND %(PED)s)) tech left join practices name on tech.practice_id = name.id WHERE tech.month_year BETWEEN '%(year)s-%(month)s-01 00:00:00' AND '%(year)s-%(month)s-%(last_date)s 23:59:59' GROUP BY tech.practice_ID\", myconnection, params={\"year\":year, \"month_name\":month_name, \"month\":i + 1,\"last_date\":last_date, \"PSD\":PSD, \"PED\":PED})\n",
    "#total_techs_for_practice_size.sort_values('%s' % (month))\n",
    "#Small, Medium, Large = total_techs_for_practice_size[total_techs_for_practice_size['%s' % (month)] <= 4], total_techs_for_practice_size[(total_techs_for_practice_size['%s' % (month)] <= 10) & (total_techs_for_practice_size['%s' % (month)] >= 5)], total_techs_for_practice_size[total_techs_for_practice_size['%s' % (month)] >= 11]\n",
    "#small_tuple = tuple(Small.practice_id)\n",
    "#medium_tuple = tuple(Medium.practice_id)\n",
    "#large_tuple = tuple(Large.practice_id)\n",
    "total_doctors = pd.read_sql_query(\"SELECT pd.practice_id, count(DISTINCT(pd.id)) as total_doctors, count(p.id) AS total_patients FROM practice_doctors pd LEFT JOIN patients p ON pd.id = p.mix_practice_doctor_id WHERE pd.active = 1 GROUP BY pd.practice_id\", myconnection)\n",
    "total_doctors.sort_values('total_doctors')\n",
    "Small, Medium, Large = total_doctors[total_doctors['total_doctors'] <= 4], total_doctors[(total_doctors['total_doctors'] <= 10) & (total_doctors['total_doctors'] >= 5)], total_doctors[total_doctors['total_doctors'] >= 11]\n",
    "Small = Small[['practice_id']].astype(str)\n",
    "Medium = Medium[['practice_id']].astype(str)\n",
    "Large = Large[['practice_id']].astype(str)\n",
    "small_tuple = tuple(Small.practice_id)\n",
    "medium_tuple = tuple(Medium.practice_id)\n",
    "large_tuple = tuple(Large.practice_id)\n",
    "if '%s' % (practice_id) in tuple(Small.practice_id):\n",
    "    segment = 'Small'\n",
    "elif '%s' % (practice_id) in tuple(Medium.practice_id):\n",
    "    segment = 'Medium'\n",
    "elif '%s' % (practice_id) in tuple(Large.practice_id):\n",
    "    segment = 'Large'\n",
    "else:\n",
    "    segment = 'Error'\n",
    "segment\n",
    "#medium_tuple\n",
    "#practice_id\n",
    "#tuple(Medium.practice_id)\n",
    "#benchmark_groups = tuple(Medium.practice_id)\n",
    "#segment = 'Medium'\n",
    "#practice_name = 'Benchmark %s' % (segment)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "practices = pd.read_sql_query(\"select * from practices where enabled = 1 and id <> 9\", myconnection)\n",
    "practices\n",
    "#for i in range(len(practices)):\n",
    "#    practice_test_id = int(practices['id'][i])\n",
    "#    practice_test_name = practices['name'][i]\n",
    "#practice_test_name\n",
    "#practice_test_id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import plotly.dashboard_objs as dashboard\n",
    "import IPython.display\n",
    "from IPython.display import Image\n",
    "import plotly.graph_objs as go\n",
    "import plotly.plotly as py\n",
    "import matplotlib as mt\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sbn\n",
    "from ipywidgets import widgets \n",
    "from IPython.display import display, clear_output, Image\n",
    "from plotly.graph_objs import *\n",
    "from plotly.widgets import GraphWidget\n",
    "#go.Histogram()\n",
    "output_df_test = output_df\n",
    "output_df_test['new_average'] = (output_df_test['January'] + output_df_test['February'] + output_df_test['March'])/3\n",
    "visualize_data = pd.concat([output_df_test[['index', 'new_average']], output_benchmark], axis=1, join='inner')\n",
    "#visualize_data.set_index('index', drop=True, append=False, inplace=True, verify_integrity=False)\n",
    "visualize_data\n",
    "#length_df = []\n",
    "#for i in range(len(visualize_data)):\n",
    "#    length_df.append({'Length' : i})\n",
    "#length_df_final = pd.DataFrame(length_df)\n",
    "#length_df_final\n",
    "#final_Data = pd.concat([length_df_final, visualize_data], axis=1)\n",
    "final_Data = visualize_data\n",
    "final_Data.set_index('index', drop=True, append=False, inplace=True, verify_integrity=False)\n",
    "final_Data\n",
    "average = pd.DataFrame(final_Data[['new_average']])\n",
    "#average.plot.bar(x='Length', y='new_average')\n",
    "medium = pd.DataFrame(final_Data[['Benchmark Medium']])\n",
    "#medium.plot.bar(x='Length', y='Benchmark Medium')\n",
    "all_ = pd.DataFrame(final_Data[['Benchmark All']])\n",
    "#all_.plot.bar(x='Length', y='Benchmark All')\n",
    "visualize_data\n",
    "visualize_data.index.tolist()\n",
    "#list(range(len(visualize_data['new_average'])))\n",
    "#visualize_data.index[14]\n",
    "#output_df_test\n",
    "#average.index.tolist()\n",
    "#medium = pd.DataFrame(visualize_data['Benchmark Medium']).T\n",
    "#medium\n",
    "#all_ = pd.DataFrame(visualize_data['Benchmark All']).T\n",
    "#all_\n",
    "#plt.hist(average, average, 'ro')\n",
    "#plt.show()\n",
    "#fig = plt.figure()\n",
    "#ax = fig.add_subplot(3,1,2)\n",
    "#ax.bar(visualize_data['new_average'], range(len(visualize_data.index)))\n",
    "#ax.bar(visualize_data['Benchmark Medium'], range(len(visualize_data.index)))\n",
    "#ax.bar(visualize_data['Benchmark All'], range(len(visualize_data.index)))\n",
    "#plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "for i in range(len(visualize_data.index)):\n",
    "    # Setting the positions and width for the bars\n",
    "    pos = list(range(len(visualize_data['new_average'])))\n",
    "    width = 0.25\n",
    "\n",
    "    # Plotting the bars\n",
    "    fig, ax = plt.subplots(figsize=(10,5))\n",
    "\n",
    "    # Create a bar with pre_score data,\n",
    "    # in position pos,\n",
    "    plt.bar(i,\n",
    "            #using df['pre_score'] data,\n",
    "#            visualize_data['new_average'],\n",
    "            average.iloc[i],\n",
    "            # of width\n",
    "            width,\n",
    "            # with alpha 0.5\n",
    "            alpha=0.5,\n",
    "            # with color\n",
    "            color='#EE3224',\n",
    "            # with label the first value in first_name\n",
    "            label=visualize_data.index.tolist())\n",
    "\n",
    "    # Create a bar with mid_score data,\n",
    "    # in position pos + some width buffer,\n",
    "#    plt.bar([p + width for p in pos],\n",
    "    plt.bar([i + width],\n",
    "            #using df['mid_score'] data,\n",
    "#            visualize_data['Benchmark Medium'],\n",
    "            medium.iloc[i],\n",
    "            # of width\n",
    "            width,\n",
    "            # with alpha 0.5\n",
    "            alpha=0.5,\n",
    "            # with color\n",
    "            color='#F78F1E',\n",
    "            # with label the second value in first_name\n",
    "            label=visualize_data.index.tolist())\n",
    "\n",
    "    # Create a bar with post_score data,\n",
    "    # in position pos + some width buffer,\n",
    "    plt.bar([i + width*2],\n",
    "            #using df['post_score'] data,\n",
    "#            visualize_data['Benchmark All'],\n",
    "            all_.iloc[i],\n",
    "            # of width\n",
    "            width,\n",
    "            # with alpha 0.5\n",
    "            alpha=0.5,\n",
    "            # with color\n",
    "            color='#FFC222',\n",
    "            # with label the third value in first_name\n",
    "            label=visualize_data.index.tolist())\n",
    "\n",
    "    # Set the y axis label\n",
    "    #ax.set_ylabel('Score')\n",
    "\n",
    "    # Set the chart's title\n",
    "    #ax.set_title('Test Subject Scores')\n",
    "\n",
    "    # Set the position of the x ticks\n",
    "#    ax.set_xticks([p + 1.5 * width for p in pos])\n",
    "    plt.xticks(np.arange(width, len(visualize_data.index) + width), visualize_data.index.tolist())\n",
    "\n",
    "    # Set the labels for the x ticks\n",
    "#    ax.set_xticklabels(visualize_data.index[i], size='medium')\n",
    "                       #, rotation='vertical')\n",
    "\n",
    "    # Setting the x-axis and y-axis limits\n",
    "#    plt.xlim(min(pos)-width, max(pos)+width*4)\n",
    "    plt.xlim(i-width, i+width*3)\n",
    "    plt.ylim([0, max(visualize_data.iloc[i])])\n",
    "\n",
    "    # Adding the legend and showing the plot\n",
    "    plt.legend(['Current Monthly Average', 'Benchmark Medium', 'Benchmark All'], loc='upper left')\n",
    "    plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('https://raw.githubusercontent.com/yankev/testing/master/datasets/nycflights.csv')\n",
    "df = df.drop(df.columns[[0]], axis=1) \n",
    "df\n",
    "df['carrier'].unique()\n",
    "month = widgets.FloatSlider(\n",
    "    value=1.0,\n",
    "    min=1.0,\n",
    "    max=12.0,\n",
    "    step=1.0,\n",
    "    description='Month:',\n",
    "    continuous_update = False\n",
    ")\n",
    "\n",
    "use_date = widgets.Checkbox(\n",
    "    description='Date: ',\n",
    "    value=True,\n",
    ")\n",
    "\n",
    "container = widgets.HBox(children=[use_date, month] )\n",
    "\n",
    "textbox = widgets.Text(\n",
    "    description='Airline:   ',\n",
    "    value='Delta',\n",
    ")\n",
    "\n",
    "origin = widgets.Dropdown(\n",
    "    options=list(df['origin'].unique()),\n",
    "    value='LGA',\n",
    "    description='Origin Airport:',\n",
    ")\n",
    "\n",
    "\n",
    "### Assign an emptry graph widget with two traces\n",
    "\n",
    "g = GraphWidget('https://plot.ly/~eallan')\n",
    "def validate():\n",
    "    # print \"validating\"\n",
    "    if origin.value in df['origin'].unique() and textbox.value in df['carrier'].unique():\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "def response(change):\n",
    "    if validate():\n",
    "        # print \"using date\"\n",
    "        if use_date.value:\n",
    "            filter_list = [i and j and k for i,j,k in \n",
    "                           zip(df['month'] == month.value, df['carrier'] == textbox.value, \n",
    "                               df['origin'] == origin.value)]\n",
    "            temp_df = df[filter_list]\n",
    "            x1 = temp_df['arr_delay']\n",
    "            x2 = temp_df['dep_delay']\n",
    "            g.restyle({'x': [x1], 'name': 'Arrival Delays', 'type': 'histogram', \n",
    "                       'opacity': 0.75}, indices=0) \n",
    "            g.restyle({'x': [x2], 'name': 'Departure Delays', 'type': 'histogram', \n",
    "                       'opacity': 0.75}, indices=1)\n",
    "            g.relayout({'barmode': 'overlay', 'xaxis': {'title': 'Delay in Minutes'},\n",
    "                        'yaxis': {'title': 'Number of Delays'}})\n",
    "            # print temp_df.head()\n",
    "            \n",
    "        else:\n",
    "            # print \"not using date\"\n",
    "            filter_list = [i and j for i,j in \n",
    "                           zip(df['carrier'] == 'DL', df['origin'] == origin.value)]\n",
    "            temp_df = df[filter_list]\n",
    "            x1 = temp_df['arr_delay']\n",
    "            x2 = temp_df['dep_delay']\n",
    "            g.restyle({'x': [x1], 'name': 'Arrival Delays', 'type': 'histogram', \n",
    "                       'opacity': 0.75}, indices=0) \n",
    "            g.restyle({'x': [x2], 'name': 'Departure Delays', 'type': 'histogram', \n",
    "                       'opacity': 0.75}, indices=1)\n",
    "            g.relayout({'barmode': 'overlay'})\n",
    "            # print temp_df.head()\n",
    "    \n",
    "\n",
    "origin.observe(response, names=\"value\")\n",
    "textbox.observe(response, names=\"value\")\n",
    "month.observe(response, names=\"value\")\n",
    "use_date.observe(response, names=\"value\")\n",
    "g.observe(response, names=\"value\")\n",
    "display(container)\n",
    "container2 = widgets.HBox([origin, textbox])\n",
    "display(container2)\n",
    "display(g)\n",
    "#py.iplot(g)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#for i, m in enumerate(calendar.month_name[1:]):\n",
    "#    last_date = calendar.monthrange(year,i + 1)[1]\n",
    "#    month_name = m.capitalize()\n",
    "total_techs_for_practice_size = pd.read_sql_query(\"SELECT DISTINCT tech.tester, tech.username, tech.practice_id, name.name as practice_name, tech.location_id, locations.name as location_name, tech.test_date, year(tech.month_year) as year_and_month, date_format(tech.month_year, '%Y-%m') as month_year, tech.type_of_test FROM (( SELECT a.patient_id AS Patients_Tested, a.shot_giver_id AS tester, c.username, b.practice_id, d.location_id, monthname(a.date) AS test_date, a.date AS month_year, 1 as type_of_test, 'ZXCV78' as barcode, 'sht' as intake_method, c.firstname, c.lastname FROM patient_visits_shots a LEFT JOIN patients b ON a.patient_id = b.id LEFT JOIN users c ON c.id = a.shot_giver_id left join patient_visits d on a.visit_id = d.id WHERE a.active = 1 AND b.id IS NOT NULL AND c.id IS NOT NULL ) UNION ( SELECT DISTINCT q.patient AS Patients_Tested, q.tester, z.username, q.practice_ID, q.location_id, monthname(q.test_date) AS test_date, q.test_date AS month_year, /*q.type*/ 2 AS type_of_test, 'QWER45' as barcode, 'tst' as intake_method, z.firstname, z.lastname FROM (( SELECT DISTINCT (a.patient_id) AS patient, a.user_id AS tester, a.test_date AS test_date, a.location_ID, d.Name, a.practice_id, i.name AS Practice_name, 'injection' AS type FROM intradermal_tests a INNER JOIN practice_locations d ON a.Location_ID = d.id INNER JOIN practices i ON a.practice_id = i.id WHERE (a.Status IS NULL OR a.Status <> 'deleted')) UNION ( SELECT DISTINCT (b.patient_id) AS patient, b.tester_id AS tester, b.test_date AS test_date, b.location_id, e.Name, b.practice_id, i.name AS Practice_name, 'mqt' AS type FROM mq_tests b INNER JOIN practice_locations e ON b.Location_ID = e.id INNER JOIN practices i ON b.practice_id = i.id WHERE (b.Status IS NULL OR b.Status <> 'deleted')) UNION ( SELECT DISTINCT (c.patient_id) AS patient, c.tester_id AS tester, c.test_date AS test_date, c.location_id, f.Name, c.practice_id, i.name AS Practice_name, 'stick' AS type FROM prick_tests c INNER JOIN practice_locations f ON c.location_id = f.id INNER JOIN practices i ON c.practice_id = i.id WHERE (c.Status IS NULL OR c.Status <> 'deleted')) UNION ( SELECT DISTINCT (g.patient_id) AS patient, g.blood_drawn_by AS tester, g.Start_Date AS test_date, g.Start_Location_id AS location_id, h.name, g.start_practice_id, i.name AS Practice_name, 'ige' AS type FROM ige_tests g INNER JOIN practice_locations h ON g.start_practice_id = h.ID INNER JOIN practices i ON g.start_practice_id = i.id WHERE (g.Status = 'Complete')) ORDER BY Location_ID) q LEFT JOIN users z ON q.tester = z.id WHERE q.tester is not NULL and q.test_date is not NULL) UNION ( SELECT DISTINCT v.patient_id AS Patients_Tested, IF(v.created_by IS NULL, v.mixer_id, v.created_by) AS tester, u.username, v.mix_practice_id AS practice_id, v.mix_location_id as location_id, monthname(v.Mix_Date) AS test_date, v.Mix_Date AS month_year, 3 as type_of_test, v.barcode, z.intake_method, u.firstname, u.lastname FROM vials v LEFT JOIN patients z ON v.patient_id = z.id LEFT JOIN users u ON IF(v.created_by IS NULL, v.mixer_id, v.created_by) = u.id LEFT JOIN practice_locations a ON v.mix_location_id = a.id LEFT JOIN practices b ON v.mix_practice_id = b.id WHERE (v.status_id <> 2 OR v.status_id IS NOT NULL) AND v.is_child <> 1 AND v.Patient_ID IS NOT NULL AND u.id IS NOT NULL) UNION ( SELECT a.id AS Patients_Tested, a.user_id AS tester, u.username, a.practice_id, a.location_id, monthname(a.date) AS test_date, a.date AS month_year, 4 as type_of_test, 'ASDF12' as barcode, 'err' as intake_method, u.firstname, u.lastname FROM user_errors a INNER JOIN practice_locations b ON a.Location_ID = b.id INNER JOIN practices c ON a.practice_id = c.id LEFT JOIN users u ON a.user_id = u.id)) tech left join practices name on tech.practice_id = name.id left join practice_locations locations on tech.location_id = locations.id where year(tech.month_year) > 2015\", myconnection)\n",
    "total_techs_for_practice_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import matplotlib.mlab as mlab\n",
    "total_techs_for_practice_size['action'] = total_techs_for_practice_size['tester'] + total_techs_for_practice_size['type_of_test']\n",
    "#total_techs_for_practice_size['type_of_test'].unique()\n",
    "#1 = Shots, 2 = Tests, 3 = Vials, 4 = Errors\n",
    "plt.hist(total_techs_for_practice_size['action'], bins=(len(total_techs_for_practice_size['tester'].unique())))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import plotly.plotly as py\n",
    "import plotly.graph_objs as go \n",
    "import plotly \n",
    "plotly.tools.set_credentials_file(username='eallan', api_key='4vrddyLr6wxf8xuOPSCc')\n",
    "plotly.tools.set_config_file(world_readable=False, sharing='private')\n",
    "from datetime import datetime\n",
    "import pandas_datareader.data as web\n",
    "\n",
    "#df = web.DataReader(\"aapl\", 'yahoo',\n",
    "#                    datetime(2007, 10, 1),\n",
    "#                    datetime(2009, 4, 1))\n",
    "df = total_techs_for_practice_size\n",
    "\n",
    "#trace = go.Histogram(x=df.type_of_test)\n",
    "#                   y=)\n",
    "\n",
    "#data = [trace]\n",
    "data = [go.Histogram(x=df.type_of_test)]\n",
    "#layout = dict(\n",
    "#    title='Time series with range slider and selectors',\n",
    "#    xaxis=dict(\n",
    "#        rangeselector=dict(\n",
    "#            buttons=list([\n",
    "#                dict(count=1,\n",
    "#                     label='1m',\n",
    "#                     step='month',\n",
    "#                     stepmode='backward'),\n",
    "#                dict(count=6,\n",
    "#                     label='6m',\n",
    "#                     step='month',\n",
    "#                     stepmode='backward'),\n",
    "#                dict(count=1,\n",
    "#                    label='YTD',\n",
    "#                    step='year',\n",
    "#                    stepmode='todate'),\n",
    "#                dict(count=1,\n",
    "#                    label='1y',\n",
    "#                    step='year',\n",
    "#                    stepmode='backward'),\n",
    "#                dict(step='all')\n",
    "#            ])\n",
    "#        )\n",
    "#        ,\n",
    "#        rangeslider=dict(),\n",
    "#        type='date'\n",
    "#    )\n",
    "#)\n",
    "\n",
    "#fig = dict(data=data, layout=layout)\n",
    "#fig = go.Figure(data=data, layout=layout)\n",
    "py.iplot(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "data = [dict(\n",
    "        visible = False,\n",
    "        line=dict(color='00CED1', width=6),\n",
    "        name = '𝜈 = '+str(step),\n",
    "        x = np.arange(0,10,0.01),\n",
    "        y = np.sin(step*np.arange(0,10,0.01))) for step in np.arange(0,5,0.1)]\n",
    "data[10]['visible'] = True\n",
    "\n",
    "steps = []\n",
    "for i in range(len(data)):\n",
    "    step = dict(\n",
    "        method = 'restyle',\n",
    "        args = ['visible', [False] * len(data)],\n",
    "    )\n",
    "    step['args'][1][i] = True # Toggle i'th trace to \"visible\"\n",
    "    steps.append(step)\n",
    "\n",
    "sliders = [dict(\n",
    "    active = 10,\n",
    "    currentvalue = {\"prefix\": \"Frequency: \"},\n",
    "    pad = {\"t\": 50},\n",
    "    steps = steps\n",
    ")]\n",
    "\n",
    "layout = dict(sliders=sliders)\n",
    "fig = dict(data=data, layout=layout)\n",
    "\n",
    "py.iplot(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "test_query = pd.read_sql_query(\"SELECT c.name AS Practice, c.id, b.practice_chart_id AS ExternalPatientID, p.firstname AS FirstName, p.lastname AS LastName, p.middlename AS MiddleName, if(p.email IS NULL, NULL, p.email) AS EmailAdress, if(p.cellphone IS NULL AND p.homephone IS NULL, NULL, if(p.cellphone IS NULL, p.homephone, p.cellphone)) AS MobilePhone, '' AS CommunicationPreference, p.mix_practice_doctor_id AS PhysicianID, t.last_test_date AS EngagementBeginDate, '' AS EngagementEndDate, 'Allergy' AS EngagementReasonName, '' AS InterviewName, '' AS InterviewStartDate, '' AS InterviewEndDate, '' AS InterventionCode, '' AS InterventionStartDate, '' AS InterventionEndDate FROM (SELECT patient_id, create_date, practice_id, status_id FROM vial_requests WHERE status_id <> 1 GROUP BY patient_id) a LEFT JOIN patients p ON a.patient_id = p.id LEFT JOIN practice_patient_refs b ON p.id = b.patient_id LEFT JOIN (SELECT q.patient_id, q.last_test_date FROM (SELECT patient_id, last_test_date FROM ((SELECT patient_id, create_date AS last_test_date FROM vial_requests ORDER BY patient_id, create_date DESC)) p WHERE p.patient_id IS NOT NULL AND p.last_test_date IS NOT NULL GROUP BY patient_id) q) t ON t.patient_id = a.patient_id LEFT JOIN practices c ON a.practice_id = c.id LEFT JOIN practice_doctors e on p.mix_practice_doctor_id = e.id WHERE a.create_date BETWEEN %(yesterday_start)s AND %(yesterday_end)s\" , myconnection, params={\"yesterday_start\":yesterday_start, \"yesterday_end\":yesterday_end})\n",
    "test_query['CommunicationPreference'] = np.where((test_query['EmailAdress'] != None) & (test_query['EmailAdress'].notnull()), 'EMAIL', np.where((test_query['MobilePhone'] != None) & (test_query['MobilePhone'].notnull() & (test_query['MobilePhone'] != '')), 'PHONE', ''))\n",
    "test_query = test_query[test_query['CommunicationPreference'] != '']\n",
    "test_query\n",
    "distinct_practices = test_query['Practice'].unique().tolist()\n",
    "distinct_practices = test_query['']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import re\n",
    "patient_phone_numbers = pd.read_sql_query(\"select id, cellphone, homephone from patients\", myconnection)\n",
    "#anitgens_per_vial['title'].map(lambda x: re.sub(r\"\\W+|\\b\\d+\\b|\\W+\\d+\", '', x))\n",
    "patient_phone_numbers['homephonenew'] = patient_phone_numbers['homephone'].str.replace(r\"[a-zA-Z|-|-|`|.|,|/|+|=|#|'|@|(|)| |]+\", '')\n",
    "patient_phone_numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "yesterday = datetime.datetime.now() - datetime.timedelta(days=1)\n",
    "yesterday_ts = yesterday.strftime('%Y-%m-%d')\n",
    "yesterday_start = yesterday.strftime('%Y-%m-%d 00:00:00')\n",
    "yesterday_end = yesterday.strftime('%Y-%m-%d 23:59:59')\n",
    "from boxsdk import OAuth2, Client, JWTAuth\n",
    "oauth = OAuth2(\n",
    "    client_id='d3sucje7nxjjwa26q31g6a62uzx90wj2', \n",
    "    client_secret='XrapXVK0tZxELsCkrFes00SWIiWZCt5S', \n",
    "    access_token='WNOVRzeXBVa4KUnKVKtleovSarMNEPru',\n",
    "              )\n",
    "client = Client(oauth)\n",
    "shared_folder = client.folder(folder_id='30731714216').create_subfolder(\"%s\" % (yesterday_ts))\n",
    "#oauth = JWTAuth(\n",
    "#                client_id='d3sucje7nxjjwa26q31g6a62uzx90wj2', \n",
    "#                client_secret='XrapXVK0tZxELsCkrFes00SWIiWZCt5S', \n",
    "#                enterprise_id='33787381',\n",
    "#                jwt_key_id='16eyoln3',\n",
    "#                rsa_private_key_file_sys_path='C:\\\\cygwin64\\\\home\\\\eallan\\\\private_key.pem',\n",
    "#               )\n",
    "#access_token = oauth.authenticate_instance()\n",
    "#from boxsdk import Client\n",
    "#client = Client(oauth)\n",
    "#ev_user = client.user(user_id='2893008373')\n",
    "#ev_auth = JWTAuth(\n",
    "#                client_id='d3sucje7nxjjwa26q31g6a62uzx90wj2', \n",
    "#                client_secret='XrapXVK0tZxELsCkrFes00SWIiWZCt5S', \n",
    "#                enterprise_id='33787381',\n",
    "#                jwt_key_id='16eyoln3',\n",
    "#                rsa_private_key_file_sys_path='C:\\\\cygwin64\\\\home\\\\eallan\\\\private_key.pem',\n",
    "#               )\n",
    "#ev_auth.authenticate_app_user(ev_user)\n",
    "#ev_client = Client(ev_auth)\n",
    "#shared_folder = ev_client.folder(folder_id='30731714216').create_subfolder(\"%s\" % (yesterday_ts))\n",
    "test_query = pd.read_sql_query(\"SELECT c.name AS Practice, c.id, b.practice_chart_id AS ExternalPatientID, p.firstname AS FirstName, p.lastname AS LastName, p.middlename AS MiddleName, if(p.email IS NULL, NULL, p.email) AS EmailAdress, if(p.cellphone IS NULL AND p.homephone IS NULL, NULL, if(p.cellphone IS NULL, p.homephone, p.cellphone)) AS MobilePhone, '' AS CommunicationPreference, p.mix_practice_doctor_id AS PhysicianID, t.last_test_date AS EngagementBeginDate, '' AS EngagementEndDate, 'Allergy' AS EngagementReasonName, 'Allergy 001' AS InterviewName, t.last_test_date AS InterviewStartDate, '' AS InterviewEndDate, '' AS InterventionCode, '' AS InterventionStartDate, '' AS InterventionEndDate FROM (SELECT patient_id, create_date, practice_id, status_id FROM vial_requests WHERE status_id <> 1 GROUP BY patient_id) a LEFT JOIN patients p ON a.patient_id = p.id LEFT JOIN practice_patient_refs b ON p.id = b.patient_id LEFT JOIN (SELECT q.patient_id, q.last_test_date FROM (SELECT patient_id, last_test_date FROM ((SELECT patient_id, create_date AS last_test_date FROM vial_requests ORDER BY patient_id, create_date DESC)) p WHERE p.patient_id IS NOT NULL AND p.last_test_date IS NOT NULL GROUP BY patient_id) q) t ON t.patient_id = a.patient_id LEFT JOIN practices c ON a.practice_id = c.id LEFT JOIN practice_doctors e on p.mix_practice_doctor_id = e.id WHERE a.create_date BETWEEN %(yesterday_start)s AND %(yesterday_end)s\" , myconnection, params={\"yesterday_start\":yesterday_start, \"yesterday_end\":yesterday_end})\n",
    "test_query['MobilePhone'] = test_query['MobilePhone'].str.replace(r\"[a-zA-Z|-|-|`|.|,|/|+|=|#|'|@|(|)| |]+\", '')\n",
    "test_query['CommunicationPreference'] = np.where((test_query['EmailAdress'] != None) & (test_query['EmailAdress'].notnull()), 'Email', np.where((test_query['MobilePhone'] != None) & (test_query['MobilePhone'].notnull() & (test_query['MobilePhone'] != '')), 'Mobile', ''))\n",
    "test_query = test_query[test_query['CommunicationPreference'] != '']\n",
    "if len(test_query) > 0:\n",
    "    test_query['EngagementBeginDate'] = test_query['EngagementBeginDate'].dt.strftime('%m/%d/%Y')\n",
    "    test_query['InterviewStartDate'] = test_query['InterviewStartDate'].dt.strftime('%m/%d/%Y')\n",
    "else:\n",
    "    test_query= test_query\n",
    "distinct_practices = test_query['Practice'].unique().tolist()\n",
    "external_dr = pd.read_excel('External Physician IDs.xlsx')\n",
    "external_dr_new = external_dr[['PhysicianID', 'ExternalPhysicianId']].dropna()\n",
    "external_practice = pd.read_excel('External Practice IDs.xlsx')\n",
    "external_practice_new = external_practice[['practice_id', 'ExternalPracticeID']].dropna()\n",
    "SEngage_with_dr = pd.merge(test_query, external_dr_new, on='PhysicianID', how='left')\n",
    "SEngage_with_dr_practice = pd.merge(SEngage_with_dr, external_practice_new, left_on='id', right_on='practice_id', how='left')\n",
    "SEngage_with_dr_practice = SEngage_with_dr_practice[['Practice', 'ExternalPracticeID', 'ExternalPatientID', 'FirstName', 'LastName', 'MiddleName', 'EmailAdress', 'MobilePhone', 'CommunicationPreference', 'ExternalPhysicianId', 'EngagementBeginDate', 'EngagementEndDate', 'EngagementReasonName', 'InterviewName', 'InterviewStartDate', 'InterviewEndDate','InterventionCode', 'InterventionStartDate', 'InterventionEndDate']]\n",
    "for i in range(len(distinct_practices)):\n",
    "    practice = distinct_practices[i]\n",
    "    output_df = SEngage_with_dr_practice[SEngage_with_dr_practice['Practice'] == practice]\n",
    "    writer = pd.ExcelWriter(\"Daily SEngage Patient Upload %s %s.xlsx\" % (practice, yesterday_ts), engine='xlsxwriter')\n",
    "    output_df.to_excel(writer, index=False)\n",
    "    writer.save()\n",
    "    upload_file = shared_folder.upload(\"Daily SEngage Patient Upload %s %s.xlsx\" % (practice, yesterday_ts))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "yesterday = datetime.datetime.now() - datetime.timedelta(days=1)\n",
    "yesterday\n",
    "yesterday_ts = yesterday.strftime('%Y-%m-%d 00:00:00')\n",
    "yesterday_ts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "!pip install extras[jwt]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "BoxOAuthException",
     "evalue": "\nMessage: b'{\"error\":\"invalid_grant\",\"error_description\":\"Please check the \\'sub\\' claim.\"}'\nStatus: 400\nURL: https://api.box.com/oauth2/token\nMethod: POST",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mBoxOAuthException\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-116-c20c76c7ae25>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[1;31m#client = Client(oauth)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[1;31m#shared_folder = client.folder(folder_id='30731714216').create_subfolder(\"%s\" % (yesterday_ts))\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m \u001b[0maccess_token\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0moauth\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mauthenticate_instance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mboxsdk\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mClient\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0mclient\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mClient\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0moauth\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mC:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\boxsdk\\auth\\jwt_auth.py\u001b[0m in \u001b[0;36mauthenticate_instance\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    186\u001b[0m         \"\"\"\n\u001b[1;32m    187\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_user_id\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m--> 188\u001b[0;31m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_auth_with_jwt\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_enterprise_id\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'enterprise'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    189\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m    190\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_refresh\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maccess_token\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mC:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\boxsdk\\auth\\jwt_auth.py\u001b[0m in \u001b[0;36m_auth_with_jwt\u001b[0;34m(self, sub, sub_type)\u001b[0m\n\u001b[1;32m    158\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_box_device_name\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m    159\u001b[0m             \u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'box_device_name'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_box_device_name\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m--> 160\u001b[0;31m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msend_token_request\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maccess_token\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mexpect_refresh_token\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    161\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m    162\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mauthenticate_app_user\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0muser\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mC:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\boxsdk\\auth\\oauth2.py\u001b[0m in \u001b[0;36msend_token_request\u001b[0;34m(self, data, access_token, expect_refresh_token)\u001b[0m\n\u001b[1;32m    286\u001b[0m         )\n\u001b[1;32m    287\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mnetwork_response\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mok\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m--> 288\u001b[0;31m             \u001b[1;32mraise\u001b[0m \u001b[0mBoxOAuthException\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnetwork_response\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstatus_code\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnetwork_response\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0murl\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'POST'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    289\u001b[0m         \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m    290\u001b[0m             \u001b[0mresponse\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnetwork_response\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mjson\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mBoxOAuthException\u001b[0m: \nMessage: b'{\"error\":\"invalid_grant\",\"error_description\":\"Please check the \\'sub\\' claim.\"}'\nStatus: 400\nURL: https://api.box.com/oauth2/token\nMethod: POST"
     ]
    }
   ],
   "source": [
    "from boxsdk import *\n",
    "#import boxsdk.auth.jwt_auth\n",
    "from boxsdk import OAuth2\n",
    "from boxsdk import JWTAuth\n",
    "from boxsdk.auth.jwt_auth import JWTAuth\n",
    "from pprint import pprint\n",
    "#pprint(JWTReason)\n",
    "oauth = JWTAuth(\n",
    "                client_id='d3sucje7nxjjwa26q31g6a62uzx90wj2', \n",
    "                client_secret='XrapXVK0tZxELsCkrFes00SWIiWZCt5S', \n",
    "                enterprise_id='0',\n",
    "                jwt_key_id='16eyoln3',\n",
    "                rsa_private_key_file_sys_path='C:\\\\cygwin64\\\\home\\\\eallan\\\\private_key.pem',\n",
    "               )\n",
    "#oauth = OAuth2(\n",
    "#    client_id='d3sucje7nxjjwa26q31g6a62uzx90wj2', \n",
    "#    client_secret='XrapXVK0tZxELsCkrFes00SWIiWZCt5S', \n",
    "#    access_token='dn7kdjUzDj4xaBuuOpg0DKFvuFZDyM2L',\n",
    "#              )\n",
    "#client = Client(oauth)\n",
    "#shared_folder = client.folder(folder_id='30731714216').create_subfolder(\"%s\" % (yesterday_ts))\n",
    "access_token = oauth.authenticate_instance()\n",
    "from boxsdk import Client\n",
    "client = Client(oauth)\n",
    "will_user = client.user(user_id='2941156487')\n",
    "will_auth = JWTAuth(\n",
    "                client_id='d3sucje7nxjjwa26q31g6a62uzx90wj2', \n",
    "                client_secret='XrapXVK0tZxELsCkrFes00SWIiWZCt5S', \n",
    "                enterprise_id='0',\n",
    "                jwt_key_id='16eyoln3',\n",
    "                rsa_private_key_file_sys_path='C:\\\\cygwin64\\\\home\\\\eallan\\\\private_key.pem',\n",
    "               )\n",
    "will_auth.authenticate_app_user(will_user)\n",
    "will_client = Client(will_auth)\n",
    "shared_folder = will_client.folder(folder_id='30731714216')\n",
    "#.create_subfolder('Test')\n",
    "upload_file = shared_folder.upload('Daily SEngage Patient Upload Augusta ENT 2017-11-12.xlsx')\n",
    "#shared_folder.get_items(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "query = \"\"\"SELECT a.id, a.allergy_id, a.mix_location_id, b.name \n",
    "FROM patients a LEFT JOIN practice_locations b ON a.mix_location_id = b.id WHERE a.practice_id = 13 AND a.mix_location_id <> 233\n",
    "\"\"\"\n",
    "TENT_not_at_Vintage = pd.read_sql_query(query, myconnection)\n",
    "TENT_not_at_Vintage.to_excel('TENT Patients without Vintage Mix Location.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from svglib.svglib import svg2rlg\n",
    "from reportlab.graphics import renderPDF\n",
    "drawing = svg2rlg(\"diagram.svg\")\n",
    "renderPDF.drawToFile(drawing, \"Data Dictionary.pdf\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "writer = pd.ExcelWriter(\"ENTFW Sample Report 2.6.18.xlsx\", engine='xlsxwriter')\n",
    "entfw_tests = pd.read_sql_query(\"SELECT distinct q.patient as Patients_Tested, q.tester, monthname(q.test_date) as test_date, q.test_date as month_year, q.type as type_of_test, q.Location_ID, q.Name as location_name, q.practice_ID, q.Practice_name, z.username, z.firstname, z.lastname, if(p.mix_practice_doctor_id is not null, dr.lastname, 'blank') as Doctor FROM ( (select distinct(a.patient_id) as patient, a.user_id as tester, a.test_date as test_date, a.location_ID, d.Name, a.practice_id, i.name as Practice_name, 'injection' as type from intradermal_tests a INNER JOIN practice_locations d ON a.Location_ID = d.id INNER JOIN practices i on a.practice_id = i.id where a.Test_Date > '2016-12-31 23:59:59' AND (a.Status IS NULL OR a.Status <> 'deleted')) UNION (select distinct(b.patient_id) as patient, b.tester_id as tester, b.test_date as test_date, b.location_id, e.Name, b.practice_id, i.name as Practice_name, 'mqt' as type from mq_tests b INNER JOIN practice_locations e ON b.Location_ID = e.id INNER JOIN practices i on b.practice_id = i.id where b.Test_Date > '2016-12-31 23:59:59' AND (b.Status IS NULL OR b.Status <> 'deleted')) UNION (select distinct(c.patient_id) as patient, c.tester_id as tester, c.test_date as test_date, c.location_id, f.Name, c.practice_id, i.name as Practice_name, 'stick' as type from prick_tests c INNER JOIN practice_locations f ON c.location_id = f.id INNER JOIN practices i on c.practice_id = i.id where c.Test_Date > '2016-12-31 23:59:59' AND (c.Status IS NULL OR c.Status <> 'deleted')) UNION (select distinct(g.patient_id) as patient, g.blood_drawn_by as tester, g.Start_Date as test_date, g.Start_Location_id AS Location_ID, h.name, g.start_practice_id, i.name as Practice_name, 'ige' as type from ige_tests g INNER JOIN practice_locations h ON g.start_practice_id = h.ID INNER JOIN practices i on g.start_practice_id = i.id where g.Start_Date > '2016-12-31 23:59:59' AND (g.Status = 'Complete')) order by Location_ID) as q left join users z on q.tester = z.id LEFT JOIN patients p ON q.patient = p.id LEFT JOIN practice_doctors dr ON p.mix_practice_doctor_id = dr.id WHERE q.practice_id = 52\", myconnection)\n",
    "entfw_tests.to_excel(writer, index=True, sheet_name='detail')\n",
    "entfw_tests['month_year'] = entfw_tests['month_year'].dt.strftime('%Y-%m')\n",
    "tests_by_dr = pd.pivot_table(entfw_tests, index=['Doctor'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count', fill_value= 0, margins=True, margins_name='Subtotal Patient Tests')\n",
    "tests_by_dr.to_excel(writer, index=True, sheet_name='report')\n",
    "tests_by_location = pd.pivot_table(entfw_tests, index=['location_name'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count', fill_value= 0, margins=True, margins_name='Subtotal Patient Tests')\n",
    "tests_by_location.to_excel(writer, index=True, sheet_name='report', startrow=(len(tests_by_dr.index) + 5))\n",
    "total_injections = pd.read_sql_query(\"select a.patient_id as Patients_Tested, monthname(a.date) as test_date, a.date as month_year, e.name as location_name, b.practice_id, a.shot_giver_id, c.username, c.firstname, c.lastname from patient_visits_shots a left join patients b on a.patient_id = b.id left join users c on c.id = a.shot_giver_id left join patient_visits d on a.visit_id = d.id left join practice_locations e on d.location_id = e.id WHERE b.practice_id = 52 and a.active = 1 AND a.Date > '2016-12-31 23:59:59' and b.id is not null and c.id is not null\", myconnection)\n",
    "total_injections['month_year'] = total_injections['month_year'].dt.strftime('%Y-%m')\n",
    "inj_by_location = pd.pivot_table(total_injections, index=['location_name'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count', fill_value= 0, margins=True, margins_name='Subtotal Patient Tests')\n",
    "inj_by_location.to_excel(writer, index=True, sheet_name='report', startrow=(len(tests_by_dr.index) + len(tests_by_location.index) + 10))\n",
    "vials_total = pd.read_sql_query(\"SELECT DISTINCT(v.barcode) AS barcode, v.patient_id as Patients_Tested, vn.name, vs.status, z.firstname, z.middlename, z.lastname, monthname(v.Mix_date) as test_date, v.Mix_Date as month_year, z.intake_method, v.mix_location_id, a.Name as location_name, v.mix_practice_id, b.name as practice_name, u.username FROM vials v INNER JOIN vial_names vn ON v.id=vn.vial_id INNER JOIN vial_statuses vs on v.status_id = vs.id INNER JOIN patients z on v.patient_id = z.id left join users u on if(v.created_by is null, v.mixer_id, v.created_by) = u.id INNER join practice_locations a on v.mix_location_id = a.id INNER join practices b on v.mix_practice_id = b.id where (v.is_child = 0 OR v.is_child IS null OR (v.is_child = 1 and v.from_titrated = 1)) AND v.Mix_Date > '2016-12-31 23:59:59' and (z.mix_practice_id = 52 OR z.shot_practice_id = 52) ORDER BY barcode\", myconnection)\n",
    "vials_total['month_year'] = vials_total['month_year'].dt.strftime('%Y-%m')\n",
    "vials_total\n",
    "vials_by_location = pd.pivot_table(vials_total, index=['location_name'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count', fill_value= 0, margins=True, margins_name='Subtotal Patient Tests')\n",
    "vials_by_location.to_excel(writer, index=True, sheet_name='report', startrow=(len(tests_by_dr.index) + len(tests_by_location.index) + len(inj_by_location.index) + 15))\n",
    "writer.save()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "writer = pd.ExcelWriter(\"CENT Vials Mixed and Current Locations.xlsx\", engine='xlsxwriter')\n",
    "#entfw_tests = pd.read_sql_query(\"SELECT distinct q.patient as Patients_Tested, q.tester, monthname(q.test_date) as test_date, q.test_date as month_year, q.type as type_of_test, q.Location_ID, q.Name as location_name, q.practice_ID, q.Practice_name, z.username, z.firstname, z.lastname, if(p.mix_practice_doctor_id is not null, dr.lastname, 'blank') as Doctor FROM ( (select distinct(a.patient_id) as patient, a.user_id as tester, a.test_date as test_date, a.location_ID, d.Name, a.practice_id, i.name as Practice_name, 'injection' as type from intradermal_tests a INNER JOIN practice_locations d ON a.Location_ID = d.id INNER JOIN practices i on a.practice_id = i.id where a.Test_Date BETWEEN '2016-12-31 23:59:59' AND '2018-01-01 00:00:00' AND (a.Status IS NULL OR a.Status <> 'deleted')) UNION (select distinct(b.patient_id) as patient, b.tester_id as tester, b.test_date as test_date, b.location_id, e.Name, b.practice_id, i.name as Practice_name, 'mqt' as type from mq_tests b INNER JOIN practice_locations e ON b.Location_ID = e.id INNER JOIN practices i on b.practice_id = i.id where b.Test_Date BETWEEN '2016-12-31 23:59:59' AND '2018-01-01 00:00:00' AND (b.Status IS NULL OR b.Status <> 'deleted')) UNION (select distinct(c.patient_id) as patient, c.tester_id as tester, c.test_date as test_date, c.location_id, f.Name, c.practice_id, i.name as Practice_name, 'stick' as type from prick_tests c INNER JOIN practice_locations f ON c.location_id = f.id INNER JOIN practices i on c.practice_id = i.id where c.Test_Date BETWEEN '2016-12-31 23:59:59' AND '2018-01-01 00:00:00' AND (c.Status IS NULL OR c.Status <> 'deleted')) UNION (select distinct(g.patient_id) as patient, g.blood_drawn_by as tester, g.Start_Date as test_date, g.Start_Location_id AS Location_ID, h.name, g.start_practice_id, i.name as Practice_name, 'ige' as type from ige_tests g INNER JOIN practice_locations h ON g.start_practice_id = h.ID INNER JOIN practices i on g.start_practice_id = i.id where g.Start_Date BETWEEN '2016-12-31 23:59:59' AND '2018-01-01 00:00:00' AND (g.Status = 'Complete')) order by Location_ID) as q left join users z on q.tester = z.id LEFT JOIN patients p ON q.patient = p.id LEFT JOIN practice_doctors dr ON p.mix_practice_doctor_id = dr.id WHERE q.practice_id = 7\", myconnection)\n",
    "#entfw_tests.to_excel(writer, index=True, sheet_name='Test Detail')\n",
    "#entfw_tests['month_year'] = entfw_tests['month_year'].dt.strftime('%m-%Y')\n",
    "#tests_by_dr = pd.pivot_table(entfw_tests, index=['Doctor'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count', fill_value= 0, margins=True, margins_name='Subtotal Patient Tests')\n",
    "#tests_by_dr.to_excel(writer, index=True, sheet_name='Report')\n",
    "#tests_by_location = pd.pivot_table(entfw_tests, index=['location_name'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count', fill_value= 0, margins=True, margins_name='Subtotal Patient Tests')\n",
    "#tests_by_location.to_excel(writer, index=True, sheet_name='Report', startrow=(len(tests_by_dr.index) + 5))\n",
    "#total_injections = pd.read_sql_query(\"select a.patient_id as Patients_Tested, monthname(a.date) as test_date, a.date as month_year, e.name as location_name, b.practice_id, a.shot_giver_id, c.username, c.firstname, c.lastname from patient_visits_shots a left join patients b on a.patient_id = b.id left join users c on c.id = a.shot_giver_id left join patient_visits d on a.visit_id = d.id left join practice_locations e on d.location_id = e.id WHERE b.practice_id = 7 and a.active = 1 AND a.Date BETWEEN '2016-12-31 23:59:59' AND '2018-01-01 00:00:00' and b.id is not null and c.id is not null\", myconnection)\n",
    "#total_injections['month_year'] = total_injections['month_year'].dt.strftime('%m-%Y')\n",
    "#inj_by_location = pd.pivot_table(total_injections, index=['location_name'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count', fill_value= 0, margins=True, margins_name='Subtotal Patient Tests')\n",
    "#inj_by_location.to_excel(writer, index=True, sheet_name='Report', startrow=(len(tests_by_dr.index) + len(tests_by_location.index) + 10))\n",
    "vials_total = pd.read_sql_query(\"SELECT `vn`.`name` AS Vial, concat_ws(', ', patients.lastname, patients.firstname) AS Patients_Tested, ppr.practice_chart_id AS Chart, pl.name AS mix_location_name, if(vr.to_location_name IS NOT NULL , vr.to_location_name, pl.name) AS current_location_name, concat_ws(', ', pd.lastname, pd.firstname) AS Doctor, vs.status AS 'Vial Status', date_format(vialSelect.mix_date, '%m/%d/%Y %r')     AS Mixed, vialSelect.mix_date AS month_year, monthname(vialSelect.mix_date) AS test_date, date_format(vialSelect.expiration_date, '%m/%d/%Y') AS Expires, concat_ws(', ', u.lastname, u.firstname) AS user_name FROM `patients` INNER JOIN (SELECT `vials`.`id`              AS `vial_id`, `vials`.`patient_id`      AS `patient_id`, `vials`.`status_id`       AS `status_id`, `vials`.`mix_date`        AS `mix_date`, `vials`.`expiration_date` AS `expiration_date`, vials.mix_location_id, vials.created_by, vials.mixer_id FROM `vials` INNER JOIN (SELECT MAX(vials.id)     AS `vial_id`, `vials`.`barcode` AS `barcode` FROM `vials` WHERE `mix_practice_id` = '7' GROUP BY `barcode`) AS `recentVial` ON `vials`.`id` = `vial_id` WHERE `mix_practice_id` = '7') AS `vialSelect` ON `vialSelect`.`patient_id` = `patients`.`id` INNER JOIN `vial_names` AS `vn` ON `vialSelect`.`vial_id` = `vn`.`vial_id` LEFT JOIN practice_patient_refs ppr ON patients.id = ppr.patient_id LEFT JOIN practice_locations pl ON vialSelect.mix_location_id = pl.id LEFT JOIN (SELECT max(id), vial_id, to_location_name FROM vial_relocations WHERE to_location_id IS NOT NULL AND from_practice_id = 7 GROUP BY vial_id) vr ON vialSelect.vial_id = vr.vial_id LEFT JOIN practice_doctors pd ON patients.mix_practice_doctor_id = pd.id LEFT JOIN vial_statuses vs ON vialSelect.status_id = vs.id LEFT JOIN users u ON if(vialSelect.mixer_id IS NOT NULL, vialSelect.mixer_id, vialSelect.created_by) = u.id WHERE (patients.mix_practice_id = 7 OR patients.shot_practice_id = 7) ORDER BY `patients`.`lastname` ASC, `patients`.`firstname` ASC, vialSelect.mix_date\", myconnection)\n",
    "# AND convert_tz(vialSelect.mix_date, '+00:00', '-05:00') BETWEEN '2017-01-01 00:00:00' AND '2017-12-31 23:59:59'\n",
    "vials_total['month_year'] = vials_total['month_year'].dt.strftime('%m-%Y')\n",
    "#vials_by_mix_location = pd.pivot_table(vials_total, index=['mix_location_name'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count', fill_value= 0, margins=True, margins_name='Subtotal Patient Tests')\n",
    "#vials_by_mix_location.to_excel(writer, index=True, sheet_name='Report', startrow=(len(tests_by_dr.index) + len(tests_by_location.index) + len(inj_by_location.index) + 15))\n",
    "#vials_by_current_location = pd.pivot_table(vials_total, index=['current_location_name'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count', fill_value= 0, margins=True, margins_name='Subtotal Patient Tests')\n",
    "#vials_by_current_location.to_excel(writer, index=True, sheet_name='Report', startrow=(len(tests_by_dr.index) + len(tests_by_location.index) + len(inj_by_location.index) + len(vials_by_mix_location.index) + 20))\n",
    "#vials_by_user = pd.pivot_table(vials_total, index=['user_name'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count', fill_value= 0, margins=True, margins_name='Subtotal Patient Tests')\n",
    "#vials_by_user.to_excel(writer, index=True, sheet_name='Report', startrow=(len(tests_by_dr.index) + len(tests_by_location.index) + len(inj_by_location.index) + len(vials_by_mix_location.index) +len(vials_by_current_location.index) + 25))\n",
    "vials_total.to_excel(writer, index=True, sheet_name='Vials Detail')\n",
    "writer.save()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\ipykernel\\__main__.py:23: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\ipykernel\\__main__.py:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\ipykernel\\__main__.py:42: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\ipykernel\\__main__.py:46: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\ipykernel\\__main__.py:63: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\ipykernel\\__main__.py:67: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\ipykernel\\__main__.py:84: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "C:\\Users\\eallan\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\ipykernel\\__main__.py:88: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n"
     ]
    }
   ],
   "source": [
    "total_doctors = pd.read_sql_query(\"SELECT pd.practice_id, count(DISTINCT(pd.id)) as total_doctors, count(p.id) AS total_patients FROM practice_doctors pd LEFT JOIN patients p ON pd.id = p.mix_practice_doctor_id WHERE pd.active = 1 GROUP BY pd.practice_id\", myconnection)\n",
    "total_doctors.sort_values('total_doctors')\n",
    "Small, Medium, Large = total_doctors[total_doctors['total_doctors'] <= 4], total_doctors[(total_doctors['total_doctors'] <= 10) & (total_doctors['total_doctors'] >= 5)], total_doctors[total_doctors['total_doctors'] >= 11]\n",
    "Small = Small[['practice_id']].astype(str)\n",
    "Medium = Medium[['practice_id']].astype(str)\n",
    "Large = Large[['practice_id']].astype(str)\n",
    "benchmark_groups = tuple(Large.practice_id)\n",
    "shots_per_user = pd.read_sql_query(\"select a.patient_id as Patients_Tested, monthname(a.date) as test_date, a.date as month_year, b.practice_id, a.shot_giver_id, c.username, c.firstname, c.lastname from patient_visits_shots a left join patients b on a.patient_id = b.id left join users c on c.id = a.shot_giver_id WHERE b.practice_id = %(practice_ID)s and a.active = 1 AND a.Date BETWEEN %(PSD)s and %(PED)s and b.id is not null and c.id is not null\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "fuel_users = pd.read_sql_query(\"SELECT DISTINCT username FROM `users` where practice_id = 9\", myconnection)\n",
    "shots_per_user_non_fuel = shots_per_user[~shots_per_user['username'].isin(fuel_users['username'])]\n",
    "shots_per_user_non_fuel['date'] = shots_per_user_non_fuel['month_year'].dt.strftime('%Y-%m')\n",
    "shots_per_user_non_fuel_pivot = pd.pivot_table(shots_per_user_non_fuel, index=['username'], columns=['date', 'test_date'], values=['Patients_Tested'], aggfunc='count', fill_value=0, margins=True)\n",
    "shots_per_user_non_fuel_pivot.columns = shots_per_user_non_fuel_pivot.columns.droplevel(1)\n",
    "shots_per_user_non_fuel_pivot.columns = shots_per_user_non_fuel_pivot.columns.droplevel()\n",
    "shots_per_user_non_fuel_pivot.rename(columns={'': 'Total'}, inplace=True)\n",
    "user_shots_mean = pd.pivot_table(shots_per_user_non_fuel, index=['username'], columns=['date', 'test_date'], values=['Patients_Tested'], aggfunc='count')\n",
    "user_shots_mean.columns = user_shots_mean.columns.droplevel(1)\n",
    "user_shots_mean.columns = user_shots_mean.columns.droplevel()\n",
    "user_shots_mean['shots_per_month'] = user_shots_mean.mean(axis=1)\n",
    "shots_per_user_monthly_average = user_shots_mean[['shots_per_month']]\n",
    "national_average_shots = pd.read_sql_query(\"SELECT count(a.patient_id) AS Patients_Tested, count(DISTINCT c.username) AS users, count(a.patient_id) / count(DISTINCT c.username) AS shots_per_user, monthname(a.date) AS test_date, date_format(a.date, '%Y-%m') AS month_year FROM patient_visits_shots a LEFT JOIN patients b ON a.patient_id = b.id LEFT JOIN users c ON c.id = a.shot_giver_id WHERE a.active = 1 AND b.id IS NOT NULL AND c.id IS NOT NULL AND c.username NOT IN (SELECT DISTINCT username FROM users WHERE practice_id = 9) GROUP BY date_format(a.date, '%Y-%m')\", myconnection)\n",
    "average_shots_per_user = national_average_shots['shots_per_user'].mean(axis=0)\n",
    "shots_per_user_monthly_average['national_average_shots_per_month'] = average_shots_per_user\n",
    "benchmark_average_shots = pd.read_sql_query(\"SELECT count(a.patient_id) AS Patients_Tested, count(DISTINCT c.username) AS users, count(a.patient_id) / count(DISTINCT c.username) AS shots_per_user, monthname(a.date) AS test_date, concat_ws('-',year(a.date),month(a.date)) AS month_year FROM patient_visits_shots a LEFT JOIN patients b ON a.patient_id = b.id LEFT JOIN users c ON c.id = a.shot_giver_id WHERE a.active = 1 AND b.id IS NOT NULL AND c.id IS NOT NULL AND c.username NOT IN (SELECT DISTINCT username FROM users WHERE practice_id = 9) and b.practice_id in %(practices)s GROUP BY year(a.date), month(a.date)\", myconnection, params={\"practices\":benchmark_groups})\n",
    "average_shots_per_user_benchmark = benchmark_average_shots['shots_per_user'].mean(axis=0)\n",
    "shots_per_user_monthly_average['benchmark_average_shots_per_month'] = average_shots_per_user_benchmark\n",
    "total_tests_users = pd.read_sql_query(\"SELECT distinct q.patient as Patients_Tested, q.tester, monthname(q.test_date) as test_date, q.test_date as month_year, q.type as type_of_test, q.Location_ID, q.Name as location_name, q.practice_ID, q.Practice_name, z.username, z.firstname, z.lastname FROM ( (select distinct(a.patient_id) as patient, a.user_id as tester, a.test_date as test_date, a.location_ID, d.Name, a.practice_id, i.name as Practice_name, 'injection' as type from intradermal_tests a INNER JOIN practice_locations d ON a.Location_ID = d.id INNER JOIN practices i on a.practice_id = i.id where a.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (a.Status IS NULL OR a.Status <> 'deleted')) UNION (select distinct(b.patient_id) as patient, b.tester_id as tester, b.test_date as test_date, b.location_id, e.Name, b.practice_id, i.name as Practice_name, 'mqt' as type from mq_tests b INNER JOIN practice_locations e ON b.Location_ID = e.id INNER JOIN practices i on b.practice_id = i.id where b.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (b.Status IS NULL OR b.Status <> 'deleted')) UNION (select distinct(c.patient_id) as patient, c.tester_id as tester, c.test_date as test_date, c.location_id, f.Name, c.practice_id, i.name as Practice_name, 'stick' as type from prick_tests c INNER JOIN practice_locations f ON c.location_id = f.id INNER JOIN practices i on c.practice_id = i.id where c.Test_Date BETWEEN %(PSD)s AND %(PED)s AND (c.Status IS NULL OR c.Status <> 'deleted')) UNION (select distinct(g.patient_id) as patient, g.blood_drawn_by as tester, g.Start_Date as test_date, g.Start_Location_id AS Location_ID, h.name, g.start_practice_id, i.name as Practice_name, 'ige' as type from ige_tests g INNER JOIN practice_locations h ON g.start_practice_id = h.ID INNER JOIN practices i on g.start_practice_id = i.id where g.Start_Date BETWEEN %(PSD)s AND %(PED)s AND (g.Status = 'Complete')) order by Location_ID) q left join users z on q.tester = z.id WHERE q.practice_id =  %(practice_ID)s\" , myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "total_tests_users['month_year'] = total_tests_users['month_year'].dt.strftime('%Y-%m')\n",
    "total_tests_users_non_fuel = total_tests_users[~total_tests_users['username'].isin(fuel_users['username'])]\n",
    "total_tests_users_pivot = pd.pivot_table(total_tests_users_non_fuel, index=['username'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count', fill_value=0, margins=True)\n",
    "total_tests_users_pivot.columns = total_tests_users_pivot.columns.droplevel()\n",
    "total_tests_users_pivot.columns = total_tests_users_pivot.columns.droplevel()\n",
    "total_tests_users_pivot.rename(columns={'': 'Total'}, inplace=True)\n",
    "user_tests_mean = pd.pivot_table(total_tests_users_non_fuel, index=['username'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count')\n",
    "user_tests_mean.columns = user_tests_mean.columns.droplevel()\n",
    "user_tests_mean.columns = user_tests_mean.columns.droplevel()\n",
    "user_tests_mean['tests_per_month'] = user_tests_mean.mean(axis=1)\n",
    "tests_per_user_monthly_average = user_tests_mean[['tests_per_month']]\n",
    "tests_per_user_monthly_average\n",
    "national_average_tests = pd.read_sql_query(\"SELECT count(q.patient) AS Patients_Tested, count(DISTINCT q.tester) AS users, count(q.patient) / count(DISTINCT q.tester) AS tests_per_user, monthname(q.test_date) AS test_date, concat_ws('-',year(q.test_date),month(q.test_date)) AS month_year FROM ((SELECT DISTINCT (a.patient_id) AS patient, a.user_id AS tester, a.test_date AS test_date, a.location_ID, d.Name, a.practice_id, i.name AS Practice_name, 'injection' AS type FROM intradermal_tests a INNER JOIN practice_locations d ON a.Location_ID = d.id INNER JOIN practices i ON a.practice_id = i.id WHERE (a.Status IS NULL OR a.Status <> 'deleted')) UNION (SELECT DISTINCT (b.patient_id) AS patient, b.tester_id AS tester, b.test_date AS test_date, b.location_id, e.Name, b.practice_id, i.name AS Practice_name, 'mqt' AS type FROM mq_tests b INNER JOIN practice_locations e ON b.Location_ID = e.id INNER JOIN practices i ON b.practice_id = i.id WHERE (b.Status IS NULL OR b.Status <> 'deleted')) UNION (SELECT DISTINCT (c.patient_id) AS patient, c.tester_id AS tester, c.test_date AS test_date, c.location_id, f.Name, c.practice_id, i.name AS Practice_name, 'stick' AS type FROM prick_tests c INNER JOIN practice_locations f ON c.location_id = f.id INNER JOIN practices i ON c.practice_id = i.id WHERE (c.Status IS NULL OR c.Status <> 'deleted')) UNION (SELECT DISTINCT (g.patient_id) AS patient, g.blood_drawn_by AS tester, g.Start_Date AS test_date, g.Start_Location_id AS Location_ID, h.name, g.start_practice_id as practice_id, i.name AS Practice_name, 'ige' AS type FROM ige_tests g INNER JOIN practice_locations h ON g.start_practice_id = h.ID INNER JOIN practices i ON g.start_practice_id = i.id WHERE (g.Status = 'Complete')) ORDER BY Location_ID) q LEFT JOIN users z ON q.tester = z.id WHERE z.id IS NOT NULL AND q.tester NOT IN (SELECT DISTINCT id FROM users WHERE practice_id = 9) GROUP BY year(q.test_date), month(q.test_date)\", myconnection)\n",
    "average_tests_per_user = national_average_tests['tests_per_user'].mean(axis=0)\n",
    "tests_per_user_monthly_average['national_average_tests_per_month'] = average_tests_per_user\n",
    "tests_per_user_monthly_average\n",
    "benchmark_average_tests = pd.read_sql_query(\"SELECT count(q.patient) AS Patients_Tested, count(DISTINCT q.tester) AS users, count(q.patient) / count(DISTINCT q.tester) AS tests_per_user, monthname(q.test_date) AS test_date, concat_ws('-',year(q.test_date),month(q.test_date)) AS month_year FROM ((SELECT DISTINCT (a.patient_id) AS patient, a.user_id AS tester, a.test_date AS test_date, a.location_ID, d.Name, a.practice_id, i.name AS Practice_name, 'injection' AS type FROM intradermal_tests a INNER JOIN practice_locations d ON a.Location_ID = d.id INNER JOIN practices i ON a.practice_id = i.id WHERE (a.Status IS NULL OR a.Status <> 'deleted')) UNION (SELECT DISTINCT (b.patient_id) AS patient, b.tester_id AS tester, b.test_date AS test_date, b.location_id, e.Name, b.practice_id, i.name AS Practice_name, 'mqt' AS type FROM mq_tests b INNER JOIN practice_locations e ON b.Location_ID = e.id INNER JOIN practices i ON b.practice_id = i.id WHERE (b.Status IS NULL OR b.Status <> 'deleted')) UNION (SELECT DISTINCT (c.patient_id) AS patient, c.tester_id AS tester, c.test_date AS test_date, c.location_id, f.Name, c.practice_id, i.name AS Practice_name, 'stick' AS type FROM prick_tests c INNER JOIN practice_locations f ON c.location_id = f.id INNER JOIN practices i ON c.practice_id = i.id WHERE (c.Status IS NULL OR c.Status <> 'deleted')) UNION (SELECT DISTINCT (g.patient_id) AS patient, g.blood_drawn_by AS tester, g.Start_Date AS test_date, g.Start_Location_id AS Location_ID, h.name, g.start_practice_id as practice_id, i.name AS Practice_name, 'ige' AS type FROM ige_tests g INNER JOIN practice_locations h ON g.start_practice_id = h.ID INNER JOIN practices i ON g.start_practice_id = i.id WHERE (g.Status = 'Complete')) ORDER BY Location_ID) q LEFT JOIN users z ON q.tester = z.id WHERE z.id IS NOT NULL AND q.tester NOT IN (SELECT DISTINCT id FROM users WHERE practice_id = 9) AND q.practice_id in %(practices)s GROUP BY year(q.test_date), month(q.test_date)\", myconnection, params={\"practices\":benchmark_groups})\n",
    "average_tests_per_user_benchmark = benchmark_average_tests['tests_per_user'].mean(axis=0)\n",
    "tests_per_user_monthly_average['benchmark_average_tests_per_month'] = average_tests_per_user_benchmark\n",
    "tests_per_user_monthly_average\n",
    "vials = pd.read_sql_query(\"SELECT DISTINCT(v.barcode) AS barcode, v.patient_id as Patients_Tested, vn.name, vs.status, z.firstname, z.middlename, z.lastname, monthname(v.Mix_date) as test_date, v.Mix_Date as month_year, z.intake_method, v.mix_location_id, a.Name as location_name, v.mix_practice_id, b.name as practice_name, u.username FROM vials v INNER JOIN vial_names vn ON v.id=vn.vial_id INNER JOIN vial_statuses vs on v.status_id = vs.id INNER JOIN patients z on v.patient_id = z.id left join users u on if(v.created_by is null, v.mixer_id, v.created_by) = u.id INNER join practice_locations a on v.mix_location_id = a.id INNER join practices b on v.mix_practice_id = b.id where (v.is_child = 0 OR v.is_child IS null OR (v.is_child = 1 and v.from_titrated = 1)) AND v.Mix_Date BETWEEN %(PSD)s AND %(PED)s and (z.mix_practice_id = %(practice_ID)s OR z.shot_practice_id = %(practice_ID)s) ORDER BY barcode\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "vials['month_year'] = vials['month_year'].dt.strftime('%Y-%m')\n",
    "vials_non_fuel = vials[~vials['username'].isin(fuel_users['username'])]\n",
    "Vials2 = pd.pivot_table(vials_non_fuel, index=['username'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count', fill_value=0, margins=True)\n",
    "Vials2.columns = Vials2.columns.droplevel()\n",
    "Vials2.columns = Vials2.columns.droplevel()\n",
    "Vials2.rename(columns={'': 'Total'}, inplace=True)\n",
    "user_vials_mean = pd.pivot_table(vials_non_fuel, index=['username'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count')\n",
    "user_vials_mean.columns = user_vials_mean.columns.droplevel()\n",
    "user_vials_mean.columns = user_vials_mean.columns.droplevel()\n",
    "user_vials_mean['vials_per_month'] = user_vials_mean.mean(axis=1)\n",
    "vials_per_user_monthly_average = user_vials_mean[['vials_per_month']]\n",
    "vials_per_user_monthly_average\n",
    "national_average_vials = pd.read_sql_query(\"SELECT count(v.barcode) AS barcode, count(DISTINCT u.username) AS users, count(v.barcode) / count(DISTINCT u.username) AS vials_per_user, monthname(v.Mix_date) AS test_date, concat_ws('-', year(v.Mix_Date), month(v.Mix_Date)) AS month_year FROM vials v LEFT JOIN users u ON if(v.created_by IS NULL, v.mixer_id, v.created_by) = u.id INNER JOIN patients z ON v.patient_id = z.id WHERE (v.is_child = 0 OR v.is_child IS NULL OR (v.is_child = 1 AND v.from_titrated = 1)) AND u.username NOT IN (SELECT DISTINCT username FROM users WHERE practice_id = 9) AND v.mix_date IS NOT NULL GROUP BY year(v.Mix_date), month(v.Mix_date)\", myconnection)\n",
    "average_vials_per_user = national_average_vials['vials_per_user'].mean(axis=0)\n",
    "vials_per_user_monthly_average['national_average_vials_per_month'] = average_vials_per_user\n",
    "vials_per_user_monthly_average\n",
    "benchmark_average_vials = pd.read_sql_query(\"SELECT count(v.barcode) AS barcode, count(DISTINCT u.username) AS users, count(v.barcode) / count(DISTINCT u.username) AS vials_per_user, monthname(v.Mix_date) AS test_date, concat_ws('-', year(v.Mix_Date), month(v.Mix_Date)) AS month_year FROM vials v LEFT JOIN users u ON if(v.created_by IS NULL, v.mixer_id, v.created_by) = u.id INNER JOIN patients z ON v.patient_id = z.id WHERE (v.is_child = 0 OR v.is_child IS NULL OR (v.is_child = 1 AND v.from_titrated = 1)) AND u.username NOT IN (SELECT DISTINCT username FROM users WHERE practice_id = 9) AND v.mix_date IS NOT NULL AND (z.mix_practice_id in %(practices)s OR z.shot_practice_id in %(practices)s) GROUP BY year(v.Mix_date), month(v.Mix_date)\", myconnection, params={\"practices\":benchmark_groups})\n",
    "average_vials_per_user_benchmark = benchmark_average_vials['vials_per_user'].mean(axis=0)\n",
    "vials_per_user_monthly_average['benchmark_average_vials_per_month'] = average_vials_per_user_benchmark\n",
    "vials_per_user_monthly_average\n",
    "total_errors_person = pd.read_sql_query(\"SELECT a.id as Patients_Tested, a.practice_id, monthname(a.date) as test_date, a.date as month_year, c.name as practice_name, u.username, u.firstname, u.lastname from user_errors a INNER JOIN practice_locations b ON a.Location_ID = b.id INNER JOIN practices c on a.practice_id = c.id left join users u on a.user_id = u.id WHERE a.Date BETWEEN %(PSD)s AND %(PED)s AND a.practice_id = %(practice_ID)s\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "total_errors_person['month_year'] = total_errors_person['month_year'].dt.strftime('%m-%Y')\n",
    "total_errors_person_non_fuel = total_errors_person[~total_errors_person['username'].isin(fuel_users['username'])]\n",
    "total_errors_person_pivot = pd.pivot_table(total_errors_person_non_fuel, index=['username'], values=['Patients_Tested'], columns=[ 'month_year', 'test_date'], aggfunc='count', fill_value=0, margins=True)\n",
    "total_errors_person_pivot.columns = total_errors_person_pivot.columns.droplevel()\n",
    "total_errors_person_pivot.columns = total_errors_person_pivot.columns.droplevel()\n",
    "total_errors_person_pivot.rename(columns={'': 'Total'}, inplace=True)\n",
    "user_errors_mean = pd.pivot_table(total_errors_person_non_fuel, index=['username'], values=['Patients_Tested'], columns=[ 'month_year', 'test_date'], aggfunc='count')\n",
    "user_errors_mean.columns = user_errors_mean.columns.droplevel()\n",
    "user_errors_mean.columns = user_errors_mean.columns.droplevel()\n",
    "user_errors_mean['errors_per_month'] = user_errors_mean.mean(axis=1)\n",
    "errors_per_user_monthly_average = user_errors_mean[['errors_per_month']]\n",
    "errors_per_user_monthly_average\n",
    "national_average_errors = pd.read_sql_query(\"SELECT count(a.id) AS Patients_Tested, count(DISTINCT u.username) AS users, count(a.id) / count(DISTINCT u.username) AS errors_per_user, monthname(a.date) AS test_date, concat_ws('-', year(a.date), month(a.date)) AS month_year FROM user_errors a INNER JOIN practice_locations b ON a.Location_ID = b.id INNER JOIN practices c ON a.practice_id = c.id LEFT JOIN users u ON a.user_id = u.id GROUP BY year(a.date), month(a.date)\", myconnection)\n",
    "average_errors_per_user = national_average_errors['errors_per_user'].mean(axis=0)\n",
    "errors_per_user_monthly_average['national_average_errors_per_month'] = average_errors_per_user\n",
    "errors_per_user_monthly_average\n",
    "benchmark_average_errors = pd.read_sql_query(\"SELECT count(a.id) AS Patients_Tested, count(DISTINCT u.username) AS users, count(a.id) / count(DISTINCT u.username) AS errors_per_user, monthname(a.date) AS test_date, concat_ws('-', year(a.date), month(a.date)) AS month_year FROM user_errors a INNER JOIN practice_locations b ON a.Location_ID = b.id INNER JOIN practices c ON a.practice_id = c.id LEFT JOIN users u ON a.user_id = u.id WHERE a.practice_id in %(practices)s GROUP BY year(a.date), month(a.date)\", myconnection, params={\"practices\":benchmark_groups})\n",
    "average_errors_per_user_benchmark = benchmark_average_errors['errors_per_user'].mean(axis=0)\n",
    "errors_per_user_monthly_average['benchmark_average_errors_per_month'] = average_errors_per_user_benchmark\n",
    "errors_per_user_monthly_average\n",
    "per_person_kpi = total_errors_person_pivot.merge(total_tests_users_pivot, how='left', on=None, left_on=None, right_on=None, left_index=True, right_index=True, sort=False, suffixes=('_Errors', '_Tests_Given')).merge(Vials2, how='left', on=None, left_on=None, right_on=None, left_index=True, right_index=True, sort=False, suffixes=('_Tests_Given', '_Vials_Mixed')).merge(shots_per_user_non_fuel_pivot, how='left', on=None, left_on=None, right_on=None, left_index=True, right_index=True, sort=False, suffixes=('_Vials_Mixed', '_Shots_Given'))\n",
    "per_person_kpi_output = per_person_kpi.fillna(0)\n",
    "writer = pd.ExcelWriter(\"CENT User Capacity Reports.xlsx\", engine='xlsxwriter')\n",
    "per_person_kpi_output.to_excel(writer, sheet_name='YTD Productivity')\n",
    "errors_per_user_monthly_average.to_excel(writer, sheet_name='User Comparisons')\n",
    "vials_per_user_monthly_average.to_excel(writer, sheet_name='User Comparisons', startrow=(len(errors_per_user_monthly_average.index) + 2))\n",
    "tests_per_user_monthly_average.to_excel(writer, sheet_name='User Comparisons', startrow=(len(errors_per_user_monthly_average.index) + 4 + len(vials_per_user_monthly_average.index)))\n",
    "shots_per_user_monthly_average.to_excel(writer, sheet_name='User Comparisons', startrow=(len(errors_per_user_monthly_average.index) + 6 + len(vials_per_user_monthly_average.index) + len(tests_per_user_monthly_average.index)))\n",
    "worksheet = writer.sheets['YTD Productivity']\n",
    "worksheet2 = writer.sheets['User Comparisons']\n",
    "for i in range(len(per_person_kpi.columns) + 1):\n",
    "    worksheet.set_column(i,i,len(per_person_kpi_output.columns.values[i-1]))\n",
    "for i in range(len(errors_per_user_monthly_average.columns) + 1):\n",
    "    worksheet2.set_column(i,i,len(errors_per_user_monthly_average.columns.values[i-1]))\n",
    "for i in range(len(per_person_kpi_output.columns) + 1):\n",
    "    if i < (len(total_errors_person_pivot.columns) + 1):\n",
    "        worksheet.conditional_format(1,i, (len(per_person_kpi_output.index) - 1), i, {'type': 'data_bar', 'bar_color': '#FF0000'})\n",
    "    else:\n",
    "        worksheet.conditional_format(1,i, (len(per_person_kpi_output.index) - 1), i, {'type': 'data_bar', 'bar_color': '#008000'})\n",
    "#for i in range(len(errors_per_user_monthly_average.index) + 6 + len(vials_per_user_monthly_average.index) + len(tests_per_user_monthly_average.index)):\n",
    "#    worksheet2.add_sparkline('%s' % (xl_rowcol_to_cell(i, (len(errors_per_user_monthly_average.columns) + 1))), {'range': 'User Comparisons!%s:%s' % (xl_rowcol_to_cell(i, (len(errors_per_user_monthly_average.columns) - 2)), xl_rowcol_to_cell(i, (len(errors_per_user_monthly_average.columns) + 1))), 'type': 'column'})\n",
    "writer.save()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "shots_per_user_monthly_average['national_average'] = average_per_user\n",
    "shots_per_user_monthly_average\n",
    "len(errors_per_user_monthly_average.columns) + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patients_Tested</th>\n",
       "      <th>patient_name</th>\n",
       "      <th>provider</th>\n",
       "      <th>test_date</th>\n",
       "      <th>month_year</th>\n",
       "      <th>intake_method</th>\n",
       "      <th>Location_ID</th>\n",
       "      <th>Location_Name</th>\n",
       "      <th>Practice_ID</th>\n",
       "      <th>Practice_Name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17450</td>\n",
       "      <td>Test, 2</td>\n",
       "      <td></td>\n",
       "      <td>February</td>\n",
       "      <td>2017-02-23 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>17471</td>\n",
       "      <td>Gaskins, Susie</td>\n",
       "      <td>Noone, Michael</td>\n",
       "      <td>June</td>\n",
       "      <td>2016-06-28 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>17520</td>\n",
       "      <td>Powers, Deanna</td>\n",
       "      <td>Noone, Michael</td>\n",
       "      <td>February</td>\n",
       "      <td>2016-02-09 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>17586</td>\n",
       "      <td>Hartle, Lynnette</td>\n",
       "      <td>Noone, Michael</td>\n",
       "      <td>May</td>\n",
       "      <td>2016-05-06 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>17690</td>\n",
       "      <td>MIDDLETON, JACKIE</td>\n",
       "      <td>Hall, Roxanne</td>\n",
       "      <td>April</td>\n",
       "      <td>2017-04-10 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>17778</td>\n",
       "      <td>Kennemur, Shannon</td>\n",
       "      <td>Brown, Eugene</td>\n",
       "      <td>August</td>\n",
       "      <td>2016-08-12 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>17832</td>\n",
       "      <td>Lang, Barbara</td>\n",
       "      <td>Dozier, Thomas</td>\n",
       "      <td>February</td>\n",
       "      <td>2016-02-26 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>17892</td>\n",
       "      <td>Carter, Brandon</td>\n",
       "      <td>Murphy, Thomas</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-05 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>18067</td>\n",
       "      <td>Smith, Robert</td>\n",
       "      <td>Scott, Shaun</td>\n",
       "      <td>December</td>\n",
       "      <td>2016-12-29 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>18071</td>\n",
       "      <td>COOPER, JEANETTE</td>\n",
       "      <td>Hall, Roxanne</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-22 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>18084</td>\n",
       "      <td>Neuroth, David</td>\n",
       "      <td>Schwenzfeier, Willy</td>\n",
       "      <td>June</td>\n",
       "      <td>2017-06-12 20:05:11</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>18204</td>\n",
       "      <td>CAMPION, LAUREN</td>\n",
       "      <td>McNellis, Edward</td>\n",
       "      <td>October</td>\n",
       "      <td>2017-10-26 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>18253</td>\n",
       "      <td>NELSON, JEANNETTE</td>\n",
       "      <td>Noone, Michael</td>\n",
       "      <td>March</td>\n",
       "      <td>2017-03-09 20:25:12</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>18281</td>\n",
       "      <td>Jamison, Phillip</td>\n",
       "      <td>Noone, Michael</td>\n",
       "      <td>June</td>\n",
       "      <td>2016-06-13 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>18283</td>\n",
       "      <td>Melton, Katherine</td>\n",
       "      <td>Behrens, Edward</td>\n",
       "      <td>June</td>\n",
       "      <td>2016-06-07 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>18365</td>\n",
       "      <td>Ard, Stacie</td>\n",
       "      <td>Dozier, Thomas</td>\n",
       "      <td>April</td>\n",
       "      <td>2017-04-26 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>18395</td>\n",
       "      <td>MATENAER, BETH</td>\n",
       "      <td>Angelos, Patrick</td>\n",
       "      <td>November</td>\n",
       "      <td>2017-11-06 20:08:49</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18517</td>\n",
       "      <td>FOSTER, LEROYESHA</td>\n",
       "      <td>Scarlett, Matthew</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-15 14:05:21</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>18530</td>\n",
       "      <td>McCray, Sierra</td>\n",
       "      <td>Brown, Eugene</td>\n",
       "      <td>February</td>\n",
       "      <td>2016-02-19 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>18767</td>\n",
       "      <td>Carter, Veronica</td>\n",
       "      <td>Murphy, Thomas</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-26 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>175</td>\n",
       "      <td>North Charleston</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>18847</td>\n",
       "      <td>Corbett, Linda</td>\n",
       "      <td>McNellis, Edward</td>\n",
       "      <td>October</td>\n",
       "      <td>2017-10-05 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>18899</td>\n",
       "      <td>Mendoza, Ana</td>\n",
       "      <td>Swanson, Erik</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>18943</td>\n",
       "      <td>Morris, Allen</td>\n",
       "      <td>Dozier, Thomas</td>\n",
       "      <td>March</td>\n",
       "      <td>2017-03-08 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>18953</td>\n",
       "      <td>Dove, Spring</td>\n",
       "      <td>Behrens, Edward</td>\n",
       "      <td>July</td>\n",
       "      <td>2017-07-21 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>19023</td>\n",
       "      <td>Hoelle, Jarred</td>\n",
       "      <td>Hester, Thomas</td>\n",
       "      <td>November</td>\n",
       "      <td>2017-11-29 18:55:55</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>19184</td>\n",
       "      <td>Lewis, Allix</td>\n",
       "      <td>Ghegan, Mark</td>\n",
       "      <td>June</td>\n",
       "      <td>2016-06-27 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>19197</td>\n",
       "      <td>Weathers, Dianna</td>\n",
       "      <td>Brown, Eugene</td>\n",
       "      <td>October</td>\n",
       "      <td>2016-10-25 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>19236</td>\n",
       "      <td>Carroll, Jennifer</td>\n",
       "      <td>Jordan, Robert</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-12 21:05:23</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>19304</td>\n",
       "      <td>Heyward, Ilesa</td>\n",
       "      <td>Price, Blair</td>\n",
       "      <td>August</td>\n",
       "      <td>2016-08-04 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>19305</td>\n",
       "      <td>Williams, Maria</td>\n",
       "      <td>Swanson, Erik</td>\n",
       "      <td>March</td>\n",
       "      <td>2017-03-02 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1076</th>\n",
       "      <td>87695</td>\n",
       "      <td>Heywood, Anne</td>\n",
       "      <td>Murphy, Thomas</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-11 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>171</td>\n",
       "      <td>Summerville</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1077</th>\n",
       "      <td>87779</td>\n",
       "      <td>Clarke, Christian</td>\n",
       "      <td>Jordan, Robert</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-08 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1078</th>\n",
       "      <td>87863</td>\n",
       "      <td>Linder, Lisa</td>\n",
       "      <td>Murphy, Thomas</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-19 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1079</th>\n",
       "      <td>87923</td>\n",
       "      <td>Leyh, Belva</td>\n",
       "      <td>Bennett, Gregory</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-15 15:37:50</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1080</th>\n",
       "      <td>88074</td>\n",
       "      <td>Hodges, Rodger</td>\n",
       "      <td>Behrens, Edward</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-30 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>175</td>\n",
       "      <td>North Charleston</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1081</th>\n",
       "      <td>88104</td>\n",
       "      <td>Bowman, Janice</td>\n",
       "      <td>Swanson, Erik</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-09 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>175</td>\n",
       "      <td>North Charleston</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1082</th>\n",
       "      <td>88170</td>\n",
       "      <td>McAuliffe, Christine</td>\n",
       "      <td>Bennett, Gregory</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-08 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>167</td>\n",
       "      <td>South MP</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1083</th>\n",
       "      <td>88235</td>\n",
       "      <td>Gamble Murray, Mable</td>\n",
       "      <td>Bennett, Gregory</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-11 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1084</th>\n",
       "      <td>88239</td>\n",
       "      <td>Eller, Whitney</td>\n",
       "      <td>Murphy, Thomas</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-18 14:09:58</td>\n",
       "      <td>inj</td>\n",
       "      <td>167</td>\n",
       "      <td>South MP</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1085</th>\n",
       "      <td>88413</td>\n",
       "      <td>Gadsden, Cynthia</td>\n",
       "      <td>Murphy, Thomas</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-02 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>175</td>\n",
       "      <td>North Charleston</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1086</th>\n",
       "      <td>88415</td>\n",
       "      <td>Kliner, Jennifer</td>\n",
       "      <td>Bennett, Gregory</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-09 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1087</th>\n",
       "      <td>88641</td>\n",
       "      <td>Schey, Emily</td>\n",
       "      <td>Bennett, Gregory</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-02 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1088</th>\n",
       "      <td>88647</td>\n",
       "      <td>Borgerding, Brynn</td>\n",
       "      <td>Bennett, Gregory</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-09 14:47:16</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1089</th>\n",
       "      <td>88656</td>\n",
       "      <td>Kain, Riena</td>\n",
       "      <td>Swanson, Erik</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-16 22:12:18</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1090</th>\n",
       "      <td>88876</td>\n",
       "      <td>Carroll, Benjamin</td>\n",
       "      <td>Jordan, Robert</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-12 21:05:18</td>\n",
       "      <td>inj</td>\n",
       "      <td>171</td>\n",
       "      <td>Summerville</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1091</th>\n",
       "      <td>88887</td>\n",
       "      <td>Brown, Maxwell</td>\n",
       "      <td>Murphy, Thomas</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-24 22:09:58</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1092</th>\n",
       "      <td>88916</td>\n",
       "      <td>Steuart, Bryan</td>\n",
       "      <td>Dozier, Thomas</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-12 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>175</td>\n",
       "      <td>North Charleston</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1093</th>\n",
       "      <td>88947</td>\n",
       "      <td>Glover, Aaron</td>\n",
       "      <td>Swanson, Erik</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-23 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>175</td>\n",
       "      <td>North Charleston</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1094</th>\n",
       "      <td>88989</td>\n",
       "      <td>Fuller, Taianna</td>\n",
       "      <td>Murphy, Thomas</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-13 13:57:12</td>\n",
       "      <td>inj</td>\n",
       "      <td>171</td>\n",
       "      <td>Summerville</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1095</th>\n",
       "      <td>89225</td>\n",
       "      <td>Gardner, John</td>\n",
       "      <td>Murphy, Thomas</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-19 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1096</th>\n",
       "      <td>89367</td>\n",
       "      <td>Struna, Kevin</td>\n",
       "      <td>Noone, Michael</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-31 22:07:26</td>\n",
       "      <td>inj</td>\n",
       "      <td>173</td>\n",
       "      <td>Moncks Corner</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1097</th>\n",
       "      <td>89390</td>\n",
       "      <td>Cameron, Tyler</td>\n",
       "      <td>Noone, Michael</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-16 21:27:10</td>\n",
       "      <td>inj</td>\n",
       "      <td>173</td>\n",
       "      <td>Moncks Corner</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1098</th>\n",
       "      <td>89510</td>\n",
       "      <td>Thomas, Haden</td>\n",
       "      <td>Murphy, Thomas</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-15 21:30:51</td>\n",
       "      <td>inj</td>\n",
       "      <td>171</td>\n",
       "      <td>Summerville</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1099</th>\n",
       "      <td>89658</td>\n",
       "      <td>Carrelli, Paula</td>\n",
       "      <td>Bennett, Gregory</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-11 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1100</th>\n",
       "      <td>89779</td>\n",
       "      <td>Lawlis, Rhonda</td>\n",
       "      <td>Dozier, Thomas</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-25 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>175</td>\n",
       "      <td>North Charleston</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1101</th>\n",
       "      <td>91171</td>\n",
       "      <td>Baines, Jacqueline</td>\n",
       "      <td>Murphy, Thomas</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-19 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>171</td>\n",
       "      <td>Summerville</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1102</th>\n",
       "      <td>180622</td>\n",
       "      <td>Mcpherson, John</td>\n",
       "      <td>Bennett, Gregory</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-30 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>165</td>\n",
       "      <td>West Ashley</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1103</th>\n",
       "      <td>189678</td>\n",
       "      <td>Smith, Malcolm</td>\n",
       "      <td>Hall, Roxanne</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-27 13:40:53</td>\n",
       "      <td>sub</td>\n",
       "      <td>167</td>\n",
       "      <td>South MP</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1104</th>\n",
       "      <td>189700</td>\n",
       "      <td>Smith, Christine</td>\n",
       "      <td>Murphy, Thomas</td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-31 19:09:17</td>\n",
       "      <td>inj</td>\n",
       "      <td>171</td>\n",
       "      <td>Summerville</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1105</th>\n",
       "      <td>190257</td>\n",
       "      <td>Bearsley, Judy</td>\n",
       "      <td></td>\n",
       "      <td>January</td>\n",
       "      <td>2018-01-30 00:00:00</td>\n",
       "      <td>inj</td>\n",
       "      <td>175</td>\n",
       "      <td>North Charleston</td>\n",
       "      <td>7</td>\n",
       "      <td>Charleston ENT</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1106 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Patients_Tested          patient_name             provider  test_date  \\\n",
       "0               17450               Test, 2                        February   \n",
       "1               17471        Gaskins, Susie       Noone, Michael       June   \n",
       "2               17520        Powers, Deanna       Noone, Michael   February   \n",
       "3               17586      Hartle, Lynnette       Noone, Michael        May   \n",
       "4               17690     MIDDLETON, JACKIE        Hall, Roxanne      April   \n",
       "5               17778     Kennemur, Shannon        Brown, Eugene     August   \n",
       "6               17832         Lang, Barbara       Dozier, Thomas   February   \n",
       "7               17892       Carter, Brandon       Murphy, Thomas  September   \n",
       "8               18067         Smith, Robert         Scott, Shaun   December   \n",
       "9               18071      COOPER, JEANETTE        Hall, Roxanne  September   \n",
       "10              18084        Neuroth, David  Schwenzfeier, Willy       June   \n",
       "11              18204       CAMPION, LAUREN     McNellis, Edward    October   \n",
       "12              18253     NELSON, JEANNETTE       Noone, Michael      March   \n",
       "13              18281      Jamison, Phillip       Noone, Michael       June   \n",
       "14              18283     Melton, Katherine      Behrens, Edward       June   \n",
       "15              18365           Ard, Stacie       Dozier, Thomas      April   \n",
       "16              18395        MATENAER, BETH     Angelos, Patrick   November   \n",
       "17              18517     FOSTER, LEROYESHA    Scarlett, Matthew        May   \n",
       "18              18530        McCray, Sierra        Brown, Eugene   February   \n",
       "19              18767      Carter, Veronica       Murphy, Thomas  September   \n",
       "20              18847        Corbett, Linda     McNellis, Edward    October   \n",
       "21              18899          Mendoza, Ana        Swanson, Erik  September   \n",
       "22              18943         Morris, Allen       Dozier, Thomas      March   \n",
       "23              18953          Dove, Spring      Behrens, Edward       July   \n",
       "24              19023        Hoelle, Jarred       Hester, Thomas   November   \n",
       "25              19184          Lewis, Allix         Ghegan, Mark       June   \n",
       "26              19197      Weathers, Dianna        Brown, Eugene    October   \n",
       "27              19236     Carroll, Jennifer       Jordan, Robert    January   \n",
       "28              19304        Heyward, Ilesa         Price, Blair     August   \n",
       "29              19305       Williams, Maria        Swanson, Erik      March   \n",
       "...               ...                   ...                  ...        ...   \n",
       "1076            87695         Heywood, Anne       Murphy, Thomas    January   \n",
       "1077            87779     Clarke, Christian       Jordan, Robert    January   \n",
       "1078            87863          Linder, Lisa       Murphy, Thomas    January   \n",
       "1079            87923           Leyh, Belva     Bennett, Gregory    January   \n",
       "1080            88074        Hodges, Rodger      Behrens, Edward    January   \n",
       "1081            88104        Bowman, Janice        Swanson, Erik    January   \n",
       "1082            88170  McAuliffe, Christine     Bennett, Gregory    January   \n",
       "1083            88235  Gamble Murray, Mable     Bennett, Gregory    January   \n",
       "1084            88239        Eller, Whitney       Murphy, Thomas    January   \n",
       "1085            88413      Gadsden, Cynthia       Murphy, Thomas    January   \n",
       "1086            88415      Kliner, Jennifer     Bennett, Gregory    January   \n",
       "1087            88641          Schey, Emily     Bennett, Gregory    January   \n",
       "1088            88647     Borgerding, Brynn     Bennett, Gregory    January   \n",
       "1089            88656           Kain, Riena        Swanson, Erik    January   \n",
       "1090            88876     Carroll, Benjamin       Jordan, Robert    January   \n",
       "1091            88887        Brown, Maxwell       Murphy, Thomas    January   \n",
       "1092            88916        Steuart, Bryan       Dozier, Thomas    January   \n",
       "1093            88947         Glover, Aaron        Swanson, Erik    January   \n",
       "1094            88989       Fuller, Taianna       Murphy, Thomas    January   \n",
       "1095            89225         Gardner, John       Murphy, Thomas    January   \n",
       "1096            89367         Struna, Kevin       Noone, Michael    January   \n",
       "1097            89390        Cameron, Tyler       Noone, Michael    January   \n",
       "1098            89510         Thomas, Haden       Murphy, Thomas    January   \n",
       "1099            89658       Carrelli, Paula     Bennett, Gregory    January   \n",
       "1100            89779        Lawlis, Rhonda       Dozier, Thomas    January   \n",
       "1101            91171    Baines, Jacqueline       Murphy, Thomas    January   \n",
       "1102           180622       Mcpherson, John     Bennett, Gregory    January   \n",
       "1103           189678        Smith, Malcolm        Hall, Roxanne    January   \n",
       "1104           189700      Smith, Christine       Murphy, Thomas    January   \n",
       "1105           190257        Bearsley, Judy                         January   \n",
       "\n",
       "              month_year intake_method  Location_ID     Location_Name  \\\n",
       "0    2017-02-23 00:00:00           inj          165       West Ashley   \n",
       "1    2016-06-28 00:00:00           inj          165       West Ashley   \n",
       "2    2016-02-09 00:00:00           inj          165       West Ashley   \n",
       "3    2016-05-06 00:00:00           inj          165       West Ashley   \n",
       "4    2017-04-10 00:00:00           inj          165       West Ashley   \n",
       "5    2016-08-12 00:00:00           inj          165       West Ashley   \n",
       "6    2016-02-26 00:00:00           inj          165       West Ashley   \n",
       "7    2017-09-05 00:00:00           inj          165       West Ashley   \n",
       "8    2016-12-29 00:00:00           inj          165       West Ashley   \n",
       "9    2017-09-22 00:00:00           inj          165       West Ashley   \n",
       "10   2017-06-12 20:05:11           inj          165       West Ashley   \n",
       "11   2017-10-26 00:00:00           inj          165       West Ashley   \n",
       "12   2017-03-09 20:25:12           inj          165       West Ashley   \n",
       "13   2016-06-13 00:00:00           inj          165       West Ashley   \n",
       "14   2016-06-07 00:00:00           inj          165       West Ashley   \n",
       "15   2017-04-26 00:00:00           inj          165       West Ashley   \n",
       "16   2017-11-06 20:08:49           inj          165       West Ashley   \n",
       "17   2017-05-15 14:05:21           inj          165       West Ashley   \n",
       "18   2016-02-19 00:00:00           inj          165       West Ashley   \n",
       "19   2017-09-26 00:00:00           inj          175  North Charleston   \n",
       "20   2017-10-05 00:00:00           inj          165       West Ashley   \n",
       "21   2017-09-27 00:00:00           inj          165       West Ashley   \n",
       "22   2017-03-08 00:00:00           inj          165       West Ashley   \n",
       "23   2017-07-21 00:00:00           inj          165       West Ashley   \n",
       "24   2017-11-29 18:55:55           inj          165       West Ashley   \n",
       "25   2016-06-27 00:00:00           inj          165       West Ashley   \n",
       "26   2016-10-25 00:00:00           inj          165       West Ashley   \n",
       "27   2018-01-12 21:05:23           inj          165       West Ashley   \n",
       "28   2016-08-04 00:00:00           inj          165       West Ashley   \n",
       "29   2017-03-02 00:00:00           inj          165       West Ashley   \n",
       "...                  ...           ...          ...               ...   \n",
       "1076 2018-01-11 00:00:00           inj          171       Summerville   \n",
       "1077 2018-01-08 00:00:00           inj          165       West Ashley   \n",
       "1078 2018-01-19 00:00:00           inj          165       West Ashley   \n",
       "1079 2018-01-15 15:37:50           inj          165       West Ashley   \n",
       "1080 2018-01-30 00:00:00           inj          175  North Charleston   \n",
       "1081 2018-01-09 00:00:00           inj          175  North Charleston   \n",
       "1082 2018-01-08 00:00:00           inj          167          South MP   \n",
       "1083 2018-01-11 00:00:00           inj          165       West Ashley   \n",
       "1084 2018-01-18 14:09:58           inj          167          South MP   \n",
       "1085 2018-01-02 00:00:00           inj          175  North Charleston   \n",
       "1086 2018-01-09 00:00:00           inj          165       West Ashley   \n",
       "1087 2018-01-02 00:00:00           inj          165       West Ashley   \n",
       "1088 2018-01-09 14:47:16           inj          165       West Ashley   \n",
       "1089 2018-01-16 22:12:18           inj          165       West Ashley   \n",
       "1090 2018-01-12 21:05:18           inj          171       Summerville   \n",
       "1091 2018-01-24 22:09:58           inj          165       West Ashley   \n",
       "1092 2018-01-12 00:00:00           inj          175  North Charleston   \n",
       "1093 2018-01-23 00:00:00           inj          175  North Charleston   \n",
       "1094 2018-01-13 13:57:12           inj          171       Summerville   \n",
       "1095 2018-01-19 00:00:00           inj          165       West Ashley   \n",
       "1096 2018-01-31 22:07:26           inj          173     Moncks Corner   \n",
       "1097 2018-01-16 21:27:10           inj          173     Moncks Corner   \n",
       "1098 2018-01-15 21:30:51           inj          171       Summerville   \n",
       "1099 2018-01-11 00:00:00           inj          165       West Ashley   \n",
       "1100 2018-01-25 00:00:00           inj          175  North Charleston   \n",
       "1101 2018-01-19 00:00:00           inj          171       Summerville   \n",
       "1102 2018-01-30 00:00:00           inj          165       West Ashley   \n",
       "1103 2018-01-27 13:40:53           sub          167          South MP   \n",
       "1104 2018-01-31 19:09:17           inj          171       Summerville   \n",
       "1105 2018-01-30 00:00:00           inj          175  North Charleston   \n",
       "\n",
       "      Practice_ID   Practice_Name  \n",
       "0               7  Charleston ENT  \n",
       "1               7  Charleston ENT  \n",
       "2               7  Charleston ENT  \n",
       "3               7  Charleston ENT  \n",
       "4               7  Charleston ENT  \n",
       "5               7  Charleston ENT  \n",
       "6               7  Charleston ENT  \n",
       "7               7  Charleston ENT  \n",
       "8               7  Charleston ENT  \n",
       "9               7  Charleston ENT  \n",
       "10              7  Charleston ENT  \n",
       "11              7  Charleston ENT  \n",
       "12              7  Charleston ENT  \n",
       "13              7  Charleston ENT  \n",
       "14              7  Charleston ENT  \n",
       "15              7  Charleston ENT  \n",
       "16              7  Charleston ENT  \n",
       "17              7  Charleston ENT  \n",
       "18              7  Charleston ENT  \n",
       "19              7  Charleston ENT  \n",
       "20              7  Charleston ENT  \n",
       "21              7  Charleston ENT  \n",
       "22              7  Charleston ENT  \n",
       "23              7  Charleston ENT  \n",
       "24              7  Charleston ENT  \n",
       "25              7  Charleston ENT  \n",
       "26              7  Charleston ENT  \n",
       "27              7  Charleston ENT  \n",
       "28              7  Charleston ENT  \n",
       "29              7  Charleston ENT  \n",
       "...           ...             ...  \n",
       "1076            7  Charleston ENT  \n",
       "1077            7  Charleston ENT  \n",
       "1078            7  Charleston ENT  \n",
       "1079            7  Charleston ENT  \n",
       "1080            7  Charleston ENT  \n",
       "1081            7  Charleston ENT  \n",
       "1082            7  Charleston ENT  \n",
       "1083            7  Charleston ENT  \n",
       "1084            7  Charleston ENT  \n",
       "1085            7  Charleston ENT  \n",
       "1086            7  Charleston ENT  \n",
       "1087            7  Charleston ENT  \n",
       "1088            7  Charleston ENT  \n",
       "1089            7  Charleston ENT  \n",
       "1090            7  Charleston ENT  \n",
       "1091            7  Charleston ENT  \n",
       "1092            7  Charleston ENT  \n",
       "1093            7  Charleston ENT  \n",
       "1094            7  Charleston ENT  \n",
       "1095            7  Charleston ENT  \n",
       "1096            7  Charleston ENT  \n",
       "1097            7  Charleston ENT  \n",
       "1098            7  Charleston ENT  \n",
       "1099            7  Charleston ENT  \n",
       "1100            7  Charleston ENT  \n",
       "1101            7  Charleston ENT  \n",
       "1102            7  Charleston ENT  \n",
       "1103            7  Charleston ENT  \n",
       "1104            7  Charleston ENT  \n",
       "1105            7  Charleston ENT  \n",
       "\n",
       "[1106 rows x 10 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import calendar\n",
    "import datetime\n",
    "import numpy as np\n",
    "import string\n",
    "import matplotlib as mt\n",
    "import matplotlib.pyplot as plt\n",
    "import pymysql\n",
    "from xlsxwriter.utility import xl_rowcol_to_cell\n",
    "import platform\n",
    "myconnection = pymysql.connect( host='127.0.0.1', user='eallan', passwd='', db='main' )\n",
    "cursor = myconnection.cursor()\n",
    "practice_id = 7\n",
    "PSD = '2016-01-31 23:59:59'\n",
    "PED = '2018-01-31 23:59:59'\n",
    "year = 2017\n",
    "#vials_billing_report = pd.read_sql_query(\"SELECT concat_ws(', ', p.lastname, p.firstname) AS Patient, b.practice_chart_id AS Chart, c.name AS 'Mix Location', concat_ws(', ', d.lastname, d.firstname) AS Doctor, e.status AS Status, COUNT(vials.id) AS Vials, VA.antigen_count AS Antigens, DATE(vials.mix_date) AS mixDate FROM vials INNER JOIN patients AS p ON patient_id = p.id LEFT JOIN ( SELECT vial_antigens.vial_id AS vial_id, COUNT(*) AS `antigen_count`, vial_antigens.request_id AS request_id FROM vial_antigens LEFT JOIN vials ON vial_antigens.vial_id = vials.id WHERE vials.mix_practice_id = 7 AND vials.status_id <> 2 AND vials.status_id <> 8 AND mixed = 1 AND reviewed = 1 AND (vials.from_titrated != 1 OR vials.from_titrated IS NULL) AND mix_date BETWEEN %(PSD)s AND %(PED)s AND enabled <> 0 GROUP BY request_id ORDER BY request_id ASC) AS VA ON vials.request_id = VA.request_id LEFT JOIN practice_patient_refs b ON p.id = b.patient_id LEFT JOIN practice_locations c ON vials.mix_location_id = c.id LEFT JOIN practice_doctors d ON p.mix_practice_doctor_id = d.id LEFT JOIN vial_statuses e ON vials.status_id = e.id LEFT JOIN practices f ON p.practice_id = f.id WHERE vials.mix_practice_id = 7 AND vials.status_id <> 2 AND vials.status_id <> 8 AND mixed = 1 AND reviewed = 1 AND (vials.from_titrated != 1 OR vials.from_titrated IS NULL) AND `mix_date` BETWEEN %(PSD)s AND %(PED)s GROUP BY mixDate, Patient ORDER BY `mixDate` ASC, Patient ASC\", myconnection, params={\"PSD\":PSD, \"PED\":PED})\n",
    "#vials_billing_report.to_excel(\"CENT Vials Billing Report September 2017.xlsx\", index=False)\n",
    "#vials_mixed_report = pd.read_sql_query(\"SELECT vn.name AS Vial, concat_ws(', ', b.lastname, b.firstname) AS Patient, a.practice_chart_id AS Chart, p.name AS 'Mix Location', concat_ws(', ', d.lastname, d.firstname) AS Doctor, 'Active' AS 'Vial Status', convert_tz(v.mix_date, '+00:00', '-05:00') AS Mixed, v.expiration_date AS Expires FROM vials v INNER JOIN vial_names vn ON v.id = vn.vial_id INNER JOIN vial_statuses vs ON v.status_id = vs.id INNER JOIN practice_patient_refs a ON v.patient_id = a.patient_id LEFT JOIN patients b ON a.patient_id = b.id INNER JOIN practice_locations p ON p.id = v.mix_location_id LEFT JOIN practice_doctors d ON b.mix_practice_doctor_id = d.id WHERE convert_tz(v.mix_date, '+00:00', '-05:00') BETWEEN %(PSD)s AND %(PED)s AND (v.mix_practice_id = 7 OR b.shot_practice_id = 7) AND (v.is_child = 0 OR v.is_child IS NULL) ORDER BY b.lastname ASC, b.firstname ASC\", myconnection, params={\"PSD\":PSD, \"PED\":PED})\n",
    "#vials_mixed_report['Mixed'] = vials_mixed_report['Mixed'].dt.strftime('%m/%d/%Y %r')\n",
    "#vials_mixed_report['Expires'] = vials_mixed_report['Expires'].dt.strftime('%m/%d/%Y')\n",
    "#vials_mixed_report.to_excel(\"CENT Vials Mixed September 2017.xlsx\", index=False)\n",
    "treatment_and_vial_tests_report = pd.read_sql_query(\"SELECT concat_ws(', ', p.lastname, p.firstname) AS Patient, b.practice_chart_id AS Chart, c.name AS Location, concat_ws(', ', d.lastname, d.firstname) AS Doctor, a.status AS Status, convert_tz(a.date, '+00:00', '-05:00') AS 'Visit Date', convert_tz(a.date, '+00:00', '-05:00') AS Time, a.shots AS Treatments, a.vial_tests AS Tests FROM `patient_visits` a INNER JOIN `patients` AS p ON p.`id` = a.`patient_id` LEFT JOIN practice_patient_refs b ON p.id = b.patient_id LEFT JOIN practice_locations c ON a.location_id = c.id LEFT JOIN practice_doctors d ON p.mix_practice_doctor_id = d.id WHERE a.`practice_id` = 13 AND a.`status` = 'complete' AND a.date BETWEEN %(PSD)s AND %(PED)s ORDER BY a.date ASC, Patient\", myconnection, params={\"PSD\":PSD, \"PED\":PED})\n",
    "treatment_and_vial_tests_report['Part of Day'] = treatment_and_vial_tests_report['Time'].dt.strftime('%p')\n",
    "treatment_and_vial_tests_report['Visit Date'] = treatment_and_vial_tests_report['Visit Date'].dt.strftime('%m/%d/%Y')\n",
    "treatment_and_vial_tests_report['Time'] = treatment_and_vial_tests_report['Time'].dt.strftime('%r')\n",
    "#treatment_and_vial_tests_report.to_excel(\"TENT Treatments & Vial Tests Report December 2017.xlsx\", index=False)\n",
    "#treatment_and_vial_tests_report.to_excel(\"CENT Treatments & Vial Tests Report September 2017.xlsx\", index=False)\n",
    "treatments = pd.read_sql_query(\"SELECT a.ID AS Patients_Tested, concat_ws(', ', a.lastname, a.firstname) AS patient_name, concat_ws(', ', d.lastname, d.firstname) AS provider, monthname(a.therapy_start_date) as test_date, a.therapy_start_date as month_year, a.intake_method, a.Mix_Location_ID as Location_ID, b.name as Location_Name, a.mix_practice_id as Practice_ID, c.name as Practice_Name FROM patients a INNER JOIN practice_locations b on a.mix_location_ID = b.id INNER JOIN practices c on a.mix_practice_ID = c.id LEFT JOIN practice_doctors d on a.mix_practice_doctor_id = d.id WHERE a.therapy_start_date BETWEEN %(PSD)s AND %(PED)s and mix_practice_id = %(practice_ID)s\", myconnection, params={\"PSD\":PSD, \"PED\":PED, \"practice_ID\":practice_id})\n",
    "#if len(treatments) > 0:\n",
    "#    treatments['month_year'] = treatments['month_year'].dt.strftime('%m-%Y')\n",
    "#treatments.to_excel('BRENT New Patients per Provider.xlsx')\n",
    "#treatments2 = pd.pivot_table(treatments, index=['provider', 'intake_method'], values=['Patients_Tested'], columns=['month_year', 'test_date'], aggfunc='count',fill_value=0, margins=True, margins_name='Total New Patients')\n",
    "#treatments2\n",
    "#treatments.to_excel('CENT New Patient Starts 1.31.18.xlsx')\n",
    "treatments\n",
    "#platform.system()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "V2_data = pd.read_excel('advent foluma tests V2.xlsx', sheetname='V2')\n",
    "V2_data\n",
    "#v2_antigens = pd.read_excel('advent foluma tests V2.xlsx', sheetname='V2 Antigens')\n",
    "#v2_antigens\n",
    "V1_data = pd.read_excel('advent foluma tests V2.xlsx', sheetname='V1')\n",
    "V1_data\n",
    "#v1_antigens = pd.read_excel('advent foluma tests V2.xlsx', sheetname='V1 Antigens')\n",
    "#v1_antigens\n",
    "differences = V2_data.merge(V1_data, left_on=['allergy_id', 'name'], right_on=['allergy_id', 'Vial_Name'])\n",
    "differences\n",
    "differences['antigen_dose_x'].fillna(0, inplace=True)\n",
    "differences['antigen_dose_y'].fillna(0, inplace=True)\n",
    "#differences_antigens = v2_antigens.merge(v1_antigens, left_on=['allergy_id', 'name'], right_on=['allergy_id', 'Vial_Name'])\n",
    "#differences_antigens\n",
    "#differences_antigens['antigen_dose_x'].fillna(0, inplace=True)\n",
    "#differences_antigens['antigen_dose_y'].fillna(0, inplace=True)\n",
    "only_differences_in_formulas = differences[(differences['vial_volume_x'] != differences['vial_volume_y']) | (differences['total_antigens_x'] != differences['total_antigens_y']) | (differences['antigen_dose_x'] != differences['antigen_dose_y'])]\n",
    "only_differences_in_formulas.to_excel('Formual Diffs ADVENT V2.xlsx')\n",
    "only_differences_in_formulas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patients_Tested</th>\n",
       "      <th>practice_id</th>\n",
       "      <th>location_id</th>\n",
       "      <th>test_date</th>\n",
       "      <th>month_year</th>\n",
       "      <th>type</th>\n",
       "      <th>name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Dust mite mix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Grass Mix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Rye Grass</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Bermuda</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Johnson grass</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Timothy grass</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>White ash</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Box elder</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Mnt. Cedar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Cottonwood</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>American Elm</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Hickory/Pecan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Oak mix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Sycamore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Mulberry</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Sweet Gum</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Pine mix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Birch mix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Goldenrod</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Kochia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Lambs quarter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Marsh Elder</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Eng. Plantain</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Pigweed</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Ragweed</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Russian Thistle</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Dock-Sorrel</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Alternaria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>aspergillus</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>84455</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>May</td>\n",
       "      <td>2017-05-16</td>\n",
       "      <td>mqt</td>\n",
       "      <td>candida</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7623</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Hickory/Pecan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7624</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Oak mix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7625</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Sycamore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7626</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Mulberry</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7627</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Sweet Gum</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7628</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Pine mix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7629</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Birch mix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7630</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Goldenrod</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7631</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Kochia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7632</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Lambs quarter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7633</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Marsh Elder</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7634</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Pigweed</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7635</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Ragweed</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7636</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Russian Thistle</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7637</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Dock-Sorrel</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7638</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Alternaria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7639</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>aspergillus</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7640</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>candida</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7641</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>curvularia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7642</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>epicoccum</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7643</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Fusarium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7644</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Helminthosporium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7645</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Mucor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7646</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Pullularia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7647</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Rhizopus</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7648</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Cat hair</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7649</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Am. Cockroach</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7650</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Horse hair</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7651</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Cattle hair</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7652</th>\n",
       "      <td>85510</td>\n",
       "      <td>17</td>\n",
       "      <td>267</td>\n",
       "      <td>September</td>\n",
       "      <td>2017-09-27</td>\n",
       "      <td>mqt</td>\n",
       "      <td>Hormodendrum</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7653 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Patients_Tested practice_id location_id  test_date month_year type  \\\n",
       "0              84455          17         267        May 2017-05-16  mqt   \n",
       "1              84455          17         267        May 2017-05-16  mqt   \n",
       "2              84455          17         267        May 2017-05-16  mqt   \n",
       "3              84455          17         267        May 2017-05-16  mqt   \n",
       "4              84455          17         267        May 2017-05-16  mqt   \n",
       "5              84455          17         267        May 2017-05-16  mqt   \n",
       "6              84455          17         267        May 2017-05-16  mqt   \n",
       "7              84455          17         267        May 2017-05-16  mqt   \n",
       "8              84455          17         267        May 2017-05-16  mqt   \n",
       "9              84455          17         267        May 2017-05-16  mqt   \n",
       "10             84455          17         267        May 2017-05-16  mqt   \n",
       "11             84455          17         267        May 2017-05-16  mqt   \n",
       "12             84455          17         267        May 2017-05-16  mqt   \n",
       "13             84455          17         267        May 2017-05-16  mqt   \n",
       "14             84455          17         267        May 2017-05-16  mqt   \n",
       "15             84455          17         267        May 2017-05-16  mqt   \n",
       "16             84455          17         267        May 2017-05-16  mqt   \n",
       "17             84455          17         267        May 2017-05-16  mqt   \n",
       "18             84455          17         267        May 2017-05-16  mqt   \n",
       "19             84455          17         267        May 2017-05-16  mqt   \n",
       "20             84455          17         267        May 2017-05-16  mqt   \n",
       "21             84455          17         267        May 2017-05-16  mqt   \n",
       "22             84455          17         267        May 2017-05-16  mqt   \n",
       "23             84455          17         267        May 2017-05-16  mqt   \n",
       "24             84455          17         267        May 2017-05-16  mqt   \n",
       "25             84455          17         267        May 2017-05-16  mqt   \n",
       "26             84455          17         267        May 2017-05-16  mqt   \n",
       "27             84455          17         267        May 2017-05-16  mqt   \n",
       "28             84455          17         267        May 2017-05-16  mqt   \n",
       "29             84455          17         267        May 2017-05-16  mqt   \n",
       "...              ...         ...         ...        ...        ...  ...   \n",
       "7623           85510          17         267  September 2017-09-27  mqt   \n",
       "7624           85510          17         267  September 2017-09-27  mqt   \n",
       "7625           85510          17         267  September 2017-09-27  mqt   \n",
       "7626           85510          17         267  September 2017-09-27  mqt   \n",
       "7627           85510          17         267  September 2017-09-27  mqt   \n",
       "7628           85510          17         267  September 2017-09-27  mqt   \n",
       "7629           85510          17         267  September 2017-09-27  mqt   \n",
       "7630           85510          17         267  September 2017-09-27  mqt   \n",
       "7631           85510          17         267  September 2017-09-27  mqt   \n",
       "7632           85510          17         267  September 2017-09-27  mqt   \n",
       "7633           85510          17         267  September 2017-09-27  mqt   \n",
       "7634           85510          17         267  September 2017-09-27  mqt   \n",
       "7635           85510          17         267  September 2017-09-27  mqt   \n",
       "7636           85510          17         267  September 2017-09-27  mqt   \n",
       "7637           85510          17         267  September 2017-09-27  mqt   \n",
       "7638           85510          17         267  September 2017-09-27  mqt   \n",
       "7639           85510          17         267  September 2017-09-27  mqt   \n",
       "7640           85510          17         267  September 2017-09-27  mqt   \n",
       "7641           85510          17         267  September 2017-09-27  mqt   \n",
       "7642           85510          17         267  September 2017-09-27  mqt   \n",
       "7643           85510          17         267  September 2017-09-27  mqt   \n",
       "7644           85510          17         267  September 2017-09-27  mqt   \n",
       "7645           85510          17         267  September 2017-09-27  mqt   \n",
       "7646           85510          17         267  September 2017-09-27  mqt   \n",
       "7647           85510          17         267  September 2017-09-27  mqt   \n",
       "7648           85510          17         267  September 2017-09-27  mqt   \n",
       "7649           85510          17         267  September 2017-09-27  mqt   \n",
       "7650           85510          17         267  September 2017-09-27  mqt   \n",
       "7651           85510          17         267  September 2017-09-27  mqt   \n",
       "7652           85510          17         267  September 2017-09-27  mqt   \n",
       "\n",
       "                  name  \n",
       "0        Dust mite mix  \n",
       "1            Grass Mix  \n",
       "2           Rye Grass   \n",
       "3             Bermuda   \n",
       "4        Johnson grass  \n",
       "5       Timothy grass   \n",
       "6            White ash  \n",
       "7            Box elder  \n",
       "8           Mnt. Cedar  \n",
       "9           Cottonwood  \n",
       "10        American Elm  \n",
       "11      Hickory/Pecan   \n",
       "12             Oak mix  \n",
       "13            Sycamore  \n",
       "14            Mulberry  \n",
       "15           Sweet Gum  \n",
       "16            Pine mix  \n",
       "17           Birch mix  \n",
       "18           Goldenrod  \n",
       "19              Kochia  \n",
       "20       Lambs quarter  \n",
       "21         Marsh Elder  \n",
       "22       Eng. Plantain  \n",
       "23             Pigweed  \n",
       "24            Ragweed   \n",
       "25     Russian Thistle  \n",
       "26         Dock-Sorrel  \n",
       "27          Alternaria  \n",
       "28        aspergillus   \n",
       "29            candida   \n",
       "...                ...  \n",
       "7623    Hickory/Pecan   \n",
       "7624           Oak mix  \n",
       "7625          Sycamore  \n",
       "7626          Mulberry  \n",
       "7627         Sweet Gum  \n",
       "7628          Pine mix  \n",
       "7629         Birch mix  \n",
       "7630         Goldenrod  \n",
       "7631            Kochia  \n",
       "7632     Lambs quarter  \n",
       "7633       Marsh Elder  \n",
       "7634           Pigweed  \n",
       "7635          Ragweed   \n",
       "7636   Russian Thistle  \n",
       "7637       Dock-Sorrel  \n",
       "7638        Alternaria  \n",
       "7639      aspergillus   \n",
       "7640          candida   \n",
       "7641        curvularia  \n",
       "7642         epicoccum  \n",
       "7643         Fusarium   \n",
       "7644  Helminthosporium  \n",
       "7645            Mucor   \n",
       "7646        Pullularia  \n",
       "7647         Rhizopus   \n",
       "7648          Cat hair  \n",
       "7649     Am. Cockroach  \n",
       "7650        Horse hair  \n",
       "7651       Cattle hair  \n",
       "7652      Hormodendrum  \n",
       "\n",
       "[7653 rows x 7 columns]"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_inj_intra = pd.read_sql_query(\"SELECT a.patient_id as Patients_Tested, a.practice_id, a.location_id, monthname(a.test_date) as test_date, a.test_date as month_year, 'intra' as type, c.name FROM intradermal_tests a LEFT JOIN intradermal_test_results b on a.id = b.test_id LEFT JOIN intradermal_test_antigens_names c on b.antigen_id = c.id WHERE a.practice_id = 17 and a.test_date BETWEEN '2016-12-31 23:59:59' AND '2017-10-01 00:00:00'\", myconnection)\n",
    "total_inj_mqt = pd.read_sql_query(\"SELECT a.patient_id as Patients_Tested, a.practice_id, a.location_id, monthname(a.test_date) as test_date, a.test_date as month_year, 'mqt' as type, c.name FROM mq_tests a LEFT JOIN mq_tests_antigens b on a.id = b.test_id LEFT JOIN antigens c on b.antigen_id = c.id WHERE a.practice_id = 17 and a.test_date BETWEEN '2016-12-31 23:59:59' AND '2017-10-01 00:00:00' /*and b.multi is not null*/ and ((b.dilution_1 is not null and b.dilution_1 <> '') or (b.dilution_2 is not null and b.dilution_2 <> ''))\" , myconnection)\n",
    "total_inj = total_inj_intra.append(total_inj_mqt, ignore_index=True)\n",
    "total_inj"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\n",
      "<!DOCTYPE html>\r\n",
      "<html>\r\n",
      "<head>\r\n",
      "    <meta charset=\"utf-8\" />\r\n",
      "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n",
      "    <title>Log in | ENVISION5</title>\r\n",
      "    <link rel=\"shortcut icon\" href=\"/Envision/favicon.ico\" type=\"image/x-icon\" />\r\n",
      "\r\n",
      "    <link href=\"/Envision/Content/bootstrap.less\" rel=\"stylesheet\"/>\r\n",
      "<link href=\"/Envision/Content/ea-theme.less\" rel=\"stylesheet\"/>\r\n",
      "<link href=\"/Envision/Content/animate.css\" rel=\"stylesheet\"/>\r\n",
      "<link href=\"/Envision/Content/ea-animation.css\" rel=\"stylesheet\"/>\r\n",
      "<link href=\"/Envision/Fonts/glyphicons-regular.css\" rel=\"stylesheet\"/>\r\n",
      "<link href=\"/Envision/Fonts/glyphicons.css\" rel=\"stylesheet\"/>\r\n",
      "<link href=\"/Envision/Content/font-awesome.css\" rel=\"stylesheet\"/>\r\n",
      "<link href=\"/Envision/Fonts/ionicons.min.css\" rel=\"stylesheet\"/>\r\n",
      "<link href=\"/Envision/Content/messenger.css\" rel=\"stylesheet\"/>\r\n",
      "<link href=\"/Envision/Content/messenger-spinner.css\" rel=\"stylesheet\"/>\r\n",
      "<link href=\"/Envision/Content/messenger-theme-flat.css\" rel=\"stylesheet\"/>\r\n",
      "<link href=\"/Envision/Content/messenger-theme-future.css\" rel=\"stylesheet\"/>\r\n",
      "<link href=\"/Envision/Content/leaflet.css\" rel=\"stylesheet\"/>\r\n",
      "<link href=\"/Envision/Content/MarkerCluster.css\" rel=\"stylesheet\"/>\r\n",
      "<link href=\"/Envision/Content/MarkerCluster.Default.css\" rel=\"stylesheet\"/>\r\n",
      "<link href=\"/Envision/Content/ea-leaflet-custom.css\" rel=\"stylesheet\"/>\r\n",
      "<link href=\"/Envision/Fonts/ea-execFont.css\" rel=\"stylesheet\"/>\r\n",
      "\r\n",
      "    <script src=\"/Envision/Scripts/modernizr-2.8.3.js\"></script>\r\n",
      "\r\n",
      "    \r\n",
      "    <link rel=\"stylesheet\" href=\"/Envision/Content/ea-login.css\" />\r\n",
      "\r\n",
      "\r\n",
      "</head>\r\n",
      "<body>\r\n",
      "\r\n",
      "    \r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "<div>\r\n",
      "    <div style=\"width:268px;margin:auto;padding-left:0px;\">\r\n",
      "        <div class=\"text-center animated fadeInDown\" style=\"position:relative;margin-top:200px;\">\r\n",
      "            \r\n",
      "            <div style=\"position:absolute;left:0;top:0px;\">\r\n",
      "                <img src=\"/Envision/Images/ENVISION5.png\" style=\"width:267px;\" />\r\n",
      "            </div>\r\n",
      "            <div style=\"position:absolute; width:267px;top:80px;\">\r\n",
      "<form action=\"/Envision/Account/Login?ReturnUrl=%2FEnvision%2FMyData%2FCustomer-Files\" autocomplete=\"off\" method=\"post\" role=\"form\"><input name=\"__RequestVerificationToken\" type=\"hidden\" value=\"AxRBZiYsAF_XeJz6SsH4zFdwZQ5KU--P_4PXkyVl3kGRWBihfg7cT6b0g_QbWcxX4HdLiQ2\" />                    <div class=\"form-group\">\r\n",
      "                        <input autocomplete=\"off\" class=\"form-control\" data-val=\"true\" data-val-required=\"The User name field is required.\" id=\"UserName\" name=\"UserName\" placeholder=\"Username\" type=\"text\" value=\"\" />\r\n",
      "                        <span class=\"field-validation-valid\" data-valmsg-for=\"UserName\" data-valmsg-replace=\"true\"></span>\r\n",
      "                    </div>\r\n",
      "                    <div class=\"form-group\">\r\n",
      "                        <input autocomplete=\"off\" class=\"form-control\" data-val=\"true\" data-val-required=\"The Password field is required.\" id=\"Password\" name=\"Password\" placeholder=\"Password\" type=\"password\" />\r\n",
      "                        <span class=\"field-validation-valid\" data-valmsg-for=\"Password\" data-valmsg-replace=\"true\"></span>\r\n",
      "                    </div>\r\n",
      "                    <button type=\"submit\" class=\"btn btn-primary block full-width m-b\">Login</button>\r\n",
      "                    <a class=\"pointer\" data-forgot-password><small>Forgot password?</small></a>\r\n",
      "</form>                \r\n",
      "                <!--div style=\"margin-top:40px;\">\r\n",
      "                    <a href=\"https://en.environicsanalytics.ca:8090/Envision\">\r\n",
      "                        <small>Click for ENVISION 2.7</small><br/>\r\n",
      "                        <img style=\"width:150px;\" src=\"~/Content/images/logo_small_envision_old.png\" />\r\n",
      "                    </a>\r\n",
      "                <div-->\r\n",
      "            </div>\r\n",
      "        </div>\r\n",
      "    </div>\r\n",
      "</div>\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "    <script src=\"/Envision/Scripts/jquery-2.1.1.js\"></script>\r\n",
      "<script src=\"/Envision/Scripts/jquery.unobtrusive-ajax.js\"></script>\r\n",
      "<script src=\"/Envision/Scripts/jquery.validate.js\"></script>\r\n",
      "<script src=\"/Envision/Scripts/jquery.validate.unobtrusive.js\"></script>\r\n",
      "<script src=\"/Envision/Scripts/jquery.cookie.js\"></script>\r\n",
      "\r\n",
      "    <script src=\"/Envision/Scripts/bootstrap.js\"></script>\r\n",
      "<script src=\"/Envision/Scripts/respond.js\"></script>\r\n",
      "\r\n",
      "    <script src=\"/Envision/Scripts/bootbox.min.js\"></script>\r\n",
      "<script src=\"/Envision/Scripts/messenger.js\"></script>\r\n",
      "<script src=\"/Envision/Scripts/messenger-theme-flat.js\"></script>\r\n",
      "<script src=\"/Envision/Scripts/messenger-theme-future.js\"></script>\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "    <script src=\"/Envision/Scripts/ea-theme.js\"></script>\r\n",
      "<script src=\"/Envision/Scripts/ea-filter.20161107.js\"></script>\r\n",
      "<script src=\"/Envision/Scripts/ea-report.20170817.js\"></script>\r\n",
      "\r\n",
      "    \r\n",
      "\r\n",
      "    <script type=\"text/javascript\">\r\n",
      "\r\n",
      "           \r\n",
      "        $(\"[data-forgot-password]\").click(function () {\r\n",
      "\r\n",
      "            Messenger().post({\r\n",
      "                message: \"Please contact ENVISION5 support<br/>Email: envisionsupport@environicsanalytics.ca\",\r\n",
      "                type: \"info\",\r\n",
      "                theme: 'flat',\r\n",
      "                showCloseButton: true,\r\n",
      "                hideAfter:360\r\n",
      "            });\r\n",
      "        });\r\n",
      "\r\n",
      "    </script>\r\n",
      "\r\n",
      "\r\n",
      "    <!-- START ClickJacking -->\r\n",
      "    <style id=\"antiClickjack\">body {display: none !important;}</style>\r\n",
      "    <script type=\"text/javascript\">if(self === top){var antiClickjack = document.getElementById(\"antiClickjack\"); antiClickjack.parentNode.removeChild(antiClickjack);} else {top.location = self.location;}</script>\r\n",
      "    <!-- END  ClickJacking -->\r\n",
      "\r\n",
      "    <script type=\"text/javascript\">\r\n",
      "                var appInsights = window.appInsights || function (config) {\r\n",
      "                    function i(config) { t[config] = function () { var i = arguments; t.queue.push(function () { t[config].apply(t, i) }) } } var t = { config: config }, u = document, e = window, o = \"script\", s = \"AuthenticatedUserContext\", h = \"start\", c = \"stop\", l = \"Track\", a = l + \"Event\", v = l + \"Page\", y = u.createElement(o), r, f; y.src = config.url || \"https://az416426.vo.msecnd.net/scripts/a/ai.0.js\"; u.getElementsByTagName(o)[0].parentNode.appendChild(y); try { t.cookie = u.cookie } catch (p) { } for (t.queue = [], t.version = \"1.0\", r = [\"Event\", \"Exception\", \"Metric\", \"PageView\", \"Trace\", \"Dependency\"]; r.length;)i(\"track\" + r.pop()); return i(\"set\" + s), i(\"clear\" + s), i(h + a), i(c + a), i(h + v), i(c + v), i(\"flush\"), config.disableExceptionTracking || (r = \"onerror\", i(\"_\" + r), f = e[r], e[r] = function (config, i, u, e, o) { var s = f && f(config, i, u, e, o); return s !== !0 && t[\"_\" + r](config, i, u, e, o), s }), t\r\n",
      "                }({\r\n",
      "                    instrumentationKey: \"a30ceb98-e859-4286-afcc-9b2b42e7d853\"\r\n",
      "        });\r\n",
      "        appInsights.queue.push(function () {\r\n",
      "            appInsights.context.addTelemetryInitializer(function (envelope) {\r\n",
      "                envelope.tags = envelope.tags || {};\r\n",
      "                if (typeof screen !== \"undefined\") {\r\n",
      "                    envelope.tags[\"ai.device.screenResolution\"] = screen.width + \"X\" + screen.height;\r\n",
      "                }\r\n",
      "            });\r\n",
      "            appInsights.context.addTelemetryInitializer(function (envelope) {\r\n",
      "                if (!envelope.data.baseData.success && envelope.data.baseData.resultCode === \"0\") {\r\n",
      "                    return false;\r\n",
      "                }\r\n",
      "                if (!envelope.data.baseData.success && envelope.data.baseData.commandName === \"/signalR/abort\") {\r\n",
      "                    return false;\r\n",
      "                }\r\n",
      "            });\r\n",
      "\r\n",
      "        });\r\n",
      "\r\n",
      "        window.appInsights = appInsights;\r\n",
      "        appInsights.trackPageView();\r\n",
      "\r\n",
      "    </script>\r\n",
      "</body>\r\n",
      "</html>\r\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "\n",
    "UserName = 'fuelmedical_user'\n",
    "Password = 'Fu3lMedic@l'\n",
    "submit = 'submit'\n",
    "\n",
    "payload = {'UserName':UserName, 'Password':Password}\n",
    "login_url = 'https://en.environicsanalytics.ca/Envision/Account/Login?ReturnUrl=%2FEnvision%2F'\n",
    "url = 'https://en.environicsanalytics.ca/Envision/MyData/Customer-Files'\n",
    "\n",
    "#with requests.Session() as s:\n",
    "#    post = s.post(login_url, data=payload)\n",
    "#    r = s.get(url)\n",
    "#    print(r.text)\n",
    "post = requests.post(login_url, data=payload)\n",
    "r = requests.get(url)\n",
    "print(r.text)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
